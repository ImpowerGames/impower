{
  "name": "vscode-sparkdown",
  "displayName": "Sparkdown",
  "description": "Sparkdown autocomplete, syntax highlighting, and export to PDF",
  "galleryBanner": {
    "color": "#053155",
    "theme": "dark"
  },
  "icon": "icon.png",
  "publisher": "impowergames",
  "version": "2.1.0",
  "pricing": "Free",
  "license": "MIT",
  "homepage": "https://www.impower.app",
  "bugs": {
    "url": "https://github.com/ImpowerGames/impower/labels/vscode",
    "email": "support@impower.games"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/ImpowerGames/impower"
  },
  "sponsor": {
    "url": "https://www.patreon.com/impowergames"
  },
  "engines": {
    "vscode": "^1.97.0"
  },
  "categories": [
    "Programming Languages",
    "Other"
  ],
  "activationEvents": [
    "onStartupFinished",
    "onLanguage:sparkdown",
    "onCommand:sparkdown.exportpdf",
    "onCommand:sparkdown:exporthtml",
    "onCommand:sparkdown:exportcsv",
    "onCommand:sparkdown:exportjson",
    "onCommand:sparkdown.previewScreenplay",
    "onCommand:sparkdown.previewGame",
    "onView:sparkdown-cheatsheet",
    "onWebviewPanel:sparkdown-preview-screenplay",
    "onWebviewPanel:sparkdown-preview-game",
    "onWebviewPanel:sparkdown-preview-screen",
    "onWebviewPanel:sparkdown-inspector",
    "onDebugResolve:mock",
    "onDebugDynamicConfigurations:mock",
    "onCommand:sparkdown.getProgramName",
    "onCommand:sparkdown.getSaveName"
  ],
  "browser": "./out/extension.js",
  "contributes": {
    "typescriptServerPlugins": [
      {
        "name": "typescript-spark-plugin",
        "enableForWorkspaceTypeScriptVersions": true
      }
    ],
    "configurationDefaults": {
      "workbench.colorCustomizations": {
        "editor.stackFrameHighlightBackground": "#00000000"
      },
      "[sparkdown]": {
        "workbench.editor.revealIfOpen": true,
        "diffEditor.ignoreTrimWhitespace": false,
        "editor.wordWrap": "on",
        "editor.suggest.snippetsPreventQuickSuggestions": false,
        "editor.wordBasedSuggestions": "off",
        "editor.suggestSelection": "first",
        "editor.insertSpaces": true,
        "editor.tabSize": 2,
        "editor.detectIndentation": false,
        "editor.bracketPairColorization.enabled": false,
        "editor.guides.bracketPairs": false,
        "editor.guides.highlightActiveIndentation": true,
        "editor.guides.bracketPairsHorizontal": false,
        "editor.renderWhitespace": "boundary",
        "editor.formatOnSave": true,
        "files.trimTrailingWhitespace": false
      },
      "editor.semanticHighlighting.enabled": true,
      "editor.semanticTokenColorCustomizations": {
        "enabled": true,
        "rules": {
          "keyword:sparkdown": {
            "foreground": "#F9B8F9"
          },
          "operator:sparkdown": {
            "foreground": "#A0A0A0"
          }
        },
        "[*Light*]": {
          "enabled": true,
          "rules": {
            "keyword:sparkdown": {
              "foreground": "#AD33CC"
            },
            "operator:sparkdown": {
              "foreground": "#A0A0A0"
            }
          }
        }
      },
      "editor.tokenColorCustomizations": {
        "textMateRules": [
          {
            "scope": "markup.other.bold.sd",
            "settings": {
              "fontStyle": "bold"
            }
          },
          {
            "scope": "markup.other.italic.sd",
            "settings": {
              "fontStyle": "italic"
            }
          },
          {
            "scope": "markup.other.underline.sd",
            "settings": {
              "fontStyle": "underline"
            }
          },
          {
            "scope": "markup.other.strikethrough.sd",
            "settings": {
              "fontStyle": "strikethrough"
            }
          },
          {
            "scope": "markup.emphasis.tilde.sd",
            "settings": {
              "fontStyle": "italic"
            }
          },
          {
            "scope": "markup.emphasis.colon.sd",
            "settings": {
              "fontStyle": "italic"
            }
          },
          {
            "scope": "markup.other.bold.sd markup.other.italic.sd",
            "settings": {
              "fontStyle": "italic bold"
            }
          },
          {
            "scope": "markup.other.bold.sd markup.other.underline.sd",
            "settings": {
              "fontStyle": "bold underline"
            }
          },
          {
            "scope": "markup.other.italic.sd markup.other.underline.sd",
            "settings": {
              "fontStyle": "italic underline"
            }
          },
          {
            "scope": "markup.other.bold.sd markup.other.italic.sd markup.other.underline.sd",
            "settings": {
              "fontStyle": "italic bold underline"
            }
          },
          {
            "scope": "markup.other.bold.sd markup.other.italic.sd markup.emphasis.tilde.sd",
            "settings": {
              "fontStyle": "italic bold"
            }
          },
          {
            "scope": "markup.other.bold.sd markup.other.underline.sd markup.emphasis.tilde.sd",
            "settings": {
              "fontStyle": "italic bold underline"
            }
          },
          {
            "scope": "markup.other.bold.sd markup.other.underline.sd markup.emphasis.colon.sd",
            "settings": {
              "fontStyle": "italic bold underline"
            }
          },
          {
            "scope": "meta.template.expression.operator",
            "settings": {
              "foreground": "#A0A0A0"
            }
          },
          {
            "scope": "keyword.operator",
            "settings": {
              "foreground": "#A0A0A0"
            }
          },
          {
            "scope": "keyword.control.section",
            "settings": {
              "foreground": "#D88CFF"
            }
          },
          {
            "scope": "keyword.control.divert.path",
            "settings": {
              "foreground": "#D88CFF"
            }
          },
          {
            "scope": "keyword.control.inner",
            "settings": {
              "foreground": "#A774B3"
            }
          },
          {
            "scope": "keyword.control.transition",
            "settings": {
              "foreground": "#BEA3A3"
            }
          },
          {
            "scope": "string.regexp.scene",
            "settings": {
              "foreground": "#FF8080"
            }
          },
          {
            "scope": "support.type.component",
            "settings": {
              "foreground": "#FF80BB"
            }
          },
          {
            "scope": "support.type.component.custom",
            "settings": {
              "foreground": "#ffa8d1"
            }
          },
          {
            "scope": "string.interpolated.view",
            "settings": {
              "foreground": "#b19d95"
            }
          }
        ],
        "[*Light*]": {
          "textMateRules": [
            {
              "scope": "meta.template.expression.operator",
              "settings": {
                "foreground": "#A0A0A0"
              }
            },
            {
              "scope": "keyword.operator",
              "settings": {
                "foreground": "#A0A0A0"
              }
            },
            {
              "scope": "keyword.control.section",
              "settings": {
                "foreground": "#C964FF"
              }
            },
            {
              "scope": "keyword.control.divert.path",
              "settings": {
                "foreground": "#C964FF"
              }
            },
            {
              "scope": "keyword.control.inner",
              "settings": {
                "foreground": "#A774B3"
              }
            },
            {
              "scope": "keyword.control.transition",
              "settings": {
                "foreground": "#800000"
              }
            },
            {
              "scope": "string.regexp.scene",
              "settings": {
                "foreground": "#EE0000"
              }
            },
            {
              "scope": "support.type.component",
              "settings": {
                "foreground": "#E0569A"
              }
            },
            {
              "scope": "string.interpolated.view",
              "settings": {
                "foreground": "#B84B4B"
              }
            }
          ]
        }
      }
    },
    "languages": [
      {
        "id": "sparkdown",
        "aliases": [
          "Sparkdown",
          "sparkdown"
        ],
        "extensions": [
          ".sd"
        ],
        "configuration": "./language/sparkdown.language-config.json",
        "icon": {
          "light": "icon-lang.png",
          "dark": "icon-lang.png"
        }
      },
      {
        "id": "screen",
        "aliases": [
          "Screen",
          "screen"
        ],
        "extensions": [
          ".screen"
        ],
        "icon": {
          "light": "icon-lang.png",
          "dark": "icon-lang.png"
        }
      }
    ],
    "grammars": [
      {
        "language": "sparkdown",
        "scopeName": "text.source.sparkdown",
        "path": "./language/sparkdown.language-grammar.json"
      }
    ],
    "snippets": [
      {
        "language": "sparkdown",
        "path": "./language/sparkdown.language-snippets.json"
      }
    ],
    "viewsContainers": {
      "activitybar": [
        {
          "id": "sparkdown-view",
          "icon": "icon-activitybar.png",
          "title": "Sparkdown"
        }
      ]
    },
    "views": {
      "sparkdown-view": [
        {
          "id": "sparkdown-outline",
          "name": "Outline",
          "initialSize": 2
        },
        {
          "id": "sparkdown-commands",
          "name": "Commands",
          "initialSize": 1
        },
        {
          "id": "sparkdown-cheatsheet",
          "name": "Cheat Sheet",
          "type": "webview",
          "visibility": "collapsed",
          "initialSize": 3
        }
      ],
      "debug": [
        {
          "id": "sparkdown-compilation",
          "name": "Compilation Tree",
          "visibility": "collapsed"
        }
      ]
    },
    "menus": {
      "view/title": [
        {
          "command": "sparkdown.previewGame",
          "group": "navigation@3",
          "when": "view == sparkdown-outline"
        },
        {
          "command": "sparkdown.previewScreenplay",
          "group": "navigation@4",
          "when": "view == sparkdown-outline"
        }
      ],
      "editor/title": [
        {
          "command": "sparkdown.previewGame",
          "when": "editorLangId == sparkdown",
          "group": "navigation@3"
        },
        {
          "command": "sparkdown.previewScreenplay",
          "when": "editorLangId == sparkdown",
          "group": "navigation@4"
        }
      ],
      "debug/toolBar": [
        {
          "command": "sparkdown.debug.pin",
          "when": "!sparkdown.debug.pinned"
        },
        {
          "command": "sparkdown.debug.unpin",
          "when": "sparkdown.debug.pinned"
        }
      ]
    },
    "commands": [
      {
        "command": "sparkdown.outline.reveal",
        "when": "editorLangId == sparkdown",
        "title": "Reveal cursor position",
        "category": "Sparkdown",
        "icon": "$(remote)"
      },
      {
        "command": "sparkdown.previewGame",
        "when": "editorLangId == sparkdown",
        "title": "Preview Game",
        "icon": "$(game)"
      },
      {
        "command": "sparkdown.previewScreenplay",
        "when": "editorLangId == sparkdown",
        "title": "Preview Screenplay",
        "icon": "$(book)"
      },
      {
        "command": "sparkdown.previewScreen",
        "when": "editorLangId == screen",
        "title": "Preview Screen",
        "icon": "$(preview)"
      },
      {
        "command": "sparkdown.openInspector",
        "when": "editorLangId == yaml",
        "title": "Open Inspector",
        "icon": "$(info)"
      },
      {
        "command": "sparkdown.exportpdf",
        "when": "editorLangId == sparkdown",
        "title": "Export screenplay PDF",
        "category": "Sparkdown"
      },
      {
        "command": "sparkdown.exporthtml",
        "when": "editorLangId == sparkdown",
        "title": "Export screenplay HTML",
        "category": "Sparkdown"
      },
      {
        "command": "sparkdown.exportcsv",
        "when": "editorLangId == sparkdown",
        "title": "Export translation CSV",
        "category": "Sparkdown"
      },
      {
        "command": "sparkdown.exportjson",
        "when": "editorLangId == sparkdown && resource in sparkdown.json",
        "title": "Export Game JSON",
        "category": "Sparkdown"
      },
      {
        "command": "sparkdown.statistics",
        "when": "editorLangId == sparkdown",
        "title": "View statistics",
        "category": "Sparkdown"
      },
      {
        "command": "sparkdown.debugGame",
        "title": "Run & Debug Game",
        "category": "Sparkdown Debugger",
        "enablement": "!inDebugMode",
        "icon": "$(debug-alt)"
      },
      {
        "command": "sparkdown.runGame",
        "title": "Run Game",
        "category": "Sparkdown Debugger",
        "enablement": "!inDebugMode",
        "icon": "$(play)"
      },
      {
        "command": "sparkdown.debug.pin",
        "title": "Cursor is not synced with execution location",
        "icon": "$(pin)",
        "category": "Debug"
      },
      {
        "command": "sparkdown.debug.unpin",
        "title": "Cursor is synced with execution location",
        "icon": "$(pinned-dirty)",
        "category": "Debug"
      }
    ],
    "keybindings": [
      {
        "command": "sparkdown.debugGame",
        "when": "editorLangId == sparkdown",
        "key": "f5",
        "mac": "f5"
      },
      {
        "command": "sparkdown.exportpdf",
        "when": "editorLangId == sparkdown",
        "key": "ctrl+shift+b",
        "mac": "cmd+shift+b"
      },
      {
        "command": "sparkdown.extension.onEnterKey",
        "key": "enter",
        "when": "editorTextFocus && !editorReadonly && editorLangId =~ /^sparkdown$/ && (!suggestWidgetVisible || config.editor.acceptSuggestionOnEnter == 'off') && !editorHasMultipleSelections && vim.mode != 'Normal' && vim.mode != 'Visual' && vim.mode != 'VisualBlock' && vim.mode != 'VisualLine' && vim.mode != 'SearchInProgressMode' && vim.mode != 'CommandlineInProgress' && vim.mode != 'Replace' && vim.mode != 'EasyMotionMode' && vim.mode != 'EasyMotionInputMode' && vim.mode != 'SurroundInputMode'"
      },

      {
        "command": "sparkdown.extension.editing.toggleBold",
        "key": "ctrl+b",
        "mac": "cmd+b",
        "when": "editorTextFocus && !editorReadonly && editorLangId =~ /^sparkdown$/ && (editorHasSelection || sparkdown.extension.editor.cursor.inTextSymbol)"
      },
      {
        "command": "sparkdown.extension.editing.toggleItalic",
        "key": "ctrl+i",
        "mac": "cmd+i",
        "when": "editorTextFocus && !editorReadonly && editorLangId =~ /^sparkdown$/ && (editorHasSelection || sparkdown.extension.editor.cursor.inTextSymbol)"
      },
      {
        "command": "sparkdown.extension.editing.toggleItalicAsterisk",
        "key": "shift+8",
        "mac": "shift+8",
        "when": "editorTextFocus && !editorReadonly && editorLangId =~ /^sparkdown$/ && (editorHasSelection || sparkdown.extension.editor.cursor.inTextSymbol)"
      },
      {
        "command": "sparkdown.extension.editing.toggleUnderline",
        "key": "shift+-",
        "mac": "shift+-",
        "when": "editorTextFocus && !editorReadonly && editorLangId =~ /^sparkdown$/ && (editorHasSelection || sparkdown.extension.editor.cursor.inTextSymbol)"
      },
      {
        "command": "sparkdown.extension.editing.toggleCenter",
        "key": "shift+6",
        "mac": "shift+6",
        "when": "editorTextFocus && !editorReadonly && editorLangId =~ /^sparkdown$/ && (editorHasSelection || sparkdown.extension.editor.cursor.inTextSymbol)"
      },
      {
        "command": "sparkdown.extension.editing.toggleWavy",
        "key": "shift+`",
        "mac": "shift+`",
        "when": "editorTextFocus && !editorReadonly && editorLangId =~ /^sparkdown$/ && (editorHasSelection || sparkdown.extension.editor.cursor.inTextSymbol)"
      },
      {
        "command": "sparkdown.extension.editing.toggleShaky",
        "key": "shift+;",
        "mac": "shift+;",
        "when": "editorTextFocus && !editorReadonly && editorLangId =~ /^sparkdown$/ && (editorHasSelection || sparkdown.extension.editor.cursor.inTextSymbol)"
      }
    ],
    "configuration": [
      {
        "title": "Sparkdown",
        "type": "object",
        "properties": {
          "sparkdown.scriptFiles": {
            "type": "string",
            "default": "*.{sd}",
            "description": "Recognized filename patterns for script files"
          },
          "sparkdown.imageFiles": {
            "type": "string",
            "default": "*.{png,apng,jpeg,jpg,gif,bmp,svg,webp}",
            "description": "Recognized filename patterns for image files"
          },
          "sparkdown.audioFiles": {
            "type": "string",
            "default": "*.{mid,wav,mp3,mp2,ogg,aac,opus,flac}",
            "description": "Recognized filename patterns for audio files"
          },
          "sparkdown.fontFiles": {
            "type": "string",
            "default": "*.{ttf,woff,woff2,otf}",
            "description": "Recognized filename patterns for font files"
          },
          "sparkdown.worldFiles": {
            "type": "string",
            "default": "*.{js}",
            "description": "Recognized filename patterns for world files"
          }
        }
      },
      {
        "title": "Sparkdown Editor",
        "type": "object",
        "properties": {
          "sparkdown.editor.autoRenameFiles": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "When renaming a reference to a file in the editor, also rename the asset file it refers to."
          },
          "sparkdown.editor.autoCloseAngleBrackets": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "Automatically closes <> inside of text.\n\n*[If you are using a vim emulator, you should disable this setting.]*"
          },
          "sparkdown.formatter.convertInkSyntaxToSparkdownSyntax": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "When formatting, replace all ink-specific syntax with sparkdown-equivalent syntax\n\n(e.g. 'var' instead of 'VAR', 'temp' instead of '~ temp', etc.)."
          }
        }
      },
      {
        "title": "Sparkdown Preview",
        "type": "object",
        "properties": {
          "sparkdown.game.previewSynchronizedWithCursor": {
            "type": "boolean",
            "default": true,
            "description": "Synchronize game preview with editor's cursor position"
          },
          "sparkdown.screenplay.previewTexture": {
            "type": "boolean",
            "default": true,
            "description": "Show textured background in screenplay preview"
          },
          "sparkdown.screenplay.previewTheme": {
            "type": "string",
            "enum": [
              "vscode",
              "paper"
            ],
            "description": "The theme to be used for the screenplay preview",
            "default": "paper"
          },
          "sparkdown.screenplay.previewSynchronizedWithCursor": {
            "type": "boolean",
            "default": true,
            "description": "Synchronize screenplay preview with editor's cursor position"
          }
        }
      },
      {
        "title": "Sparkdown Export",
        "type": "object",
        "properties": {
          "sparkdown.screenplay.formatting.printSceneHeadersBold": {
            "type": "boolean",
            "default": true,
            "description": "Make scene headers bold in screenplay"
          },
          "sparkdown.screenplay.markup.printKnotHeadings": {
            "type": "boolean",
            "default": false,
            "description": "Print knot headings in screenplay ( lines that start with == )"
          },
          "sparkdown.screenplay.markup.printStitchHeadings": {
            "type": "boolean",
            "default": false,
            "description": "Print stitch headings in screenplay ( lines that start with = )"
          },
          "sparkdown.screenplay.numbering.printSceneNumbers": {
            "type": "string",
            "enum": [
              "none",
              "left",
              "right",
              "both"
            ],
            "default": "none",
            "description": "Print scene numbers in screenplay"
          },
          "sparkdown.screenplay.numbering.printSectionNumbers": {
            "type": "boolean",
            "default": false,
            "description": "Print section numbers in screenplay"
          },
          "sparkdown.screenplay.pages.printTitlePage": {
            "type": "boolean",
            "default": true,
            "description": "Include title page in screenplay"
          },
          "sparkdown.screenplay.pdf.printPaperSize": {
            "type": "string",
            "description": "The paper dimensions of the screenplay pdf",
            "enum": [
              "a4",
              "usletter"
            ],
            "default": "usletter"
          },
          "sparkdown.screenplay.pdf.composition.pageBreaks.printDialogueSplitAcrossPages": {
            "type": "boolean",
            "default": true,
            "description": "Allow dialogue to be split between pages of the screenplay pdf"
          },
          "sparkdown.screenplay.pdf.composition.printDialogueMORE": {
            "type": "string",
            "default": "(MORE)",
            "description": "Text to print when dialogue is interrupted by a page break in the screenplay pdf"
          },
          "sparkdown.screenplay.pdf.composition.printDialogueCONTD": {
            "type": "string",
            "default": "(CONT'D)",
            "description": "Text to print next to a character's name when continuing their dialogue after a page break in the screenplay pdf"
          },
          "sparkdown.screenplay.pdf.numbering.printPageNumbers": {
            "type": "boolean",
            "default": true,
            "description": "Print page numbers in the screenplay pdf"
          },
          "sparkdown.screenplay.pdf.bookmarks.printBookmarks": {
            "type": "boolean",
            "default": true,
            "description": "Create bookmarks for knots, stitches, and scenes in the screenplay pdf"
          },
          "sparkdown.screenplay.pdf.bookmarks.printBookmarksForInvisibleHeadings": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "Add bookmarks for all headings, even if they are not printed."
          }
        }
      }
    ],
    "breakpoints": [
      {
        "language": "sparkdown"
      }
    ],
    "debuggers": [
      {
        "type": "game",
        "languages": [
          "sparkdown"
        ],
        "label": "Spark Game",
        "program": "./out/debugAdapter.js",
        "runtime": "node",
        "configurationAttributes": {
          "launch": {
            "required": [
              "program"
            ],
            "properties": {
              "program": {
                "type": "string",
                "description": "Absolute path to a .sd file.",
                "default": "${workspaceFolder}/${command:AskForProgramName}"
              },
              "save": {
                "type": "string",
                "description": "Absolute path to a .sav file.",
                "default": "${workspaceFolder}/${command:AskForSaveName}"
              },
              "stopOnEntry": {
                "type": "boolean",
                "description": "Automatically stop after launch.",
                "default": true
              },
              "trace": {
                "type": "boolean",
                "description": "Enable logging of the Debug Adapter Protocol.",
                "default": true
              },
              "compileError": {
                "type": "string",
                "description": "Simulates a compile error in 'launch' request.",
                "enum": [
                  "default",
                  "show",
                  "hide"
                ],
                "enumDescriptions": [
                  "default: show fake compile error to user",
                  "show fake compile error to user",
                  "do not show fake compile error to user"
                ]
              }
            }
          },
          "attach": {
            "required": [
              "program"
            ],
            "properties": {
              "program": {
                "type": "string",
                "description": "Absolute path to a .sd file.",
                "default": "${workspaceFolder}/${command:AskForProgramName}"
              },
              "save": {
                "type": "string",
                "description": "Absolute path to a .sav file.",
                "default": "${workspaceFolder}/${command:AskForSaveName}"
              },
              "stopOnEntry": {
                "type": "boolean",
                "description": "Automatically stop after attach.",
                "default": true
              },
              "trace": {
                "type": "boolean",
                "description": "Enable logging of the Debug Adapter Protocol.",
                "default": true
              },
              "compileError": {
                "type": "string",
                "description": "Simulates a compile error in 'attach' request.",
                "enum": [
                  "default",
                  "show",
                  "hide"
                ],
                "enumDescriptions": [
                  "default: show fake compile error to user",
                  "show fake compile error to user",
                  "do not show fake compile error to user"
                ]
              }
            }
          }
        },
        "initialConfigurations": [
          {
            "type": "game",
            "request": "launch",
            "name": "Launch Game",
            "program": "${workspaceFolder}/${command:AskForProgramName}",
            "save": "${workspaceFolder}/${command:AskForSaveName}",
            "stopOnEntry": false
          }
        ],
        "configurationSnippets": [
          {
            "label": "Sparkdown Debugger: Launch",
            "description": "A new configuration for 'debugging' a user selected sparkdown file.",
            "body": {
              "type": "game",
              "request": "launch",
              "name": "Launch Game",
              "program": "^\"\\${workspaceFolder}/\\${command:AskForProgramName}\"",
              "save": "^\"\\${workspaceFolder}/\\${command:AskForSaveName}\"",
              "stopOnEntry": false
            }
          }
        ],
        "variables": {
          "AskForProgramName": "sparkdown.getProgramName",
          "AskForSaveName": "sparkdown.getSaveName"
        }
      }
    ]
  },
  "scripts": {
    "postinstall:textmate-grammar-tree": "cd ../packages/textmate-grammar-tree && npm ci && cd ../../vscode-sparkdown",
    "postinstall:sparkdown": "cd ../packages/sparkdown && npm ci && cd ../../vscode-sparkdown",
    "postinstall:spark-engine": "cd ../packages/spark-engine && npm ci && cd ../../vscode-sparkdown",
    "postinstall:spark-dom": "cd ../packages/spark-dom && npm ci && cd ../../vscode-sparkdown",
    "postinstall:spark-editor-protocol": "cd ../packages/spark-editor-protocol && npm ci && cd ../../vscode-sparkdown",
    "postinstall:sparkdown-language-server": "cd ../packages/sparkdown-language-server && npm ci && cd ../../vscode-sparkdown",
    "postinstall:sparkdown-screenplay": "cd ../packages/sparkdown-screenplay && npm ci && cd ../../vscode-sparkdown",
    "postinstall:sparkdown-screenplay-pdf": "cd ../packages/sparkdown-screenplay-pdf && npm ci && cd ../../vscode-sparkdown",
    "postinstall:opfs-workspace": "cd ../packages/opfs-workspace && npm ci && cd ../../vscode-sparkdown",
    "postinstall:spark-web-player": "cd ../packages/spark-web-player && npm ci && cd ../../vscode-sparkdown",
    "postinstall:sparkdown-document-views": "cd ../packages/sparkdown-document-views && npm ci && cd ../../vscode-sparkdown",
    "postinstall:screenplay-webview": "cd ./webviews/screenplay-webview && npm ci && cd ../../",
    "postinstall:game-webview": "cd ./webviews/game-webview && npm ci && cd ../../",
    "postinstall:screen-webview": "cd ./webviews/screen-webview && npm ci && cd ../../",
    "postinstall:inspector-webview": "cd ./webviews/inspector-webview && npm ci && cd ../../",
    "postinstall": "npm-run-all -p postinstall:*",
    "build:spark-web-player": "cd ../packages/spark-web-player && npm run build && cd ../../vscode-sparkdown",
    "build:sparkdown-language-server": "cd ../packages/sparkdown-language-server && npm run build && cd ../../vscode-sparkdown",
    "build:screenplay-pdf": "cd ../packages/sparkdown-screenplay-pdf && npm run build && cd ../../vscode-sparkdown",
    "build:screenplay-webview": "cd ./webviews/screenplay-webview && npm run build && cd ../../",
    "build:game-webview": "cd ./webviews/game-webview && npm run build && cd ../../",
    "build:screen-webview": "cd ./webviews/screen-webview && npm run build && cd ../../",
    "build:inspector-webview": "cd ./webviews/inspector-webview && npm run build && cd ../../",
    "build": "npm-run-all -p build:* && node scripts/esbuild.ts",
    "watch:spark-web-player": "cd ../packages/spark-web-player && npm run watch && cd ../../vscode-sparkdown",
    "watch:sparkdown-language-server": "cd ../packages/sparkdown-language-server && npm run watch && cd ../../vscode-sparkdown",
    "watch:screenplay-pdf": "cd ../packages/sparkdown-screenplay-pdf && npm run watch && cd ../../vscode-sparkdown",
    "watch:screenplay-webview": "cd ./webviews/screenplay-webview && npm run watch && cd ../../",
    "watch:game-webview": "cd ./webviews/game-webview && npm run watch && cd ../../",
    "watch:screen-webview": "cd ./webviews/screen-webview && npm run watch && cd ../../",
    "watch:inspector-webview": "cd ./webviews/inspector-webview && npm run watch && cd ../../",
    "watch:self": "node scripts/esbuild.ts --watch",
    "watch": "npm-run-all -p watch:*",
    "package:spark-web-player": "cd ../packages/spark-web-player && npm run package && cd ../../vscode-sparkdown",
    "package:sparkdown-language-server": "cd ../packages/sparkdown-language-server && npm run package && cd ../../vscode-sparkdown",
    "package:screenplay-pdf": "cd ../packages/sparkdown-screenplay-pdf && npm run package && cd ../../vscode-sparkdown",
    "package:screenplay-webview": "cd ./webviews/screenplay-webview && npm run package && cd ../../",
    "package:game-webview": "cd ./webviews/game-webview && npm run package && cd ../../",
    "package:screen-webview": "cd ./webviews/screen-webview && npm run package && cd ../../",
    "package:inspector-webview": "cd ./webviews/inspector-webview && npm run package && cd ../../",
    "package:self": "node scripts/esbuild.ts --production",
    "package": "npm-run-all -p package:* && node scripts/esbuild.js --production --devtool hidden-source-map",
    "pretest": "npm run build",
    "browser": "npm run build && vscode-test-web --browserType=chromium --extensionDevelopmentPath=. .",
    "vscode:prepublish": "npm run package",
    "publish-minor": "vsce publish minor",
    "publish-major": "vsce publish major"
  },
  "dependencies": {
    "@impower/spark-editor-protocol": "file:../packages/spark-editor-protocol",
    "@impower/spark-engine": "file:../packages/spark-engine",
    "@impower/sparkdown": "file:../packages/sparkdown",
    "@impower/sparkdown-language-server": "file:../packages/sparkdown-language-server",
    "@impower/sparkdown-screenplay": "file:../packages/sparkdown-screenplay",
    "@impower/sparkdown-screenplay-pdf": "file:../packages/sparkdown-screenplay-pdf",
    "@vscode/codicons": "^0.0.36",
    "@vscode/debugadapter": "^1.68.0",
    "@vscode/debugprotocol": "^1.68.0",
    "await-notify": "^1.0.1",
    "buffer": "^6.0.3",
    "csv-stringify": "^6.5.2",
    "events": "^3.3.0",
    "iconv-lite": "^0.6.3",
    "os-browserify": "^0.3.0",
    "process": "^0.11.10",
    "stream-browserify": "^3.0.0",
    "url-browserify": "^1.3.0",
    "vscode-languageclient": "^9.0.1",
    "yaml": "^2.7.1"
  },
  "devDependencies": {
    "@esbuild-plugins/node-globals-polyfill": "^0.2.3",
    "@types/node": "^22.13.7",
    "@types/path-browserify": "^1.0.3",
    "@types/vscode": "^1.97.0",
    "@vscode/test-web": "^0.0.67",
    "brfs": "^2.0.2",
    "esbuild": "^0.25.0",
    "esbuild-plugin-copy-watch": "^2.3.1",
    "glob": "^11.0.1",
    "mocha": "^11.1.0",
    "npm-run-all": "^4.1.5",
    "path-browserify": "^1.0.1",
    "transform-loader": "^0.2.4",
    "typescript": "^5.8.3"
  },
  "peerDependencies": {
    "@codemirror/state": "^6.5.2",
    "@lezer/common": "^1.2.3"
  },
  "files": [
    "out",
    "package.json",
    "icon-activitybar.png",
    "icon-lang.png",
    "icon.png",
    "README.md"
  ]
}
