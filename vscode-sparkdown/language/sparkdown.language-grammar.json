{
  "fileTypes": [
    "sparkdown",
    "sd",
    "script",
    "project"
  ],
  "keyEquivalent": "^~S",
  "indentUnit": "  ",
  "name": "Sparkdown",
  "scopeName": "text.source.sparkdown",
  "uuid": "E26C862D-2A5E-4F10-B0C3-D6BCB838CB7F",
  "flags": "mu",
  "variables": {
    "IDENTIFIER_START_CHAR": "_\\p{L}",
    "IDENTIFIER_END_CHAR": "0-9_\\p{L}",
    "IDENTIFIER": "[{{IDENTIFIER_START_CHAR}}][{{IDENTIFIER_END_CHAR}}]*",
    "BEFORE_KEYWORD": "(?<![{{IDENTIFIER_END_CHAR}}])(?:(?<=\\.\\.\\.)|(?<!\\.))",
    "AFTER_KEYWORD": "(?![{{IDENTIFIER_END_CHAR}}])(?:(?=\\.\\.\\.)|(?!\\.))",
    "TAG_START": "(?:[#]+(?:$|{{WS}}+))",
    "WS": "[^\\S\\n\\r]",
    "EOL": "(?:$|{{WS}}*$|{{WS}}*{{TAG_START}}.*$|{{WS}}*[/][/].*$)",
    "EOK": "(?:$|{{WS}}+|(?={{TAG_START}}|[/][/]|[/][*]))"
  },
  "patterns": [
    {
      "include": "#Newline"
    },
    {
      "include": "#Annotation"
    },
    {
      "include": "#Dialogue"
    },
    {
      "include": "#FrontMatter"
    },
    {
      "include": "#Todo"
    },
    {
      "include": "#Include"
    },
    {
      "include": "#Declaration"
    },
    {
      "include": "#Knot"
    },
    {
      "include": "#Stitch"
    },
    {
      "include": "#Divert"
    },
    {
      "include": "#Logic"
    },
    {
      "include": "#Choice"
    },
    {
      "include": "#Gather"
    },
    {
      "include": "#Transition"
    },
    {
      "include": "#Scene"
    },
    {
      "include": "#AssetLine"
    },
    {
      "include": "#Action"
    }
  ],
  "repository": {
    "FileSeparator": {
      "match": "^([/]{4,})([^\\S\\n\\r]*)([^/\\s]+)([^\\S\\n\\r]*)([/]{4,})([^\\S\\n\\r]*)$"
    },
    "FileSplitter": {
      "match": "^((?:[/]{4,})(?:[^\\S\\n\\r]*)(?:[^/\\s]+)(?:[^\\S\\n\\r]*)(?:[/]{4,})(?:[^\\S\\n\\r]*))$"
    },
    "Annotation": {
      "patterns": [
        {
          "include": "#Comment"
        },
        {
          "include": "#Tag"
        }
      ]
    },
    "Comment": {
      "patterns": [
        {
          "include": "#LineComment"
        },
        {
          "include": "#BlockComment"
        }
      ]
    },
    "LineComment": {
      "tag": "lineComment",
      "name": "comment.line.sd",
      "match": "([^\\S\\n\\r]*)([/][/])(.*?)$(\\r\\n|\\r|\\n)?",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        },
        "2": {
          "name": "punctuation.definition.comment.mark"
        },
        "3": {
          "patterns": [
            {
              "include": "#LineCommentContent"
            }
          ]
        },
        "4": {
          "patterns": [
            {
              "include": "#Newline"
            }
          ]
        }
      }
    },
    "LineCommentContent": {
      "tag": "definition(lineComment)",
      "name": "punctuation.definition.comment.content.sd",
      "match": "(.+$)"
    },
    "BlockComment": {
      "tag": "blockComment",
      "name": "comment.block.sd",
      "begin": "([^\\S\\n\\r]*)([/][*])",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        },
        "2": {
          "name": "punctuation.definition.comment.mark"
        }
      },
      "patterns": [
        {
          "include": "#BlockCommentContent"
        }
      ],
      "end": "([*][/])",
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.comment.mark"
        }
      }
    },
    "BlockCommentContent": {
      "tag": "definition(lineComment)",
      "name": "punctuation.definition.comment.content.sd",
      "match": "(.+?)(?=[*][/])"
    },
    "Tag": {
      "tag": "docComment",
      "name": "comment.line.sd entity.tag.sd",
      "match": "([^\\S\\n\\r]*)((?:[#]+(?:$|[^\\S\\n\\r]+)))(.*?)(?:(?=(?:[#]+(?:$|[^\\S\\n\\r]+)))|$(\\r\\n|\\r|\\n)?)",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        },
        "2": {
          "tag": "definition(docComment)",
          "name": "punctuation.definition.comment.sd comment.line.sd entity.tag.begin.sd"
        },
        "3": {
          "patterns": [
            {
              "include": "#TagContent"
            }
          ]
        },
        "4": {
          "patterns": [
            {
              "include": "#Newline"
            }
          ]
        }
      }
    },
    "TagContent": {
      "tag": "definition(docComment)",
      "name": "punctuation.definition.comment.content.sd",
      "match": "(.+?)(?=$|(?:[#]+(?:$|[^\\S\\n\\r]+)))"
    },
    "Todo": {
      "tag": "docComment",
      "name": "comment.line.sd entity.todo.sd",
      "begin": "([^\\S\\n\\r]*)(TODO|todo)((?:$|[^\\S\\n\\r]+|(?=(?:[#]+(?:$|[^\\S\\n\\r]+))|[/][/]|[/][*])))",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        },
        "2": {
          "tag": "definition(docComment)",
          "name": "constant.other entity.todo.begin.sd"
        },
        "3": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        }
      },
      "patterns": [
        {
          "include": "#Annotation"
        },
        {
          "include": "#TodoContent"
        }
      ],
      "end": "(?=$)"
    },
    "TodoContent": {
      "tag": "definition(docComment)",
      "name": "punctuation.definition.comment.content.sd",
      "match": "(.+$)"
    },
    "Include": {
      "tag": "meta",
      "name": "meta.import.include.sd",
      "begin": "^([^\\S\\n\\r]*)(INCLUDE)((?:$|[^\\S\\n\\r]+|(?=(?:[#]+(?:$|[^\\S\\n\\r]+))|[/][/]|[/][*])))",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#Indent"
            }
          ]
        },
        "2": {
          "tag": "controlKeyword",
          "name": "keyword.control.import.include.sd"
        },
        "3": {
          "patterns": [
            {
              "include": "#EndOfKeyword"
            }
          ]
        }
      },
      "patterns": [
        {
          "include": "#Annotation"
        },
        {
          "include": "#IncludeContent"
        }
      ],
      "end": "(?=$)"
    },
    "IncludeContent": {
      "tag": "string",
      "name": "string.include.sd",
      "match": "(.+?)(?=(?:$|[^\\S\\n\\r]*$|[^\\S\\n\\r]*(?:[#]+(?:$|[^\\S\\n\\r]+)).*$|[^\\S\\n\\r]*[/][/].*$))"
    },
    "Declaration": {
      "patterns": [
        {
          "include": "#VarDeclaration"
        },
        {
          "include": "#ListDeclaration"
        },
        {
          "include": "#ConstDeclaration"
        },
        {
          "include": "#ExternalDeclaration"
        },
        {
          "include": "#DefineDeclaration"
        }
      ]
    },
    "VarDeclaration": {
      "tag": "meta",
      "name": "storage.type.var.sd",
      "begin": "^([^\\S\\n\\r]*)(VAR)((?:$|[^\\S\\n\\r]+|(?=(?:[#]+(?:$|[^\\S\\n\\r]+))|[/][/]|[/][*])))",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#Indent"
            }
          ]
        },
        "2": {
          "tag": "controlKeyword",
          "name": "keyword.control.definition.var.sd"
        },
        "3": {
          "patterns": [
            {
              "include": "#EndOfKeyword"
            }
          ]
        }
      },
      "patterns": [
        {
          "include": "#Annotation"
        },
        {
          "include": "#VariableAssignment"
        }
      ],
      "end": "(?=$)"
    },
    "ListDeclaration": {
      "tag": "meta",
      "name": "storage.type.list.sd",
      "begin": "^([^\\S\\n\\r]*)(LIST)((?:$|[^\\S\\n\\r]+|(?=(?:[#]+(?:$|[^\\S\\n\\r]+))|[/][/]|[/][*])))",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#Indent"
            }
          ]
        },
        "2": {
          "tag": "controlKeyword",
          "name": "keyword.control.definition.list.sd"
        },
        "3": {
          "patterns": [
            {
              "include": "#EndOfKeyword"
            }
          ]
        }
      },
      "patterns": [
        {
          "include": "#Annotation"
        },
        {
          "include": "#TypeAssignment"
        }
      ],
      "end": "(?=$)"
    },
    "ConstDeclaration": {
      "tag": "meta",
      "name": "storage.type.const.sd",
      "begin": "^([^\\S\\n\\r]*)(CONST)((?:$|[^\\S\\n\\r]+|(?=(?:[#]+(?:$|[^\\S\\n\\r]+))|[/][/]|[/][*])))",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#Indent"
            }
          ]
        },
        "2": {
          "tag": "controlKeyword",
          "name": "keyword.control.definition.const.sd"
        },
        "3": {
          "patterns": [
            {
              "include": "#EndOfKeyword"
            }
          ]
        }
      },
      "patterns": [
        {
          "include": "#Annotation"
        },
        {
          "include": "#VariableAssignment"
        }
      ],
      "end": "(?=$)"
    },
    "ExternalDeclaration": {
      "tag": "meta",
      "name": "storage.type.external.sd",
      "begin": "^([^\\S\\n\\r]*)(EXTERNAL)((?:$|[^\\S\\n\\r]+|(?=(?:[#]+(?:$|[^\\S\\n\\r]+))|[/][/]|[/][*])))",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#Indent"
            }
          ]
        },
        "2": {
          "tag": "controlKeyword",
          "name": "keyword.control.definition.external.sd"
        },
        "3": {
          "patterns": [
            {
              "include": "#EndOfKeyword"
            }
          ]
        }
      },
      "patterns": [
        {
          "include": "#Annotation"
        },
        {
          "include": "#ExternalFunctionDeclaration"
        }
      ],
      "end": "(?=$)"
    },
    "DefineDeclaration": {
      "tag": "meta",
      "name": "meta.definition.type.sd",
      "begin": "^([^\\S\\n\\r]*)(DEFINE)($|[^\\S\\n\\r]+)([^:]*?)($|[^\\S\\n\\r]*)($|[:])($|[^\\S\\n\\r]*$)(\\r\\n|\\r|\\n)?",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#Indent"
            }
          ]
        },
        "2": {
          "tag": "controlKeyword",
          "name": "keyword.control.definition.object.sd"
        },
        "3": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        },
        "4": {
          "patterns": [
            {
              "include": "#TypeName"
            },
            {
              "include": "#VariableAccessor"
            }
          ]
        },
        "5": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        },
        "6": {
          "patterns": [
            {
              "include": "#DeclarationAssignOperator"
            }
          ]
        },
        "7": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        },
        "8": {
          "patterns": [
            {
              "include": "#Newline"
            }
          ]
        }
      },
      "patterns": [
        {
          "include": "#Annotation"
        },
        {
          "include": "#StructField"
        },
        {
          "include": "#Unknown"
        }
      ],
      "end": "^(?=(?!\\1[^\\S\\n\\r]{2,}))"
    },
    "TypeAssignment": {
      "begin": "([_\\p{L}][0-9_\\p{L}]*)([^\\S\\n\\r]*)($|[=]|(?=(?:$|[^\\S\\n\\r]*$|[^\\S\\n\\r]*(?:[#]+(?:$|[^\\S\\n\\r]+)).*$|[^\\S\\n\\r]*[/][/].*$)))",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#TypeName"
            }
          ]
        },
        "2": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        },
        "3": {
          "patterns": [
            {
              "include": "#AssignEqualOperator"
            }
          ]
        }
      },
      "patterns": [
        {
          "include": "#Annotation"
        },
        {
          "include": "#Expression"
        }
      ],
      "end": "(?=$)"
    },
    "VariableAssignment": {
      "begin": "([_\\p{L}][0-9_\\p{L}]*)([^\\S\\n\\r]*)($|[=]|(?=(?:$|[^\\S\\n\\r]*$|[^\\S\\n\\r]*(?:[#]+(?:$|[^\\S\\n\\r]+)).*$|[^\\S\\n\\r]*[/][/].*$)))",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#VariableName"
            }
          ]
        },
        "2": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        },
        "3": {
          "patterns": [
            {
              "include": "#AssignEqualOperator"
            }
          ]
        }
      },
      "patterns": [
        {
          "include": "#Annotation"
        },
        {
          "include": "#Expression"
        }
      ],
      "end": "(?=$)"
    },
    "ExternalFunctionDeclaration": {
      "begin": "([_\\p{L}][0-9_\\p{L}]*)([^\\S\\n\\r]*)",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#FunctionName"
            }
          ]
        },
        "2": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        }
      },
      "patterns": [
        {
          "include": "#Annotation"
        },
        {
          "include": "#FunctionParameters"
        }
      ],
      "end": "(?=$)"
    },
    "RefModifier": {
      "tag": "modifier",
      "name": "storage.modifier.ref.sd",
      "match": "(ref)"
    },
    "FunctionParameters": {
      "brackets": true,
      "begin": "([(])",
      "beginCaptures": {
        "1": {
          "tag": "paren",
          "name": "meta.brace.round.open.sd"
        }
      },
      "patterns": [
        {
          "include": "#Annotation"
        },
        {
          "include": "#Parameter"
        }
      ],
      "end": "([)])",
      "endCaptures": {
        "1": {
          "tag": "paren",
          "name": "meta.brace.round.close.sd"
        }
      }
    },
    "Parameter": {
      "tag": "meta",
      "name": "meta.parameter.sd",
      "begin": "(?=.+$)",
      "patterns": [
        {
          "include": "#Annotation"
        },
        {
          "include": "#Expression"
        }
      ],
      "end": "(?=[)])|([,])",
      "endCaptures": {
        "1": {
          "tag": "separator",
          "name": "meta.template.expression.comma.sd"
        }
      }
    },
    "StructField": {
      "emit": true,
      "patterns": [
        {
          "include": "#StructBlankProperty"
        },
        {
          "include": "#StructMapItem"
        },
        {
          "include": "#StructScalarItem"
        },
        {
          "include": "#StructMapProperty"
        },
        {
          "include": "#StructScalarProperty"
        },
        {
          "include": "#Newline"
        }
      ]
    },
    "StructBlankProperty": {
      "match": "^([^\\S\\n\\r]+$)(\\r\\n|\\r|\\n)?",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#Indent"
            }
          ]
        },
        "2": {
          "patterns": [
            {
              "include": "#Newline"
            }
          ]
        }
      }
    },
    "StructMapItem": {
      "tag": "meta",
      "name": "meta.definition.struct.item.map.sd",
      "begin": "^([^\\S\\n\\r]*)([-])($|[^\\S\\n\\r]+$)",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#Indent"
            }
          ]
        },
        "2": {
          "tag": "keyword",
          "name": "keyword.operator.expression.array.sd"
        },
        "3": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        }
      },
      "patterns": [
        {
          "include": "#Annotation"
        },
        {
          "include": "#StructMapItem"
        },
        {
          "include": "#StructScalarItem"
        },
        {
          "include": "#StructMapProperty"
        },
        {
          "include": "#StructScalarProperty"
        },
        {
          "include": "#Newline"
        },
        {
          "include": "#Unknown"
        }
      ],
      "end": "(?=^(?!\\1(?:[^\\S\\n\\r]{2,})))"
    },
    "StructScalarItem": {
      "tag": "meta",
      "name": "meta.definition.struct.item.scalar.sd",
      "begin": "^([^\\S\\n\\r]*)([-])($|[^\\S\\n\\r]+)(?=.*\\S.*$)",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#Indent"
            }
          ]
        },
        "2": {
          "tag": "keyword",
          "name": "keyword.operator.expression.array.sd"
        },
        "3": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        }
      },
      "patterns": [
        {
          "include": "#Annotation"
        },
        {
          "include": "#ValueText"
        }
      ],
      "end": "(?=$)"
    },
    "StructMapProperty": {
      "tag": "meta",
      "name": "meta.definition.struct.property.map.sd",
      "begin": "^([^\\S\\n\\r]*)([_\\p{L}][0-9_\\p{L}]*|[0-9])($|[^\\S\\n\\r]*)($|[:])($|[^\\S\\n\\r]*$)",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#Indent"
            }
          ]
        },
        "2": {
          "patterns": [
            {
              "include": "#DeclarationProperty"
            }
          ]
        },
        "3": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        },
        "4": {
          "tag": "punctuation",
          "name": "punctuation.separator.colon.sd"
        },
        "5": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        }
      },
      "patterns": [
        {
          "include": "#Annotation"
        },
        {
          "include": "#StructMapItem"
        },
        {
          "include": "#StructScalarItem"
        },
        {
          "include": "#StructMapProperty"
        },
        {
          "include": "#StructScalarProperty"
        },
        {
          "include": "#Newline"
        },
        {
          "include": "#StructBlankProperty"
        },
        {
          "include": "#Unknown"
        }
      ],
      "end": "(?=^(?!\\1(?:[^\\S\\n\\r]{2,})))"
    },
    "StructScalarProperty": {
      "tag": "meta",
      "name": "meta.definition.struct.property.scalar.sd",
      "begin": "^([^\\S\\n\\r]*)([_\\p{L}][0-9_\\p{L}]*)($|[^\\S\\n\\r]*)(?:($|[=])($|[^\\S\\n\\r]*)|($|[:])($|[^\\S\\n\\r]*)(?=.*\\S.*$))",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#Indent"
            }
          ]
        },
        "2": {
          "patterns": [
            {
              "include": "#DeclarationProperty"
            }
          ]
        },
        "3": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        },
        "4": {
          "tag": "updateOperator",
          "name": "keyword.operator.assignment.sd"
        },
        "5": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        },
        "6": {
          "tag": "updateOperator",
          "name": "keyword.operator.assignment.sd"
        },
        "7": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        }
      },
      "patterns": [
        {
          "include": "#Annotation"
        },
        {
          "include": "#ValueText"
        }
      ],
      "end": "(?=$)"
    },
    "FunctionCall": {
      "begin": "([_\\p{L}][0-9_\\p{L}]*)(?=[(])",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#FunctionName"
            }
          ]
        }
      },
      "patterns": [
        {
          "include": "#Annotation"
        },
        {
          "include": "#FunctionParameters"
        }
      ],
      "end": "([;])|(?=$|[^(])",
      "endCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#PunctuationSemicolon"
            }
          ]
        }
      }
    },
    "FunctionAccessor": {
      "begin": "([.]|[?][.])?([_\\p{L}][0-9_\\p{L}]*)(?=[(])",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#PunctuationAccessor"
            }
          ]
        },
        "2": {
          "patterns": [
            {
              "include": "#FunctionName"
            }
          ]
        }
      },
      "patterns": [
        {
          "include": "#Annotation"
        },
        {
          "include": "#FunctionParameters"
        }
      ],
      "end": "([;])|(?=$|[^(])",
      "endCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#PunctuationSemicolon"
            }
          ]
        }
      }
    },
    "ValueText": {
      "emit": true,
      "patterns": [
        {
          "include": "#Expression"
        }
      ]
    },
    "TargetAccessPath": {
      "emit": true,
      "patterns": [
        {
          "include": "#AccessPath"
        },
        {
          "include": "#IllegalExpression"
        }
      ]
    },
    "AccessPath": {
      "begin": "(?=[_\\p{L}])",
      "patterns": [
        {
          "include": "#Annotation"
        },
        {
          "include": "#AccessPart"
        }
      ],
      "end": "(?=$|[^_\\p{L}?!.\\[])"
    },
    "AccessPart": {
      "emit": true,
      "patterns": [
        {
          "include": "#ArrayLiteral"
        },
        {
          "include": "#FunctionAccessor"
        },
        {
          "include": "#PropertyAccessor"
        },
        {
          "include": "#NamespaceAccessor"
        },
        {
          "include": "#VariableName"
        },
        {
          "include": "#PunctuationAccessor"
        }
      ]
    },
    "DeclarationType": {
      "emit": true,
      "patterns": [
        {
          "include": "#TypeName"
        },
        {
          "include": "#Unknown"
        }
      ]
    },
    "DeclarationName": {
      "emit": true,
      "patterns": [
        {
          "include": "#VariableName"
        },
        {
          "include": "#Unknown"
        }
      ]
    },
    "DeclarationProperty": {
      "emit": true,
      "patterns": [
        {
          "include": "#PropertyName"
        },
        {
          "include": "#Unknown"
        }
      ]
    },
    "DeclarationAssignOperator": {
      "emit": true,
      "patterns": [
        {
          "include": "#ArrowOperator"
        },
        {
          "include": "#AssignEqualOperator"
        }
      ]
    },
    "Label": {
      "tag": "definition(heading)",
      "name": "keyword.control.section.sd",
      "match": "([(])([^\\S\\n\\r]*)([_\\p{L}][0-9_\\p{L}]*)([^\\S\\n\\r]*)([)])",
      "captures": {
        "1": {
          "tag": "paren",
          "name": "meta.brace.round.open.sd"
        },
        "2": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        },
        "3": {
          "patterns": [
            {
              "include": "#Identifier"
            }
          ]
        },
        "4": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        },
        "5": {
          "tag": "paren",
          "name": "meta.brace.round.close.sd"
        }
      }
    },
    "Chain": {
      "tag": "special(meta)",
      "name": "meta.chain.sd",
      "match": "([\\\\])($|[^\\S\\n\\r]+)",
      "captures": {
        "1": {
          "tag": "keyword",
          "name": "keyword.other.chain.sd"
        },
        "2": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        }
      }
    },
    "Glue": {
      "tag": "meta",
      "name": "meta.glue.sd",
      "match": "([^\\S\\n\\r]*)([<][>])",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        },
        "2": {
          "tag": "keyword",
          "name": "keyword.other.glue.sd"
        }
      }
    },
    "Choice": {
      "name": "entity.choice.sd",
      "begin": "([^\\S\\n\\r]*)((?:[*](?:$|[^\\S\\n\\r]+|(?=(?:[#]+(?:$|[^\\S\\n\\r]+))|[/][/]|[/][*])))+|(?:[+](?:$|[^\\S\\n\\r]+|(?=(?:[#]+(?:$|[^\\S\\n\\r]+))|[/][/]|[/][*])))+)",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#Indent"
            }
          ]
        },
        "2": {
          "tag": "keyword",
          "name": "keyword.operator.expression.list.sd"
        }
      },
      "patterns": [
        {
          "include": "#Annotation"
        },
        {
          "include": "#Label"
        },
        {
          "include": "#ConditionalBlock"
        },
        {
          "include": "#Divert"
        },
        {
          "include": "#ChoiceText"
        }
      ],
      "end": "((?:$|[^\\S\\n\\r]*$|[^\\S\\n\\r]*(?:[#]+(?:$|[^\\S\\n\\r]+)).*$|[^\\S\\n\\r]*[/][/].*$))(\\r\\n|\\r|\\n)?",
      "endCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#EndOfLine"
            }
          ]
        },
        "2": {
          "patterns": [
            {
              "include": "#Newline"
            }
          ]
        }
      }
    },
    "ChoiceText": {
      "tag": "string",
      "name": "string.choice.sd",
      "match": "(.+?)(?=$|[-][>]|[<][>]|(?:[#]+(?:$|[^\\S\\n\\r]+)))",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#Annotation"
            },
            {
              "include": "#SuppressedText"
            },
            {
              "include": "#UnsuppressedText"
            }
          ]
        }
      }
    },
    "UnsuppressedText": {
      "match": "(.+?)(?=\\[.*?\\]|(?:$|[^\\S\\n\\r]*$|[^\\S\\n\\r]*(?:[#]+(?:$|[^\\S\\n\\r]+)).*$|[^\\S\\n\\r]*[/][/].*$))",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#Annotation"
            },
            {
              "include": "#DisplayLine"
            }
          ]
        }
      }
    },
    "SuppressedText": {
      "match": "(\\[)(.*?)(\\])",
      "captures": {
        "1": {
          "tag": "keyword",
          "name": "punctuation.definition.template-expression.begin.choice.suppression.sd"
        },
        "2": {
          "patterns": [
            {
              "include": "#Annotation"
            },
            {
              "include": "#DisplayLine"
            }
          ]
        },
        "3": {
          "tag": "keyword",
          "name": "punctuation.definition.template-expression.end.choice.suppression.sd"
        }
      }
    },
    "Logic": {
      "tag": "meta",
      "name": "meta.logic.sd",
      "begin": "([^\\S\\n\\r]*)(~)((?:$|[^\\S\\n\\r]+|(?=(?:[#]+(?:$|[^\\S\\n\\r]+))|[/][/]|[/][*])))",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#Indent"
            }
          ]
        },
        "2": {
          "tag": "keyword",
          "name": "keyword.other.logic.sd"
        },
        "3": {
          "patterns": [
            {
              "include": "#EndOfKeyword"
            }
          ]
        }
      },
      "patterns": [
        {
          "include": "#Annotation"
        },
        {
          "include": "#Whitespace"
        },
        {
          "include": "#ReturnStatement"
        },
        {
          "include": "#TempDeclaration"
        },
        {
          "include": "#Expression"
        }
      ],
      "end": "((?:$|[^\\S\\n\\r]*$|[^\\S\\n\\r]*(?:[#]+(?:$|[^\\S\\n\\r]+)).*$|[^\\S\\n\\r]*[/][/].*$))(\\r\\n|\\r|\\n)?",
      "endCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#EndOfLine"
            }
          ]
        },
        "2": {
          "patterns": [
            {
              "include": "#Newline"
            }
          ]
        }
      }
    },
    "ReturnStatement": {
      "begin": "([^\\S\\n\\r]*)(return)((?:$|[^\\S\\n\\r]+|(?=(?:[#]+(?:$|[^\\S\\n\\r]+))|[/][/]|[/][*])))",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        },
        "2": {
          "tag": "controlKeyword",
          "name": "keyword.control.flow.return.sd"
        },
        "3": {
          "patterns": [
            {
              "include": "#EndOfKeyword"
            }
          ]
        }
      },
      "patterns": [
        {
          "include": "#Annotation"
        },
        {
          "include": "#Expression"
        }
      ],
      "end": "(?=$)"
    },
    "TempDeclaration": {
      "begin": "([^\\S\\n\\r]*)(temp)((?:$|[^\\S\\n\\r]+|(?=(?:[#]+(?:$|[^\\S\\n\\r]+))|[/][/]|[/][*])))",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        },
        "2": {
          "tag": "controlKeyword",
          "name": "keyword.control.definition.temp.sd"
        },
        "3": {
          "patterns": [
            {
              "include": "#EndOfKeyword"
            }
          ]
        }
      },
      "patterns": [
        {
          "include": "#Annotation"
        },
        {
          "include": "#Expression"
        }
      ],
      "end": "(?=$)"
    },
    "Gather": {
      "begin": "^([^\\S\\n\\r]*)((?:[-](?:$|[^\\S\\n\\r]+|(?=(?:[#]+(?:$|[^\\S\\n\\r]+))|[/][/]|[/][*])))+)",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#Indent"
            }
          ]
        },
        "2": {
          "tag": "keyword",
          "name": "keyword.other.gather.sd"
        },
        "3": {
          "patterns": [
            {
              "include": "#EndOfKeyword"
            }
          ]
        }
      },
      "patterns": [
        {
          "include": "#Annotation"
        },
        {
          "include": "#Choice"
        },
        {
          "include": "#Label"
        },
        {
          "include": "#Divert"
        },
        {
          "include": "#Todo"
        },
        {
          "include": "#Logic"
        },
        {
          "include": "#Tag"
        },
        {
          "include": "#Action"
        }
      ],
      "end": "((?:$|[^\\S\\n\\r]*$|[^\\S\\n\\r]*(?:[#]+(?:$|[^\\S\\n\\r]+)).*$|[^\\S\\n\\r]*[/][/].*$))(\\r\\n|\\r|\\n)?",
      "endCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#EndOfLine"
            }
          ]
        },
        "2": {
          "patterns": [
            {
              "include": "#Newline"
            }
          ]
        }
      }
    },
    "Knot": {
      "begin": "^([^\\S\\n\\r]*)([=]{2,})((?:$|[^\\S\\n\\r]+|(?=(?:[#]+(?:$|[^\\S\\n\\r]+))|[/][/]|[/][*])))",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#Indent"
            }
          ]
        },
        "2": {
          "tag": "definition(heading)",
          "name": "keyword.control.knot.sd"
        },
        "3": {
          "patterns": [
            {
              "include": "#EndOfKeyword"
            }
          ]
        }
      },
      "patterns": [
        {
          "include": "#Annotation"
        },
        {
          "include": "#FunctionDeclaration"
        },
        {
          "include": "#KnotDeclarationName"
        }
      ],
      "end": "([=]{2,})|(?=$)",
      "endCaptures": {
        "1": {
          "tag": "definition(heading)",
          "name": "keyword.control.knot.sd"
        }
      }
    },
    "Stitch": {
      "begin": "^([^\\S\\n\\r]*)([=])((?:$|[^\\S\\n\\r]+|(?=(?:[#]+(?:$|[^\\S\\n\\r]+))|[/][/]|[/][*])))",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#Indent"
            }
          ]
        },
        "2": {
          "tag": "definition(heading)",
          "name": "keyword.control.stitch.sd"
        },
        "3": {
          "patterns": [
            {
              "include": "#EndOfKeyword"
            }
          ]
        }
      },
      "patterns": [
        {
          "include": "#Annotation"
        },
        {
          "include": "#StitchDeclarationName"
        }
      ],
      "end": "([=]+)|(?=$)",
      "endCaptures": {
        "1": {
          "tag": "definition(heading)",
          "name": "keyword.control.stitch.sd"
        }
      }
    },
    "KnotDeclarationName": {
      "begin": "([^\\S\\n\\r]*)([_\\p{L}][0-9_\\p{L}]*)([^\\S\\n\\r]*)",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        },
        "2": {
          "tag": "definition(heading)",
          "name": "keyword.control.section.sd"
        },
        "3": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        }
      },
      "patterns": [
        {
          "include": "#Annotation"
        },
        {
          "include": "#FunctionParameters"
        }
      ],
      "end": "(?=$|[=]|[/][/])"
    },
    "StitchDeclarationName": {
      "begin": "([^\\S\\n\\r]*)([_\\p{L}][0-9_\\p{L}]*)([^\\S\\n\\r]*)",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        },
        "2": {
          "tag": "definition(heading)",
          "name": "keyword.control.section.sd"
        },
        "3": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        }
      },
      "patterns": [
        {
          "include": "#Annotation"
        },
        {
          "include": "#FunctionParameters"
        }
      ],
      "end": "(?=$|[=]|[/][/])"
    },
    "FunctionDeclaration": {
      "begin": "([^\\S\\n\\r]*)(function)([^\\S\\n\\r]*)([_\\p{L}][0-9_\\p{L}]*)([^\\S\\n\\r]*)",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        },
        "2": {
          "tag": "controlKeyword",
          "name": "keyword.control.definition.function.sd"
        },
        "3": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        },
        "4": {
          "patterns": [
            {
              "include": "#FunctionDeclarationName"
            }
          ]
        },
        "5": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        }
      },
      "patterns": [
        {
          "include": "#Annotation"
        },
        {
          "include": "#FunctionParameters"
        }
      ],
      "end": "(?=$|[=])"
    },
    "FunctionDeclarationName": {
      "tag": "function(variableName)",
      "name": "entity.name.function.sd",
      "match": "(.+)"
    },
    "Divert": {
      "begin": "([^\\S\\n\\r]*)(->|<-)",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        },
        "2": {
          "patterns": [
            {
              "include": "#DivertArrow"
            }
          ]
        }
      },
      "patterns": [
        {
          "include": "#Annotation"
        },
        {
          "include": "#Whitespace"
        },
        {
          "include": "#End"
        },
        {
          "include": "#Done"
        },
        {
          "include": "#FunctionCall"
        },
        {
          "include": "#DivertPath"
        },
        {
          "include": "#TunnelArrow"
        }
      ],
      "end": "(?=$|[}]|[)]|[|]|[-]|(?:[#]+(?:$|[^\\S\\n\\r]+)))"
    },
    "DivertArrow": {
      "tag": "function(variableName)",
      "name": "entity.name.function.divert.sd",
      "match": "(->|<-)"
    },
    "End": {
      "tag": "keyword",
      "name": "constant.language.end.sd",
      "match": "\\b(END)\\b"
    },
    "Done": {
      "tag": "keyword",
      "name": "constant.language.done.sd",
      "match": "\\b(DONE)\\b"
    },
    "DivertPath": {
      "tag": "heading",
      "name": "keyword.control.divert.path.sd",
      "match": "([.0-9_\\p{L}]+)"
    },
    "TunnelArrow": {
      "tag": "function(variableName)",
      "name": "entity.name.function.divert.sd",
      "match": "(->(?:->)?|<-)"
    },
    "ConditionalBlock": {
      "brackets": true,
      "begin": "([{])",
      "beginCaptures": {
        "1": {
          "tag": "keyword",
          "name": "punctuation.definition.template-expression.begin.sd"
        }
      },
      "patterns": [
        {
          "include": "#Annotation"
        },
        {
          "include": "#CloseBraceAhead"
        },
        {
          "include": "#MultilineAlternative"
        },
        {
          "include": "#MultilineBlock"
        },
        {
          "include": "#ConditionalSubstitution"
        },
        {
          "include": "#Divert"
        },
        {
          "include": "#Substitution"
        },
        {
          "include": "#FirstAlternativeItem"
        },
        {
          "include": "#AlternativeItem"
        },
        {
          "include": "#ConditionalBlock"
        },
        {
          "include": "#ConditionalText"
        }
      ],
      "end": "([}])",
      "endCaptures": {
        "1": {
          "tag": "keyword",
          "name": "punctuation.definition.template-expression.end.sd"
        }
      }
    },
    "Substitution": {
      "name": "keyword.control.sd",
      "match": "(?<=[{])([^{}:|]+)(?=[}])",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#Expression"
            }
          ]
        }
      }
    },
    "FirstAlternativeItem": {
      "begin": "(?<=[{])([^\\S\\n\\r]*)([&!~])",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        },
        "2": {
          "tag": "controlKeyword",
          "name": "keyword.control.alternative.type.sd"
        }
      },
      "patterns": [
        {
          "include": "#Annotation"
        },
        {
          "include": "#PipeAhead"
        },
        {
          "include": "#Literal"
        },
        {
          "include": "#Divert"
        },
        {
          "include": "#Tag"
        },
        {
          "include": "#ConditionalSubstitution"
        },
        {
          "include": "#ConditionalBlock"
        },
        {
          "include": "#ConditionalText"
        }
      ],
      "end": "(?=[|])"
    },
    "AlternativeItem": {
      "begin": "([|])",
      "beginCaptures": {
        "1": {
          "tag": "keyword",
          "name": "keyword.other.sd"
        }
      },
      "patterns": [
        {
          "include": "#Annotation"
        },
        {
          "include": "#CloseBraceAhead"
        },
        {
          "include": "#PipeAhead"
        },
        {
          "include": "#Literal"
        },
        {
          "include": "#Divert"
        },
        {
          "include": "#ConditionalBlock"
        },
        {
          "include": "#ConditionalText"
        }
      ],
      "end": "(?=[}]|[|])"
    },
    "ConditionalSubstitution": {
      "begin": "((?:[^{}|]|[|](?=[|]))+)([^\\S\\n\\r]*)([:])([^\\S\\n\\r]*)(?!(?:$|[^\\S\\n\\r]*$|[^\\S\\n\\r]*(?:[#]+(?:$|[^\\S\\n\\r]+)).*$|[^\\S\\n\\r]*[/][/].*$))",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#Expression"
            }
          ]
        },
        "2": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        },
        "3": {
          "tag": "keyword",
          "name": "keyword.colon.sd"
        },
        "4": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        }
      },
      "patterns": [
        {
          "include": "#Annotation"
        },
        {
          "include": "#CloseBraceAhead"
        },
        {
          "include": "#Divert"
        },
        {
          "include": "#InlineElseClause"
        },
        {
          "include": "#ConditionalBlock"
        },
        {
          "include": "#ConditionalText"
        }
      ],
      "end": "(?=[}])"
    },
    "InlineElseClause": {
      "begin": "([|])",
      "beginCaptures": {
        "1": {
          "tag": "keyword",
          "name": "keyword.other.sd"
        }
      },
      "patterns": [
        {
          "include": "#Annotation"
        },
        {
          "include": "#CloseBraceAhead"
        },
        {
          "include": "#Divert"
        },
        {
          "include": "#ConditionalBlock"
        },
        {
          "include": "#ConditionalText"
        }
      ],
      "end": "(?=[}])"
    },
    "MultilineBlock": {
      "begin": "([^{}:]+)([^\\S\\n\\r]*)([:])(?=(?:$|[^\\S\\n\\r]*$|[^\\S\\n\\r]*(?:[#]+(?:$|[^\\S\\n\\r]+)).*$|[^\\S\\n\\r]*[/][/].*$))",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#SequenceKeyword"
            },
            {
              "include": "#Expression"
            }
          ]
        },
        "2": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        },
        "3": {
          "tag": "punctuation",
          "name": "punctuation.separator.colon.sd"
        }
      },
      "patterns": [
        {
          "include": "#Annotation"
        },
        {
          "include": "#CloseBraceAhead"
        },
        {
          "include": "#CaseClause"
        },
        {
          "include": "#AlternativeClause"
        },
        {
          "include": "#Divert"
        },
        {
          "include": "#Logic"
        },
        {
          "include": "#Choice"
        },
        {
          "include": "#Todo"
        },
        {
          "include": "#ConditionalBlock"
        },
        {
          "include": "#ConditionalText"
        }
      ],
      "end": "(?=[}])"
    },
    "MultilineAlternative": {
      "begin": "(?<=[{])([^\\S\\n\\r]*)$",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        }
      },
      "patterns": [
        {
          "include": "#Annotation"
        },
        {
          "include": "#CloseBraceAhead"
        },
        {
          "include": "#CaseClause"
        },
        {
          "include": "#AlternativeClause"
        },
        {
          "include": "#Divert"
        },
        {
          "include": "#Logic"
        },
        {
          "include": "#Choice"
        },
        {
          "include": "#Todo"
        },
        {
          "include": "#ConditionalBlock"
        },
        {
          "include": "#ConditionalText"
        }
      ],
      "end": "(?=[}])"
    },
    "CaseClause": {
      "begin": "^([^\\S\\n\\r]*)([-])((?:$|[^\\S\\n\\r]+|(?=(?:[#]+(?:$|[^\\S\\n\\r]+))|[/][/]|[/][*])))(?:(else)|([^|{}:]+))([^\\S\\n\\r]*)([:])",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#Indent"
            }
          ]
        },
        "2": {
          "tag": "keyword",
          "name": "keyword.switch.clause.sd"
        },
        "3": {
          "patterns": [
            {
              "include": "#EndOfKeyword"
            }
          ]
        },
        "4": {
          "tag": "controlKeyword",
          "name": "keyword.control.sd"
        },
        "5": {
          "patterns": [
            {
              "include": "#Expression"
            }
          ]
        },
        "6": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        },
        "7": {
          "tag": "punctuation",
          "name": "punctuation.separator.colon.sd"
        }
      },
      "patterns": [
        {
          "include": "#Annotation"
        },
        {
          "include": "#CloseBraceAhead"
        },
        {
          "include": "#DashAhead"
        },
        {
          "include": "#Divert"
        },
        {
          "include": "#Logic"
        },
        {
          "include": "#Choice"
        },
        {
          "include": "#ConditionalBlock"
        },
        {
          "include": "#ConditionalText"
        }
      ],
      "end": "(?=^|[}]|[-])"
    },
    "AlternativeClause": {
      "begin": "^([^\\S\\n\\r]*)([-])((?:$|[^\\S\\n\\r]+|(?=(?:[#]+(?:$|[^\\S\\n\\r]+))|[/][/]|[/][*])))",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#Indent"
            }
          ]
        },
        "2": {
          "tag": "keyword",
          "name": "keyword.sequence.clause.sd"
        },
        "3": {
          "patterns": [
            {
              "include": "#EndOfKeyword"
            }
          ]
        }
      },
      "patterns": [
        {
          "include": "#Annotation"
        },
        {
          "include": "#CloseBraceAhead"
        },
        {
          "include": "#DashAhead"
        },
        {
          "include": "#Divert"
        },
        {
          "include": "#Logic"
        },
        {
          "include": "#Choice"
        },
        {
          "include": "#ConditionalBlock"
        },
        {
          "include": "#ConditionalText"
        }
      ],
      "end": "(?=^|[}]|[-])"
    },
    "SequenceKeyword": {
      "tag": "controlKeyword",
      "name": "keyword.control.sequence.sd",
      "match": "\\b(stopping|shuffle|cycle|once)\\b"
    },
    "ConditionalText": {
      "patterns": [
        {
          "include": "#DisplayText"
        }
      ]
    },
    "CloseBraceAhead": {
      "match": "(?=[}])"
    },
    "PipeAhead": {
      "match": "(?=[|])"
    },
    "DashAhead": {
      "match": "(?=[-])"
    },
    "Expression": {
      "patterns": [
        {
          "include": "#Annotation"
        },
        {
          "include": "#RefModifier"
        },
        {
          "include": "#FunctionCall"
        },
        {
          "include": "#Divert"
        },
        {
          "include": "#Operator"
        },
        {
          "include": "#Literal"
        },
        {
          "include": "#Whitespace"
        },
        {
          "include": "#Newline"
        },
        {
          "include": "#ParenExpression"
        },
        {
          "include": "#AccessPath"
        },
        {
          "include": "#PunctuationSemicolon"
        },
        {
          "include": "#PunctuationComma"
        },
        {
          "include": "#IllegalChar"
        }
      ]
    },
    "Indent": {
      "tag": "content",
      "name": "markup.raw.whitespace.indent.sd",
      "match": "^([^\\S\\n\\r]+)"
    },
    "Whitespace": {
      "tag": "content",
      "name": "markup.raw.whitespace.sd",
      "match": "([^\\S\\n\\r]+)"
    },
    "EndOfKeyword": {
      "patterns": [
        {
          "include": "#Annotation"
        },
        {
          "include": "#Whitespace"
        }
      ]
    },
    "EndOfLine": {
      "patterns": [
        {
          "include": "#Annotation"
        },
        {
          "include": "#Whitespace"
        }
      ]
    },
    "Operator": {
      "emit": true,
      "patterns": [
        {
          "include": "#SpreadOperator"
        },
        {
          "include": "#AssignArithmeticOperator"
        },
        {
          "include": "#AssignBitwiseOperator"
        },
        {
          "include": "#BitwiseShiftOperator"
        },
        {
          "include": "#CompareEqualOperator"
        },
        {
          "include": "#CompareRelativeOperator"
        },
        {
          "include": "#NegateOperator"
        },
        {
          "include": "#LogicalOperator"
        },
        {
          "include": "#WordOperator"
        },
        {
          "include": "#BitwiseOperator"
        },
        {
          "include": "#AssignEqualOperator"
        },
        {
          "include": "#DecrementOperator"
        },
        {
          "include": "#IncrementOperator"
        },
        {
          "include": "#ArithmeticOperator"
        },
        {
          "include": "#AssignMultiplyOperator"
        },
        {
          "include": "#AssignDivideOperator"
        }
      ]
    },
    "SpreadOperator": {
      "tag": "derefOperator",
      "name": "keyword.operator.spread.sd",
      "match": "([.][.][.])"
    },
    "AssignArithmeticOperator": {
      "tag": "updateOperator",
      "name": "keyword.operator.assignment.compound.sd",
      "match": "([*][=]|(?<!\\()[/][=]|[%][=]|[+][=]|[-][=])"
    },
    "AssignBitwiseOperator": {
      "tag": "updateOperator",
      "name": "keyword.operator.assignment.compound.bitwise.sd",
      "match": "([&][=]|[\\^][=]|[<][<][=]|[>][>][=]|[>][>][>][=]|[|][=])"
    },
    "BitwiseShiftOperator": {
      "tag": "updateOperator",
      "name": "keyword.operator.bitwise.shift.sd",
      "match": "([<][<]|[>][>][>]|[>][>])"
    },
    "CompareEqualOperator": {
      "tag": "compareOperator",
      "name": "keyword.operator.comparison.sd",
      "match": "([=][=][=]|[!][=][=]|[=][=]|[!][=])"
    },
    "CompareRelativeOperator": {
      "tag": "compareOperator",
      "name": "keyword.operator.relational.sd",
      "match": "([<][=]|[>][=]|[<][>]|[<]|[>])"
    },
    "NegateOperator": {
      "tag": "updateOperator",
      "match": "(?<=[0-9_\\p{L}])([!])\\s*(?:([/][=])|(?:([/])(?![/*])))",
      "captures": {
        "1": {
          "tag": "logicOperator",
          "name": "keyword.operator.logical.sd"
        },
        "2": {
          "tag": "updateOperator",
          "name": "keyword.operator.assignment.compound.sd"
        },
        "3": {
          "tag": "arithmeticOperator",
          "name": "keyword.operator.arithmetic.sd"
        }
      }
    },
    "LogicalOperator": {
      "tag": "logicOperator",
      "name": "keyword.operator.logical.sd",
      "match": "([!]|[&][&]|[|][|]|[?][?])"
    },
    "BitwiseOperator": {
      "tag": "bitwiseOperator",
      "name": "keyword.operator.bitwise.sd",
      "match": "([&]|[~]|[\\^]|[|])"
    },
    "AssignEqualOperator": {
      "tag": "updateOperator",
      "name": "keyword.operator.assignment.sd",
      "match": "([=])"
    },
    "DecrementOperator": {
      "tag": "updateOperator",
      "name": "keyword.operator.decrement.sd",
      "match": "([-][-])"
    },
    "IncrementOperator": {
      "tag": "updateOperator",
      "name": "keyword.operator.increment.sd",
      "match": "([+][+])"
    },
    "ArithmeticOperator": {
      "tag": "arithmeticOperator",
      "name": "keyword.operator.arithmetic.sd",
      "match": "([%]|[*]|[/]|[-]|[+])"
    },
    "AssignMultiplyOperator": {
      "begin": "(?<=[0-9_\\p{L})\\]])\\s*(?=(\\/[*]([^*]|([*][^\\/]))*[*]\\/\\s*)+(?:(/=)|(?:(/)(?![/*]))))",
      "patterns": [
        {
          "include": "#Annotation"
        }
      ],
      "end": "(?:(/=)|(?:(/)(?![*]([^*]|([*][^\\/]))*[*][/])))",
      "endCaptures": {
        "1": {
          "tag": "updateOperator",
          "name": "keyword.operator.assignment.compound.sd"
        },
        "2": {
          "tag": "arithmeticOperator",
          "name": "keyword.operator.arithmetic.sd"
        }
      }
    },
    "AssignDivideOperator": {
      "match": "(?<=[0-9_\\p{L})\\]])([\\s]*)([/][=]|([/])(?![/*]))",
      "captures": {
        "2": {
          "tag": "arithmeticOperator",
          "name": "keyword.operator.arithmetic.sd"
        }
      }
    },
    "AssignColonOperator": {
      "tag": "punctuation",
      "name": "punctuation.separator.colon.sd",
      "match": "([:])"
    },
    "ArrowOperator": {
      "tag": "punctuation",
      "name": "punctuation.separator.colon.sd",
      "match": "([=][>])"
    },
    "WordOperator": {
      "tag": "keyword",
      "name": "keyword.logical.word.sd",
      "match": "\\b(not|and|or|has|hasnt|mod)\\b"
    },
    "Literal": {
      "emit": true,
      "patterns": [
        {
          "include": "#StringLiteral"
        },
        {
          "include": "#NumericLiteral"
        },
        {
          "include": "#BooleanLiteral"
        },
        {
          "include": "#NullLiteral"
        },
        {
          "include": "#UndefinedLiteral"
        },
        {
          "include": "#NumericConstantLiteral"
        }
      ]
    },
    "StringLiteral": {
      "emit": true,
      "patterns": [
        {
          "include": "#DoubleQuoteString"
        }
      ]
    },
    "DoubleQuoteString": {
      "tag": "string",
      "name": "string.quoted.double.sd",
      "begin": "([\"])",
      "beginCaptures": {
        "1": {
          "tag": "string",
          "name": "punctuation.definition.string.begin.sd"
        }
      },
      "patterns": [
        {
          "include": "#Annotation"
        },
        {
          "include": "#Color"
        },
        {
          "include": "#DoubleQuoteStringContent"
        }
      ],
      "end": "([\"])|($)",
      "endCaptures": {
        "1": {
          "tag": "string",
          "name": "punctuation.definition.string.end.sd"
        }
      }
    },
    "DoubleQuoteStringContent": {
      "tag": "string",
      "name": "string.quoted.double.content.sd",
      "match": "((?:[^\"\\\\]|\\\\.)*)"
    },
    "NumericLiteral": {
      "patterns": [
        {
          "include": "#HexNumber"
        },
        {
          "include": "#BinaryNumber"
        },
        {
          "include": "#OctalNumber"
        },
        {
          "include": "#DecimalNumber"
        }
      ]
    },
    "HexNumber": {
      "tag": "number",
      "name": "constant.numeric.hex.sd",
      "match": "(\\b(?<![$])0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(?:n)?\\b(?![$]))",
      "captures": {
        "1": {
          "tag": "number",
          "name": "storage.type.numeric.bigint.sd"
        }
      }
    },
    "BinaryNumber": {
      "tag": "number",
      "name": "constant.numeric.binary.sd",
      "match": "(\\b(?<![$])0(?:b|B)[01][01_]*(?:n)?\\b(?![$]))",
      "captures": {
        "1": {
          "tag": "number",
          "name": "storage.type.numeric.bigint.sd"
        }
      }
    },
    "OctalNumber": {
      "tag": "number",
      "name": "constant.numeric.octal.sd",
      "match": "(\\b(?<![$])0(?:o|O)?[0-7][0-7_]*(?:n)?\\b(?![$]))",
      "captures": {
        "1": {
          "tag": "number",
          "name": "storage.type.numeric.bigint.sd"
        }
      }
    },
    "DecimalNumber": {
      "tag": "number",
      "name": "constant.numeric.decimal.sd",
      "match": "((?<![$])(?:(?:\\b[0-9][0-9_]*[.][0-9][0-9_]*[eE][+-]?[0-9][0-9_]*[n]?\\b)|(?:\\b[0-9][0-9_]*[.][eE][+-]?[0-9][0-9_]*[n]?\\b)|(?:\\B[.][0-9][0-9_]*[eE][+-]?[0-9][0-9_]*[n]?\\b)|(?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*[n]?\\b)|(?:\\b[0-9][0-9_]*[.][0-9][0-9_]*[n]?\\b)|(?:\\b[0-9][0-9_]*[.][n]?\\B)|(?:\\B[.][0-9][0-9_]*[n]?\\b)|(?:\\b[0-9][0-9_]*[n]?\\b(?![.])))(?![$]))"
    },
    "BooleanLiteral": {
      "patterns": [
        {
          "include": "#BooleanTrue"
        },
        {
          "include": "#BooleanFalse"
        }
      ]
    },
    "BooleanTrue": {
      "tag": "bool",
      "name": "constant.language.boolean.true.sd",
      "match": "(?<![0-9_\\p{L}])(?:(?<=\\.\\.\\.)|(?<!\\.))true(?![0-9_\\p{L}])(?:(?=\\.\\.\\.)|(?!\\.))"
    },
    "BooleanFalse": {
      "tag": "bool",
      "name": "constant.language.boolean.false.sd",
      "match": "(?<![0-9_\\p{L}])(?:(?<=\\.\\.\\.)|(?<!\\.))false(?![0-9_\\p{L}])(?:(?=\\.\\.\\.)|(?!\\.))"
    },
    "NullLiteral": {
      "tag": "null",
      "name": "constant.language.null.sd",
      "match": "(?<![0-9_\\p{L}])(?:(?<=\\.\\.\\.)|(?<!\\.))null(?![0-9_\\p{L}])(?:(?=\\.\\.\\.)|(?!\\.))"
    },
    "UndefinedLiteral": {
      "tag": "null",
      "name": "constant.language.undefined.sd",
      "match": "(?<![0-9_\\p{L}])(?:(?<=\\.\\.\\.)|(?<!\\.))undefined(?![0-9_\\p{L}])(?:(?=\\.\\.\\.)|(?!\\.))"
    },
    "NumericConstantLiteral": {
      "patterns": [
        {
          "include": "#NaN"
        },
        {
          "include": "#Infinity"
        }
      ]
    },
    "NaN": {
      "tag": "atom",
      "name": "constant.language.nan.sd",
      "match": "(?<![0-9_\\p{L}])(?:(?<=\\.\\.\\.)|(?<!\\.))NaN(?![0-9_\\p{L}])(?:(?=\\.\\.\\.)|(?!\\.))"
    },
    "Infinity": {
      "tag": "atom",
      "name": "constant.language.infinity.sd",
      "match": "(?<![0-9_\\p{L}])(?:(?<=\\.\\.\\.)|(?<!\\.))Infinity(?![0-9_\\p{L}])(?:(?=\\.\\.\\.)|(?!\\.))"
    },
    "ArrayLiteral": {
      "name": "meta.array.literal.sd",
      "brackets": true,
      "begin": "(\\[)",
      "beginCaptures": {
        "1": {
          "tag": "brace",
          "name": "meta.brace.square.open.sd"
        }
      },
      "patterns": [
        {
          "include": "#Annotation"
        },
        {
          "include": "#ArrayItem"
        },
        {
          "include": "#Newline"
        }
      ],
      "end": "(\\])",
      "endCaptures": {
        "1": {
          "tag": "brace",
          "name": "meta.brace.square.close.sd"
        }
      }
    },
    "ArrayItem": {
      "tag": "meta",
      "name": "meta.item.sd",
      "begin": "(?=.+$)",
      "patterns": [
        {
          "include": "#Annotation"
        },
        {
          "include": "#Expression"
        }
      ],
      "end": "(?=\\])|([,])",
      "endCaptures": {
        "1": {
          "tag": "punctuation",
          "name": "punctuation.separator.comma.sd"
        }
      }
    },
    "PunctuationComma": {
      "tag": "separator",
      "name": "meta.template.expression.comma.sd",
      "match": "([,])"
    },
    "PunctuationSemicolon": {
      "tag": "separator",
      "name": "meta.template.expression.semicolon.sd",
      "match": "([;])"
    },
    "PunctuationParenOpen": {
      "match": "([(])",
      "tag": "paren",
      "name": "meta.brace.round.open.sd"
    },
    "PunctuationParenClose": {
      "match": "([)])",
      "tag": "paren",
      "name": "meta.brace.round.close.sd"
    },
    "ParenExpression": {
      "brackets": true,
      "begin": "([(])",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#PunctuationParenOpen"
            }
          ]
        }
      },
      "patterns": [
        {
          "include": "#Annotation"
        },
        {
          "include": "#Expression"
        }
      ],
      "end": "([)])",
      "endCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#PunctuationParenClose"
            }
          ]
        }
      }
    },
    "NamespaceAccessor": {
      "match": "([_\\p{L}][0-9_\\p{L}]*)([.]|[?][.])($|[_\\p{L}][0-9_\\p{L}]*)(?![(])",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#TypeName"
            }
          ]
        },
        "2": {
          "patterns": [
            {
              "include": "#PunctuationAccessor"
            }
          ]
        },
        "3": {
          "patterns": [
            {
              "include": "#VariableName"
            }
          ]
        }
      }
    },
    "VariableAccessor": {
      "match": "([.]|[?][.])([_\\p{L}][0-9_\\p{L}]*)(?![(])",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#PunctuationAccessor"
            }
          ]
        },
        "2": {
          "patterns": [
            {
              "include": "#VariableName"
            }
          ]
        }
      }
    },
    "PropertyAccessor": {
      "match": "([.]|[?][.])([_\\p{L}][0-9_\\p{L}]*)(?![(])",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#PunctuationAccessor"
            }
          ]
        },
        "2": {
          "patterns": [
            {
              "include": "#PropertyName"
            }
          ]
        }
      }
    },
    "IllegalPropertyDeclaration": {
      "tag": "invalid",
      "name": "invalid.illegal.property-declaration.sd",
      "match": "([_\\p{L}][0-9_\\p{L}]*)([^\\S\\n\\r]*)([:])(.*?)($|(?=[;}]))"
    },
    "StructName": {
      "tag": "variableName",
      "name": "variable.other.constant.sd",
      "match": "([_\\p{L}][0-9_\\p{L}]*)(?![(])"
    },
    "TypeName": {
      "tag": "typeName",
      "name": "support.type.sd",
      "match": "([_\\p{L}][0-9_\\p{L}]*)"
    },
    "VariableName": {
      "tag": "variableName",
      "name": "variable.other.constant.sd",
      "match": "([_\\p{L}][0-9_\\p{L}]*)(?![(])"
    },
    "PropertyName": {
      "tag": "propertyName",
      "name": "variable.other.property.sd",
      "match": "([_\\p{L}][0-9_\\p{L}]*)(?![(])"
    },
    "FunctionName": {
      "tag": "function(variableName)",
      "name": "entity.name.function.sd",
      "match": "([_\\p{L}][0-9_\\p{L}]*)"
    },
    "Identifier": {
      "match": "([_\\p{L}][0-9_\\p{L}]*)"
    },
    "PunctuationAccessor": {
      "match": "(?:([.])|([?][.]))",
      "captures": {
        "1": {
          "tag": "punctuation",
          "name": "punctuation.accessor.sd"
        },
        "2": {
          "tag": "punctuation",
          "name": "punctuation.accessor.optional.sd"
        }
      }
    },
    "Color": {
      "emit": true,
      "patterns": [
        {
          "include": "#HEXColor"
        },
        {
          "include": "#RGBColor"
        },
        {
          "include": "#HSLColor"
        }
      ]
    },
    "HEXColor": {
      "tag": "string",
      "name": "string.color.hex.sd",
      "match": "(#)((?:[0-9a-fA-F]{2}){2,4})",
      "color": true
    },
    "RGBColor": {
      "tag": "string",
      "name": "string.color.rgb.sd",
      "match": "(rgb)([(][\\d]+[\\s]+[\\d]+[\\s]+[\\d]+(?:[\\s]*[/][\\s]*[\\d.]+[%]?)?[)])",
      "color": true
    },
    "HSLColor": {
      "tag": "string",
      "name": "string.color.hsl.sd",
      "match": "(hsl)([(][\\d]+[\\s]+[\\d]+[%]?[\\s]+[\\d]+[%]?(?:[\\s]*[/][\\s]*[\\d.]+[%]?)?[)])",
      "color": true
    },
    "FrontMatter": {
      "tag": "meta",
      "name": "meta.front-matter.sd",
      "begin": "^([-]{3,})($|[^\\S\\n\\r]*$)",
      "beginCaptures": {
        "1": {
          "tag": "keyword",
          "name": "keyword.other.front-matter.dashes.start.sd"
        },
        "2": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        }
      },
      "patterns": [
        {
          "include": "#Comment"
        },
        {
          "include": "#FrontMatterField"
        },
        {
          "include": "#Newline"
        },
        {
          "include": "#Unknown"
        }
      ],
      "end": "^([-]{3,})($|[^\\S\\n\\r]*$)?",
      "endCaptures": {
        "1": {
          "tag": "keyword",
          "name": "keyword.other.front-matter.dashes.end.sd"
        },
        "2": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        }
      }
    },
    "FrontMatterField": {
      "tag": "meta",
      "name": "meta.front-matter.field.sd",
      "begin": "^(?![^\\S\\n\\r]+)([^:\\r\\n]+)([^\\S\\n\\r]*)($|[:])($|.*$(?:\\r\\n|\\r|\\n)?)",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#FrontMatterFieldKeyword"
            }
          ]
        },
        "2": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        },
        "3": {
          "tag": "punctuation",
          "name": "punctuation.separator.colon.sd"
        },
        "4": {
          "patterns": [
            {
              "include": "#FrontMatterStringInline"
            }
          ]
        }
      },
      "patterns": [
        {
          "include": "#Comment"
        },
        {
          "include": "#FrontMatterStringBlock"
        },
        {
          "include": "#Newline"
        },
        {
          "include": "#Unknown"
        }
      ],
      "end": "(?=^(?![^\\S\\n\\r]+)[^:\\r\\n]+[^\\S\\n\\r]*(?:$|[:])|[-]{3,})"
    },
    "FrontMatterFieldKeyword": {
      "tag": "keyword",
      "name": "keyword.other.front-matter.field.sd",
      "match": "(.+)"
    },
    "FrontMatterStringInline": {
      "match": "([^\\S\\n\\r]*)($|.+$(?:\\r\\n|\\r|\\n)?)",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        },
        "2": {
          "patterns": [
            {
              "include": "#FrontMatterString"
            }
          ]
        }
      }
    },
    "FrontMatterStringBlock": {
      "match": "^([^\\S\\n\\r]+)(.*$(?:\\r\\n|\\r|\\n)?)",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#Indent"
            }
          ]
        },
        "2": {
          "patterns": [
            {
              "include": "#FrontMatterString"
            }
          ]
        }
      }
    },
    "FrontMatterString": {
      "tag": "string",
      "name": "string.front-matter.string.sd",
      "begin": "(?=.*$)",
      "patterns": [
        {
          "include": "#Comment"
        },
        {
          "include": "#InlineText"
        }
      ],
      "end": "($(?:\\r\\n|\\r|\\n)?)",
      "endCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#Newline"
            }
          ]
        }
      }
    },
    "Dialogue": {
      "patterns": [
        {
          "include": "#InlineDialogue"
        },
        {
          "include": "#BlockDialogue"
        }
      ]
    },
    "InlineDialogue": {
      "name": "entity.dialogue.sd",
      "begin": "^([^\\S\\n\\r]*)([@][^\\S\\n\\r]+)(.*?)([:])($|[^\\S\\n\\r]*)",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#Indent"
            }
          ]
        },
        "2": {
          "tag": "definition(typeName)",
          "name": "entity.name.type.dialogue.character.name.sd"
        },
        "3": {
          "patterns": [
            {
              "include": "#Annotation"
            },
            {
              "include": "#DialogueCharacter"
            }
          ]
        },
        "4": {
          "tag": "definition(typeName)",
          "name": "entity.name.type.dialogue.character.name.sd"
        },
        "5": {
          "tag": "definition(typeName)",
          "name": "entity.name.type.dialogue.character.name.sd"
        }
      },
      "patterns": [
        {
          "include": "#Annotation"
        },
        {
          "include": "#Newline"
        },
        {
          "include": "#AssetLine"
        },
        {
          "include": "#ParentheticalLine"
        },
        {
          "include": "#DialogueLineContinue"
        },
        {
          "include": "#DialogueLineEnd"
        }
      ],
      "end": "(?=^[^\\S\\n\\r]*$)|(?=\\r\\n|\\r|\\n)"
    },
    "BlockDialogue": {
      "name": "entity.dialogue.sd",
      "begin": "^([^\\S\\n\\r]*)([@](?:$|[^\\S\\n\\r]+))($|.+$)",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#Indent"
            }
          ]
        },
        "2": {
          "tag": "definition(typeName)",
          "name": "entity.name.type.dialogue.character.name.sd"
        },
        "3": {
          "patterns": [
            {
              "include": "#Annotation"
            },
            {
              "include": "#DialogueCharacter"
            }
          ]
        }
      },
      "patterns": [
        {
          "include": "#Annotation"
        },
        {
          "include": "#Newline"
        },
        {
          "include": "#AssetLine"
        },
        {
          "include": "#ParentheticalLine"
        },
        {
          "include": "#DialogueLineContinue"
        },
        {
          "include": "#DialogueLineEnd"
        }
      ],
      "end": "(?=^[^\\S\\n\\r]*$)"
    },
    "DialogueCharacter": {
      "match": "([^\\S\\n\\r]*)(.*?)([^\\S\\n\\r]*)([(][^()]*?[)])?($|[^\\S\\n\\r]*)(\\^)?((?:$|[^\\S\\n\\r]*$|[^\\S\\n\\r]*(?:[#]+(?:$|[^\\S\\n\\r]+)).*$|[^\\S\\n\\r]*[/][/].*$))",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        },
        "2": {
          "patterns": [
            {
              "include": "#DialogueCharacterName"
            }
          ]
        },
        "3": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        },
        "4": {
          "patterns": [
            {
              "include": "#DialogueCharacterParenthetical"
            }
          ]
        },
        "5": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        },
        "6": {
          "patterns": [
            {
              "include": "#DialogueCharacterSimultaneous"
            }
          ]
        },
        "7": {
          "patterns": [
            {
              "include": "#EndOfLine"
            }
          ]
        }
      }
    },
    "DialogueCharacterName": {
      "tag": "typeName",
      "name": "entity.name.type.dialogue.character.name.sd",
      "match": "(.+$)",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#DisplayText"
            }
          ]
        }
      }
    },
    "DialogueCharacterParenthetical": {
      "tag": "escape",
      "name": "constant.character.escape.dialogue.character.parenthetical.sd",
      "match": "(.+$)",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#DisplayText"
            }
          ]
        }
      }
    },
    "DialogueCharacterSimultaneous": {
      "tag": "definition(propertyName)",
      "name": "variable.other.property.dialogue.character.simultaneous.sd",
      "match": "(.+$)"
    },
    "DialogueLineContinue": {
      "tag": "string",
      "name": "string.dialogue.line.sd",
      "match": "([^\\S\\n\\r]*)(.*?[\\\\][^\\S\\n\\r]*$)(\\r\\n|\\r|\\n)?",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#Indent"
            }
          ]
        },
        "2": {
          "patterns": [
            {
              "include": "#DisplayLine"
            }
          ]
        },
        "3": {
          "patterns": [
            {
              "include": "#Newline"
            }
          ]
        }
      }
    },
    "DialogueLineEnd": {
      "tag": "string",
      "name": "string.dialogue.line.sd",
      "match": "([^\\S\\n\\r]*)(.*?[^\\\\][^\\S\\n\\r]*$)",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#Indent"
            }
          ]
        },
        "2": {
          "patterns": [
            {
              "include": "#DisplayLine"
            }
          ]
        }
      }
    },
    "Transition": {
      "tag": "labelName",
      "name": "keyword.control.transition.sd",
      "begin": "^([^\\S\\n\\r]*)([%](?:$|[^\\S\\n\\r]+))",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#Indent"
            }
          ]
        },
        "2": {
          "tag": "punctuation",
          "name": "punctuation.transition.mark.sd"
        }
      },
      "patterns": [
        {
          "include": "#Annotation"
        },
        {
          "include": "#Newline"
        },
        {
          "include": "#ParentheticalLine"
        },
        {
          "include": "#LineContinue"
        },
        {
          "include": "#LineEnd"
        }
      ],
      "end": "(?=^[^\\S\\n\\r]*$)|(?=\\r\\n|\\r|\\n)"
    },
    "Scene": {
      "tag": "regexp",
      "name": "string.regexp.scene.sd",
      "begin": "^([^\\S\\n\\r]*)([$](?:$|[^\\S\\n\\r]+))",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#Indent"
            }
          ]
        },
        "2": {
          "tag": "punctuation",
          "name": "punctuation.transition.mark.sd"
        }
      },
      "patterns": [
        {
          "include": "#Annotation"
        },
        {
          "include": "#Newline"
        },
        {
          "include": "#ParentheticalLine"
        },
        {
          "include": "#LineContinue"
        },
        {
          "include": "#LineEnd"
        }
      ],
      "end": "(?=^[^\\S\\n\\r]*$)|(?=\\r\\n|\\r|\\n)"
    },
    "SceneLocationTime": {
      "match": "INT[.]?[\\/]EXT[.]|INT[.]|EXT[.][^\\S\\n\\r]*(.*?)[^\\S\\n\\r]+[-][^\\S\\n\\r]+(.*?)[^\\S\\n\\r]*$"
    },
    "Action": {
      "begin": "(?=.+)",
      "patterns": [
        {
          "include": "#Annotation"
        },
        {
          "include": "#AssetLine"
        },
        {
          "include": "#ParentheticalLine"
        },
        {
          "include": "#LineContinue"
        },
        {
          "include": "#LineEnd"
        }
      ],
      "end": "(?=^[^\\S\\n\\r]*$)|(?=\\r\\n|\\r|\\n)|(?=^[@][^\\S\\n\\r])|(?=^[$][^\\S\\n\\r])|(?=^[%][^\\S\\n\\r])"
    },
    "ParentheticalLine": {
      "match": "^([^\\S\\n\\r]*)([(][^()]*?[)])((?:$|[^\\S\\n\\r]*$|[^\\S\\n\\r]*(?:[#]+(?:$|[^\\S\\n\\r]+)).*$|[^\\S\\n\\r]*[/][/].*$))(\\r\\n|\\r|\\n)?",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#Indent"
            }
          ]
        },
        "2": {
          "patterns": [
            {
              "include": "#ParentheticalContent"
            }
          ]
        },
        "3": {
          "patterns": [
            {
              "include": "#EndOfLine"
            }
          ]
        },
        "4": {
          "patterns": [
            {
              "include": "#Newline"
            }
          ]
        }
      }
    },
    "ParentheticalContent": {
      "tag": "escape",
      "name": "constant.character.escape.sd",
      "match": "(.+)",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#DisplayText"
            }
          ]
        }
      }
    },
    "LineContinue": {
      "match": "([^\\S\\n\\r]*)(.*?[\\\\][^\\S\\n\\r]*$)(\\r\\n|\\r|\\n)?",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#Indent"
            }
          ]
        },
        "2": {
          "patterns": [
            {
              "include": "#DisplayLine"
            }
          ]
        },
        "3": {
          "patterns": [
            {
              "include": "#Newline"
            }
          ]
        }
      }
    },
    "LineEnd": {
      "match": "([^\\S\\n\\r]*)(.*?[^\\\\][^\\S\\n\\r]*$)",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#Indent"
            }
          ]
        },
        "2": {
          "patterns": [
            {
              "include": "#DisplayLine"
            }
          ]
        }
      }
    },
    "DisplayLine": {
      "patterns": [
        {
          "include": "#Annotation"
        },
        {
          "include": "#Chain"
        },
        {
          "include": "#Chunk"
        }
      ]
    },
    "Chunk": {
      "match": "(.*?)(?=$|[\\\\](?:$|[^\\S\\n\\r]))",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#ParentheticalLine"
            },
            {
              "include": "#AssetLine"
            },
            {
              "include": "#TextChunk"
            }
          ]
        }
      }
    },
    "TextChunk": {
      "match": "(.+)",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#DisplayText"
            }
          ]
        }
      }
    },
    "DisplayText": {
      "patterns": [
        {
          "include": "#Annotation"
        },
        {
          "include": "#Chain"
        },
        {
          "include": "#Escape"
        },
        {
          "include": "#ImageTag"
        },
        {
          "include": "#AudioTag"
        },
        {
          "include": "#InlineTextAndLogic"
        }
      ]
    },
    "AssetLine": {
      "match": "^([^\\S\\n\\r]*)((?:\\[\\[(?:\\\\.|[^\\]])*?\\]\\]|[(][(](?:\\\\.|[^)])*?[)][)]|[^\\S\\n\\r]*)+)((?:$|[^\\S\\n\\r]*$|[^\\S\\n\\r]*(?:[#]+(?:$|[^\\S\\n\\r]+)).*$|[^\\S\\n\\r]*[/][/].*$))(\\r\\n|\\r|\\n)?",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#Indent"
            }
          ]
        },
        "2": {
          "patterns": [
            {
              "include": "#AssetLineContent"
            }
          ]
        },
        "3": {
          "patterns": [
            {
              "include": "#EndOfLine"
            }
          ]
        },
        "4": {
          "patterns": [
            {
              "include": "#Newline"
            }
          ]
        }
      }
    },
    "AssetLineContent": {
      "match": "(.+)",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#ImageTag"
            },
            {
              "include": "#AudioTag"
            },
            {
              "include": "#Whitespace"
            }
          ]
        }
      }
    },
    "ImageTag": {
      "tag": "macroName",
      "name": "meta.image.sd",
      "match": "(\\[\\[)((?:\\\\.|[^\\]])*?)(\\]\\])",
      "captures": {
        "1": {
          "tag": "keyword",
          "name": "keyword.operator.expression.begin.image.sd"
        },
        "2": {
          "patterns": [
            {
              "include": "#AssetTagContent"
            }
          ]
        },
        "3": {
          "tag": "keyword",
          "name": "keyword.operator.expression.end.image.sd"
        }
      }
    },
    "AudioTag": {
      "tag": "macroName",
      "name": "meta.audio.sd",
      "match": "([(][(])((?:\\\\.|[^)])*?)([)][)])",
      "captures": {
        "1": {
          "tag": "keyword",
          "name": "keyword.operator.expression.begin.audio.sd"
        },
        "2": {
          "patterns": [
            {
              "include": "#AssetTagContent"
            }
          ]
        },
        "3": {
          "tag": "keyword",
          "name": "keyword.operator.expression.end.audio.sd"
        }
      }
    },
    "AssetTagContent": {
      "match": "(?:(\\b(?:show|hide|play|stop|fade|write|animate)\\b)([^\\S\\n\\r]*)($|[_\\p{L}][0-9_\\p{L}]*\\b))?($|[^\\S\\n\\r]*\\S*?)($|[^\\S\\n\\r]*\\b(?:to|after|with|over|now|loop|noloop|mute|unmute)\\b.*)",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#AssetTagControl"
            }
          ]
        },
        "2": {
          "patterns": [
            {
              "include": "#AssetTagTargetSeparator"
            }
          ]
        },
        "3": {
          "patterns": [
            {
              "include": "#AssetTagTarget"
            }
          ]
        },
        "4": {
          "patterns": [
            {
              "include": "#AssetTagNames"
            }
          ]
        },
        "5": {
          "patterns": [
            {
              "include": "#AssetTagArguments"
            }
          ]
        }
      }
    },
    "AssetTagKeyword": {
      "tag": "keyword",
      "name": "keyword.asset.arguments.keyword.sd",
      "match": "(\\b(?:to|after|with|over|now|loop|noloop|mute|unmute)\\b)"
    },
    "AssetTagControl": {
      "tag": "controlKeyword",
      "name": "keyword.control.asset.control.sd",
      "match": "(.+)"
    },
    "AssetTagTargetSeparator": {
      "tag": "typeName",
      "name": "entity.name.type.asset.target.separator.sd",
      "match": "([^\\S\\n\\r]+)",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        }
      }
    },
    "AssetTagTarget": {
      "tag": "typeName",
      "name": "entity.name.type.asset.target.sd",
      "match": "(.+)"
    },
    "AssetTagNames": {
      "match": "(.+)",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#Whitespace"
            },
            {
              "include": "#AssetTagName"
            },
            {
              "include": "#CombineOperator"
            }
          ]
        }
      }
    },
    "AssetTagName": {
      "tag": "variableName",
      "name": "variable.other.constant.asset.name.sd",
      "match": "([_\\p{L}][0-9_\\p{L}]*)"
    },
    "CombineOperator": {
      "tag": "propertyName",
      "name": "variable.other.property.combine.sd",
      "match": "([~+-]+)"
    },
    "AssetTagArguments": {
      "match": "(.+)",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#AssetTagArgument"
            }
          ]
        }
      }
    },
    "AssetTagArgument": {
      "tag": "meta",
      "name": "meta.argument.sd",
      "begin": "(?=.+$)",
      "patterns": [
        {
          "include": "#Annotation"
        },
        {
          "include": "#AssetTagKeyword"
        },
        {
          "include": "#TimeValue"
        },
        {
          "include": "#Expression"
        }
      ],
      "end": "(?=$)|([^\\S\\n\\r])",
      "endCaptures": {
        "1": {
          "tag": "separator",
          "name": "meta.template.expression.space.sd"
        }
      }
    },
    "TimeValue": {
      "tag": "number",
      "name": "constant.numeric.time.sd",
      "match": "((?:\\d*[.])?\\d+)(ms|s)",
      "captures": {
        "1": {
          "tag": "number",
          "name": "constant.numeric.time.amount.sd"
        },
        "2": {
          "tag": "number",
          "name": "constant.numeric.time.unit.sd"
        }
      }
    },
    "TextTag": {
      "tag": "macroName",
      "name": "meta.text.sd",
      "match": "([<])((?:\\\\.|[^>])*?)([>])",
      "captures": {
        "1": {
          "tag": "keyword",
          "name": "keyword.operator.expression.begin.tag.sd"
        },
        "2": {
          "patterns": [
            {
              "include": "#TextTagContent"
            }
          ]
        },
        "3": {
          "tag": "keyword",
          "name": "keyword.operator.expression.end.tag.sd"
        }
      }
    },
    "TextTagContent": {
      "match": "([^\\S\\n\\r]*)([^ :]+)([^\\S\\n\\r]*)(?:([:])([^\\S\\n\\r]*)(.*))?",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        },
        "2": {
          "patterns": [
            {
              "include": "#TextTagControl"
            }
          ]
        },
        "3": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        },
        "4": {
          "patterns": [
            {
              "include": "#TextTagColon"
            }
          ]
        },
        "5": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        },
        "6": {
          "patterns": [
            {
              "include": "#TextTagArguments"
            }
          ]
        }
      }
    },
    "TextTagControl": {
      "match": "(.+)",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#NumericLiteral"
            },
            {
              "include": "#TextTagControlKeyword"
            }
          ]
        }
      }
    },
    "TextTagControlKeyword": {
      "tag": "keyword",
      "name": "keyword.style.control.keyword.sd",
      "match": "(.+)"
    },
    "TextTagColon": {
      "tag": "separator",
      "name": "meta.template.expression.colon.sd",
      "match": "([:])"
    },
    "TextTagArguments": {
      "match": "(.+)",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#TextTagArgument"
            }
          ]
        }
      }
    },
    "TextTagArgument": {
      "tag": "meta",
      "name": "meta.argument.sd",
      "begin": "(?=.+$)",
      "patterns": [
        {
          "include": "#Annotation"
        },
        {
          "include": "#Expression"
        }
      ],
      "end": "(?=$)|([,])",
      "endCaptures": {
        "1": {
          "tag": "separator",
          "name": "meta.template.expression.comma.sd"
        }
      }
    },
    "InlineTextAndLogic": {
      "patterns": [
        {
          "include": "#Chain"
        },
        {
          "include": "#Escape"
        },
        {
          "include": "#ConditionalBlock"
        },
        {
          "include": "#InlineText"
        }
      ]
    },
    "InlineText": {
      "patterns": [
        {
          "include": "#Chain"
        },
        {
          "include": "#Escape"
        },
        {
          "include": "#Styling"
        },
        {
          "include": "#Emphasis"
        },
        {
          "include": "#PlainText"
        }
      ]
    },
    "Escape": {
      "match": "(\\\\)(.)",
      "captures": {
        "1": {
          "tag": "definition(escape)",
          "name": "constant.character.escape.sd"
        },
        "2": {
          "tag": "content",
          "name": "markup.raw.text.sd"
        }
      }
    },
    "Newline": {
      "tag": "content",
      "name": "markup.raw.whitespace.newline.sd",
      "match": "(\\r\\n|\\r|\\n)"
    },
    "Styling": {
      "patterns": [
        {
          "include": "#Glue"
        },
        {
          "include": "#TextTag"
        },
        {
          "include": "#Underline"
        },
        {
          "include": "#BoldItalic"
        },
        {
          "include": "#Bold"
        },
        {
          "include": "#Italic"
        },
        {
          "include": "#Centered"
        }
      ]
    },
    "StylingMark": {
      "match": "(.+)",
      "captures": {
        "1": {
          "tag": "bracket",
          "name": "punctuation.definition.styling.sd"
        }
      }
    },
    "BoldItalic": {
      "tag": "strong",
      "name": "markup.bold.sd",
      "match": "([*][*]+)([*].*?(?:[*]|$))(\\1|$)",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#StylingMark"
            }
          ]
        },
        "2": {
          "patterns": [
            {
              "include": "#Italic"
            }
          ]
        },
        "3": {
          "patterns": [
            {
              "include": "#StylingMark"
            }
          ]
        }
      }
    },
    "Bold": {
      "tag": "strong",
      "name": "markup.bold.sd",
      "match": "([*][*](?![*]))(.*?)(\\1|$)",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#StylingMark"
            }
          ]
        },
        "2": {
          "patterns": [
            {
              "include": "#InlineTextAndLogic"
            }
          ]
        },
        "3": {
          "patterns": [
            {
              "include": "#StylingMark"
            }
          ]
        }
      }
    },
    "Italic": {
      "tag": "emphasis",
      "name": "markup.italic.sd",
      "match": "([*](?![*]))(.*?)(\\1|$)",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#StylingMark"
            }
          ]
        },
        "2": {
          "patterns": [
            {
              "include": "#InlineTextAndLogic"
            }
          ]
        },
        "3": {
          "patterns": [
            {
              "include": "#StylingMark"
            }
          ]
        }
      }
    },
    "Underline": {
      "tag": "link",
      "name": "markup.underline.sd",
      "match": "([_]+)(.*?)(\\1|$)",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#StylingMark"
            }
          ]
        },
        "2": {
          "patterns": [
            {
              "include": "#InlineTextAndLogic"
            }
          ]
        },
        "3": {
          "patterns": [
            {
              "include": "#StylingMark"
            }
          ]
        }
      }
    },
    "Centered": {
      "tag": "monospace",
      "name": "markup.other.centered.sd",
      "match": "([\\^]+)(.*?)(\\1|$)",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#StylingMark"
            }
          ]
        },
        "2": {
          "patterns": [
            {
              "include": "#InlineTextAndLogic"
            }
          ]
        },
        "3": {
          "patterns": [
            {
              "include": "#StylingMark"
            }
          ]
        }
      }
    },
    "Emphasis": {
      "patterns": [
        {
          "include": "#EmphasisTilde"
        },
        {
          "include": "#EmphasisColon"
        }
      ]
    },
    "EmphasisTilde": {
      "tag": "emphasis",
      "name": "markup.emphasis.sd",
      "match": "([~][~]+)((?:(?!\\1).*?)+)(\\1|$)",
      "captures": {
        "1": {
          "tag": "bracket",
          "name": "punctuation.definition.emphasis.sd"
        },
        "2": {
          "patterns": [
            {
              "include": "#InlineTextAndLogic"
            }
          ]
        },
        "3": {
          "tag": "bracket",
          "name": "punctuation.definition.emphasis.sd"
        }
      }
    },
    "EmphasisColon": {
      "tag": "emphasis",
      "name": "markup.emphasis.sd",
      "match": "([:][:]+)((?:(?!\\1).*?)+)(\\1|$)",
      "captures": {
        "1": {
          "tag": "bracket",
          "name": "punctuation.definition.emphasis.sd"
        },
        "2": {
          "patterns": [
            {
              "include": "#InlineTextAndLogic"
            }
          ]
        },
        "3": {
          "tag": "bracket",
          "name": "punctuation.definition.emphasis.sd"
        }
      }
    },
    "PlainText": {
      "patterns": [
        {
          "include": "#Newline"
        },
        {
          "include": "#Space"
        },
        {
          "include": "#Word"
        },
        {
          "include": "#EmDash"
        },
        {
          "include": "#Punctuation"
        }
      ]
    },
    "Space": {
      "tag": "content",
      "name": "markup.raw.space.sd",
      "match": "([ ])"
    },
    "Word": {
      "tag": "content",
      "name": "markup.raw.text.sd",
      "match": "([\\p{L}\\p{N}\\p{Mn}']+)"
    },
    "EmDash": {
      "tag": "content",
      "name": "markup.raw.punctuation.sd",
      "match": "([-][-])"
    },
    "Punctuation": {
      "tag": "content",
      "name": "markup.raw.punctuation.sd",
      "match": "(.)"
    },
    "IllegalExpression": {
      "tag": "invalid",
      "name": "invalid.illegal.illegal-expression.sd",
      "match": "(.+)"
    },
    "IllegalChar": {
      "tag": "invalid",
      "name": "invalid.illegal.illegal-char.sd",
      "match": "(.)"
    },
    "Unknown": {
      "tag": "invalid",
      "name": "invalid.illegal.unknown-statement.sd",
      "match": "(.+$)"
    }
  }
}