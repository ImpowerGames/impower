{
  "fileTypes": [
    "sd",
    "spark",
    "sparkdown",
    "sdown"
  ],
  "keyEquivalent": "^~S",
  "name": "Sparkdown",
  "scopeName": "text.source.sparkdown",
  "uuid": "E26C862D-2A5E-4F10-B0C3-D6BCB838CB7F",
  "patterns": [
    {
      "include": "#Comment"
    },
    {
      "include": "#Note"
    },
    {
      "include": "#Synopsis"
    },
    {
      "include": "#PageBreak"
    },
    {
      "include": "#Jump"
    },
    {
      "include": "#Centered"
    },
    {
      "include": "#CenteredAngle"
    },
    {
      "include": "#Condition"
    },
    {
      "include": "#Logic"
    },
    {
      "include": "#List"
    },
    {
      "include": "#Import"
    },
    {
      "include": "#Variable"
    },
    {
      "include": "#Struct"
    },
    {
      "include": "#Action"
    }
  ],
  "repository": {
    "Comment": {
      "patterns": [
        {
          "include": "#CommentLine"
        },
        {
          "include": "#CommentBlock"
        }
      ]
    },
    "CommentBlock": {
      "tag": "comment",
      "name": "comment.block.sd",
      "begin": "(/[*])",
      "beginCaptures": {
        "1": {
          "tag": "blockComment",
          "name": "comment.block.open.sd"
        }
      },
      "end": "([*]/)",
      "endCaptures": {
        "1": {
          "tag": "blockComment",
          "name": "comment.block.close.sd"
        }
      }
    },
    "CommentLine": {
      "tag": "comment",
      "name": "comment.line.sd",
      "match": "(\\/\\/)(.*)",
      "captures": {
        "1": {
          "tag": "lineComment",
          "name": "comment.line.double-slash.sd"
        },
        "2": {
          "tag": "comment",
          "name": "comment.line.content.sd"
        }
      }
    },
    "Note": {
      "tag": "comment",
      "name": "comment.line.note.sd",
      "match": "(\\[{2})([^\\]]*)(\\]{2})",
      "captures": {
        "1": {
          "tag": "lineComment",
          "name": "comment.line.double-square-bracket.sd"
        },
        "2": {
          "tag": "comment",
          "name": "comment.line.note.sd"
        },
        "3": {
          "tag": "lineComment",
          "name": "comment.line.double-square-bracket.sd"
        }
      }
    },
    "Synopsis": {
      "tag": "comment",
      "name": "comment.line.synopsis.sd",
      "match": "^([ \\t]*)(?![=]{2,})([=])([ ]*)(.*)",
      "captures": {
        "2": {
          "tag": "lineComment",
          "name": "comment.line.equal.sd"
        },
        "4": {
          "tag": "comment",
          "name": "comment.line.synopsis.sd"
        }
      }
    },
    "PageBreak": {
      "tag": "contentSeparator",
      "name": "markup.heading.separator.sd",
      "match": "^([ \\t]*)(===+)",
      "captures": {
        "2": {
          "tag": "contentSeparator",
          "name": "markup.heading.separator.equals.sd"
        }
      }
    },
    "Jump": {
      "match": "^([ \\t]*)([>])([ ]*)([^ ]+|[{][^\\n\\r<]+[}])?$",
      "captures": {
        "2": {
          "tag": "keyword",
          "name": "storage.type.jump.sd"
        },
        "4": {
          "tag": "labelName",
          "name": "keyword.control.export.sd"
        }
      }
    },
    "Centered": {
      "tag": "quote",
      "name": "keyword.other.centered.sd",
      "match": "^([ \\t]*)(:)([^\\n\\r:]+)(:)",
      "captures": {
        "2": {
          "tag": "quote",
          "name": "storage.type.centered.colon-left.sd"
        },
        "3": {
          "patterns": [
            {
              "include": "#Comment"
            },
            {
              "include": "#Note"
            },
            {
              "include": "#Inline"
            }
          ]
        },
        "4": {
          "tag": "quote",
          "name": "storage.type.centered.colon-right.sd"
        }
      }
    },
    "CenteredAngle": {
      "tag": "quote",
      "name": "keyword.other.centered.sd",
      "match": "^([ \\t]*)(>)([^\\n\\r<>]+)(<)",
      "captures": {
        "2": {
          "tag": "quote",
          "name": "storage.type.centered.angle-left.sd"
        },
        "3": {
          "patterns": [
            {
              "include": "#Comment"
            },
            {
              "include": "#Note"
            },
            {
              "include": "#Inline"
            }
          ]
        },
        "4": {
          "tag": "quote",
          "name": "storage.type.centered.angle-right.sd"
        }
      }
    },
    "Condition": {
      "match": "^([ \\t]*)([*])($|[ ]+)($|if|elseif|else)(?:($|[ ]+)($|(?:[ ]+|`[^\\n\\r`]*`|\"[^\\n\\r\"]*\"|'[^\\n\\r']*'|[^\\n\\r:])+))?([ ]*)($|[:])",
      "captures": {
        "2": {
          "tag": "keyword",
          "name": "storage.type.condition.sd"
        },
        "4": {
          "tag": "logicOperator",
          "name": "keyword.other.condition.sd"
        },
        "6": {
          "patterns": [
            {
              "include": "#Expression"
            }
          ]
        },
        "8": {
          "tag": "punctuation",
          "name": "punctuation.separator.colon.sd"
        }
      }
    },
    "Logic": {
      "match": "^([ \\t]*)([*])($|[ ]+)([^\\n\\r]*)?",
      "captures": {
        "2": {
          "tag": "keyword",
          "name": "storage.type.logic.sd"
        },
        "4": {
          "patterns": [
            {
              "include": "#Expression"
            }
          ]
        }
      }
    },
    "List": {
      "match": "^([ \\t]*)([*+-])($|[ ]+)",
      "captures": {
        "2": {
          "tag": "keyword",
          "name": "storage.type.list.sd"
        }
      }
    },
    "Import": {
      "match": "^([ \\t]*)(import)($|[ ]+)($|[^\\n\\r]+)",
      "captures": {
        "2": {
          "tag": "logicOperator",
          "name": "keyword.control.import.sd"
        },
        "4": {
          "patterns": [
            {
              "include": "#Expression"
            }
          ]
        }
      }
    },
    "Variable": {
      "match": "^([ \\t]*)([@])([ ]+)($|[_a-zA-Z]+[_a-zA-Z0-9]*)($|[ ]+)([^\\n\\r:]+)(?![:])$",
      "captures": {
        "2": {
          "tag": "keyword",
          "name": "storage.type.variable.sd"
        },
        "4": {
          "tag": "typeName",
          "name": "support.type.primitive.sd"
        },
        "6": {
          "patterns": [
            {
              "include": "#Expression"
            }
          ]
        }
      }
    },
    "Struct": {
      "begin": "^([ \\t]*)(@)($|[ ]+)($|[_a-zA-Z]+[_a-zA-Z0-9]*)($|[ ]+)($|[_a-zA-Z]+[_a-zA-Z0-9]*)([ ]*)(?:([(])([ ]*)($|[_a-zA-Z]+[_a-zA-Z0-9]*)([ ]*)($|[)]))?([ ]*)([:]?)([ ]*)$",
      "beginCaptures": {
        "2": {
          "tag": "keyword",
          "name": "storage.type.struct.sd"
        },
        "4": {
          "tag": "typeName",
          "name": "support.type.primitive.struct.sd"
        },
        "6": {
          "tag": "variableName",
          "name": "variable.other.readwrite.struct.sd"
        },
        "8": {
          "tag": "punctuation",
          "name": "punctuation.definition.struct.sd"
        },
        "10": {
          "tag": "typeName",
          "name": "entity.name.type.interface.struct.sd"
        },
        "12": {
          "tag": "punctuation",
          "name": "punctuation.definition.struct.sd"
        },
        "14": {
          "tag": "punctuation",
          "name": "punctuation.definition.struct.sd"
        }
      },
      "patterns": [
        {
          "include": "#YAML"
        }
      ],
      "end": "(?=@)"
    },
    "Inline": {
      "name": "meta.paragraph.text.sd",
      "tag": "content",
      "match": "([^\\n\\r<]+)"
    },
    "Action": {
      "name": "meta.paragraph.text.sd",
      "tag": "content",
      "match": "(?:(?!\\/\\/|\\/\\*).)*"
    },
    "YAML": {
      "patterns": [
        {
          "include": "#Comment"
        },
        {
          "include": "#BlockArrayStart"
        },
        {
          "include": "#BlockScalarStart"
        },
        {
          "include": "#BlockMapStart"
        },
        {
          "include": "#ExpressionStart"
        }
      ]
    },
    "BlockArrayStart": {
      "match": "([ ]{2,}|[\\t]+)([-])([\\t ]*$|[\\t ]+[^\\n\\r]+)$",
      "captures": {
        "1": {
          "name": "markup.raw.whitespace.indent.yaml.sd"
        },
        "2": {
          "tag": "keyword",
          "name": "storage.type.array.sd"
        },
        "3": {
          "patterns": [
            {
              "include": "#Comment"
            },
            {
              "include": "#BlockScalar"
            },
            {
              "include": "#Expression"
            }
          ]
        }
      }
    },
    "BlockScalarStart": {
      "match": "([ ]{2,}|[\\t]+)(?![-])([^\\n\\r:]+)([:])([\\t ]+[^\\n\\r:]+)$",
      "captures": {
        "1": {
          "name": "markup.raw.whitespace.indent.yaml.sd"
        },
        "2": {
          "tag": "keyword",
          "name": "storage.type.map.sd"
        },
        "3": {
          "name": "punctuation.separator.colon.sd"
        },
        "4": {
          "patterns": [
            {
              "include": "#Comment"
            },
            {
              "include": "#BlockScalar"
            },
            {
              "include": "#Expression"
            }
          ]
        }
      }
    },
    "BlockMapStart": {
      "match": "([ ]{2,}|[\\t]+)(?![-])([^\\n\\r:]+)([:])([\\t ]*)$",
      "captures": {
        "1": {
          "name": "markup.raw.whitespace.indent.yaml.sd"
        },
        "2": {
          "tag": "keyword",
          "name": "storage.type.map.sd"
        },
        "3": {
          "name": "punctuation.separator.colon.sd"
        }
      }
    },
    "ExpressionStart": {
      "match": "([ ]{2,}|[\\t]+)([^\\n\\r]+)$",
      "captures": {
        "1": {
          "name": "markup.raw.whitespace.indent.yaml.sd"
        },
        "2": {
          "patterns": [
            {
              "include": "#Expression"
            }
          ]
        }
      }
    },
    "BlockScalar": {
      "begin": "(?:(\\|)|(>))([1-9])?([-+])?(.*\\n?)",
      "beginCaptures": {
        "1": {
          "name": "punctuation.definition.block.scalar.literal.yaml"
        },
        "2": {
          "name": "punctuation.definition.block.scalar.folded.yaml"
        },
        "3": {
          "name": "constant.numeric.indentation-indicator.yaml"
        },
        "4": {
          "name": "support.other.chomping-indicator.yaml"
        },
        "5": {
          "patterns": [
            {
              "include": "#Comment"
            },
            {
              "match": ".+",
              "name": "invalid.illegal.expected-comment-or-newline.yaml"
            }
          ]
        }
      },
      "end": "^(?=\\S)",
      "patterns": [
        {
          "begin": "^([ ]+)(?! )",
          "end": "^(?!\\s*$)",
          "name": "string.unquoted.block.yaml"
        }
      ]
    },
    "Expression": {
      "tag": "number",
      "name": "constant.numeric",
      "match": "([^\\n\\r<]+)"
    }
  }
}