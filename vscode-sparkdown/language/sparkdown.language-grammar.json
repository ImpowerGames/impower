{
  "fileTypes": [
    "sd",
    "spark",
    "sparkdown",
    "sdown"
  ],
  "keyEquivalent": "^~S",
  "name": "Sparkdown",
  "scopeName": "text.source.sparkdown",
  "uuid": "E26C862D-2A5E-4F10-B0C3-D6BCB838CB7F",
  "patterns": [
    {
      "include": "#Comment"
    },
    {
      "include": "#FrontMatter"
    },
    {
      "include": "#Struct"
    },
    {
      "include": "#Variable"
    },
    {
      "include": "#Note"
    },
    {
      "include": "#Synopsis"
    },
    {
      "include": "#PageBreak"
    },
    {
      "include": "#Centered"
    },
    {
      "include": "#CenteredAngle"
    },
    {
      "include": "#Jump"
    },
    {
      "include": "#Condition"
    },
    {
      "include": "#Logic"
    },
    {
      "include": "#Choice"
    },
    {
      "include": "#Import"
    },
    {
      "include": "#Repeat"
    },
    {
      "include": "#Return"
    },
    {
      "include": "#Scene"
    },
    {
      "include": "#Section"
    },
    {
      "include": "#Transition"
    },
    {
      "include": "#Dialogue"
    },
    {
      "include": "#Action"
    }
  ],
  "repository": {
    "Comment": {
      "tag": "comment",
      "name": "comment.line.sd",
      "match": "([/][/])(.*)$",
      "captures": {
        "1": {
          "tag": "lineComment",
          "name": "comment.line.double-slash.sd"
        },
        "2": {
          "tag": "comment",
          "name": "comment.line.content.sd"
        }
      }
    },
    "Note": {
      "match": "^([ \\t]*)(\\[{2})([^\\]]*)(\\]{2})([ ]*)($|[/][/].*)",
      "captures": {
        "2": {
          "tag": "comment",
          "name": "comment.block.open.sd"
        },
        "3": {
          "tag": "variableName",
          "name": "variable.other.readwrite.sd"
        },
        "4": {
          "tag": "comment",
          "name": "comment.block.close.sd"
        },
        "6": {
          "patterns": [
            {
              "include": "#Comment"
            }
          ]
        }
      }
    },
    "Synopsis": {
      "tag": "comment",
      "name": "comment.line.synopsis.sd",
      "match": "^([ \\t]*)(?![=]{2,})([=])([ ]*)((?:(?![/][/]).)*)($|[/][/].*)",
      "captures": {
        "2": {
          "tag": "lineComment",
          "name": "comment.line.equal.sd"
        },
        "4": {
          "tag": "comment",
          "name": "comment.line.synopsis.sd"
        },
        "5": {
          "patterns": [
            {
              "include": "#Comment"
            }
          ]
        }
      }
    },
    "PageBreak": {
      "tag": "contentSeparator",
      "name": "markup.heading.separator.sd",
      "match": "^([ \\t]*)(===+)([ \\t]*)($|[/][/].*)",
      "captures": {
        "2": {
          "tag": "contentSeparator",
          "name": "markup.heading.separator.equals.sd"
        },
        "4": {
          "patterns": [
            {
              "include": "#Comment"
            }
          ]
        }
      }
    },
    "FrontMatter": {
      "tag": "keyword",
      "name": "string.other.front-matter.sd",
      "begin": "^([ \\t]*)([-]{3,})([ \\t]*)($|[/][/].*)",
      "beginCaptures": {
        "2": {
          "tag": "keyword",
          "name": "keyword.other.front-matter.sd"
        },
        "4": {
          "patterns": [
            {
              "include": "#Comment"
            }
          ]
        }
      },
      "patterns": [
        {
          "include": "#FrontMatterEntry"
        }
      ],
      "end": "^([ \\t]*)([-]{3,})",
      "endCaptures": {
        "2": {
          "tag": "keyword",
          "name": "keyword.other.front-matter.sd"
        }
      }
    },
    "FrontMatterEntry": {
      "name": "string.other.front-matter-entry.sd",
      "begin": "^([ _a-zA-Z]+[ _a-zA-Z0-9]*)([:])(.+)",
      "beginCaptures": {
        "1": {
          "tag": "keyword",
          "name": "keyword.other.front-matter-entry.sd"
        },
        "2": {
          "tag": "punctuation",
          "name": "punctuation.definition.tag.sd"
        },
        "3": {
          "patterns": [
            {
              "include": "#Comment"
            },
            {
              "include": "#Note"
            },
            {
              "include": "#InlineString"
            }
          ]
        }
      },
      "end": "^(?=[ _a-zA-Z]+[ _a-zA-Z0-9]*[:]|[-]{3,})"
    },
    "Jump": {
      "match": "^([ \\t]*)([>])([ ]*)([^\\n\\r ]+|[{].+[}])?([ ]*)($|[/][/].*)",
      "captures": {
        "2": {
          "tag": "keyword",
          "name": "storage.type.jump.sd"
        },
        "4": {
          "tag": "labelName",
          "name": "keyword.control.export.jump.sd"
        },
        "6": {
          "patterns": [
            {
              "include": "#Comment"
            }
          ]
        }
      }
    },
    "Centered": {
      "tag": "quote",
      "name": "keyword.other.centered.sd",
      "match": "^([ \\t]*)([|])([^\\n\\r|]+)([|])([ ]*)($|[/][/].*)",
      "captures": {
        "2": {
          "tag": "quote",
          "name": "storage.type.centered.bar-left.sd"
        },
        "3": {
          "patterns": [
            {
              "include": "#Comment"
            },
            {
              "include": "#Note"
            },
            {
              "include": "#Inline"
            }
          ]
        },
        "4": {
          "tag": "quote",
          "name": "storage.type.centered.bar-right.sd"
        },
        "6": {
          "patterns": [
            {
              "include": "#Comment"
            }
          ]
        }
      }
    },
    "CenteredAngle": {
      "tag": "quote",
      "name": "keyword.other.centered.sd",
      "match": "^([ \\t]*)(>)([^\\n\\r<>]+)(<)([ ]*)($|[/][/].*)",
      "captures": {
        "2": {
          "tag": "quote",
          "name": "storage.type.centered.angle-left.sd"
        },
        "3": {
          "patterns": [
            {
              "include": "#Comment"
            },
            {
              "include": "#Note"
            },
            {
              "include": "#Inline"
            }
          ]
        },
        "4": {
          "tag": "quote",
          "name": "storage.type.centered.angle-right.sd"
        },
        "6": {
          "patterns": [
            {
              "include": "#Comment"
            }
          ]
        }
      }
    },
    "Condition": {
      "match": "^([ \\t]*)([*])($|[ ]+)($|if|elseif|else)(?:($|[ ]+)($|(?:[ ]+|`[^\\n\\r`]*`|\"[^\\n\\r\"]*\"|'[^\\n\\r']*'|[^\\n\\r:])+))?([ ]*)($|[:])([ ]*)($|[/][/].*)",
      "captures": {
        "2": {
          "tag": "keyword",
          "name": "storage.type.condition.sd"
        },
        "4": {
          "tag": "logicOperator",
          "name": "keyword.other.condition.sd"
        },
        "6": {
          "patterns": [
            {
              "include": "#Expression"
            }
          ]
        },
        "8": {
          "tag": "punctuation",
          "name": "punctuation.separator.colon.sd"
        },
        "10": {
          "patterns": [
            {
              "include": "#Comment"
            }
          ]
        }
      }
    },
    "Logic": {
      "match": "^([ \\t]*)([*])($|[ ]+)($|.+)",
      "captures": {
        "2": {
          "tag": "keyword",
          "name": "storage.type.logic.sd"
        },
        "4": {
          "patterns": [
            {
              "include": "#Expression"
            }
          ]
        }
      }
    },
    "Choice": {
      "match": "^([ \\t]*)([+-])($|[ ]+)(?:([^\\n\\r>]+))?([ ]*)(?:([>])([ ]*)((?:(?![/][/]).)*)?)?($|[/][/].*)",
      "captures": {
        "2": {
          "tag": "keyword",
          "name": "storage.type.list.sd"
        },
        "4": {
          "patterns": [
            {
              "include": "#Comment"
            },
            {
              "include": "#InlineString"
            }
          ]
        },
        "6": {
          "tag": "keyword",
          "name": "storage.type.jump.sd"
        },
        "8": {
          "tag": "labelName",
          "name": "keyword.control.export.jump.sd"
        },
        "9": {
          "patterns": [
            {
              "include": "#Comment"
            }
          ]
        }
      }
    },
    "Import": {
      "match": "^([ \\t]*)(import)($|[ ]+)($|[_a-zA-Z]+[_a-zA-Z0-9]*)($|[ ]*)($|[=])($|[ ]*)(.+)",
      "captures": {
        "2": {
          "tag": "logicOperator",
          "name": "keyword.control.import.sd"
        },
        "4": {
          "tag": "function(variableName)",
          "name": "variable.other.constant.sd"
        },
        "6": {
          "tag": "updateOperator",
          "name": "keyword.operator.assignment.sd"
        },
        "8": {
          "patterns": [
            {
              "include": "#Expression"
            }
          ]
        }
      }
    },
    "Struct": {
      "begin": "^([ \\t]*)(@)($|[ ]+)($|[_a-zA-Z]+[_a-zA-Z0-9]*)($|[ ]+)($|[_a-zA-Z]+[_a-zA-Z0-9]*)([ ]*)(?:([(])([ ]*)($|[_a-zA-Z]+[_a-zA-Z0-9]*)([ ]*)($|[)]))?([ ]*)([:]?)([ \\t]*)($|[/][/].*)",
      "beginCaptures": {
        "2": {
          "tag": "keyword",
          "name": "storage.type.struct.sd"
        },
        "4": {
          "tag": "typeName",
          "name": "support.type.primitive.struct.sd"
        },
        "6": {
          "tag": "function(variableName)",
          "name": "variable.other.constant.struct.sd"
        },
        "8": {
          "tag": "punctuation",
          "name": "punctuation.definition.struct.sd"
        },
        "10": {
          "tag": "typeName",
          "name": "entity.name.type.interface.struct.sd"
        },
        "12": {
          "tag": "punctuation",
          "name": "punctuation.definition.struct.sd"
        },
        "14": {
          "tag": "punctuation",
          "name": "punctuation.definition.struct.sd"
        },
        "16": {
          "patterns": [
            {
              "include": "#Comment"
            }
          ]
        }
      },
      "patterns": [
        {
          "include": "#YAML"
        }
      ],
      "end": "(?=@|^[\\n\\r\\t ]*$)"
    },
    "Variable": {
      "begin": "^([ \\t]*)([@])([ ]+)($|[_a-zA-Z]+[_a-zA-Z0-9]*(?:\\[\\])*)($|[ ]+)($|[_a-zA-Z]+[_a-zA-Z0-9]*)($|[ ]*)($|[=])",
      "beginCaptures": {
        "2": {
          "tag": "keyword",
          "name": "storage.type.variable.sd"
        },
        "4": {
          "tag": "typeName",
          "name": "support.type.primitive.sd"
        },
        "6": {
          "tag": "function(variableName)",
          "name": "variable.other.constant.sd"
        },
        "8": {
          "tag": "updateOperator",
          "name": "keyword.operator.assignment.sd"
        }
      },
      "patterns": [
        {
          "include": "#Expression"
        }
      ],
      "end": "(?=@|^[\\n\\r\\t ]*$)"
    },
    "Repeat": {
      "match": "^([ \\t]*)([\\^])([ \\t]*)($|[/][/].*)",
      "captures": {
        "2": {
          "tag": "keyword",
          "name": "keyword.other.repeat.sd"
        },
        "4": {
          "patterns": [
            {
              "include": "#Comment"
            }
          ]
        }
      }
    },
    "Return": {
      "match": "^([ \\t]*)([<])([ ]*)(.*)",
      "captures": {
        "2": {
          "tag": "keyword",
          "name": "keyword.other.return.sd"
        },
        "4": {
          "patterns": [
            {
              "include": "#Expression"
            }
          ]
        }
      }
    },
    "Scene": {
      "match": "^([ \\t]*)([.](?![. ])|INT[.](?:$|[ ]+)|EXT[.](?:$|[ ]+)|INT[.]?[/]EXT[.](?:$|[ ]+))($|(?:(?![ ][-]).)*)($|[ ]+)($|[-])($|[ ]+)($|(?:(?![/][/]).)*)($|[/][/].*)",
      "captures": {
        "2": {
          "tag": "propertyName",
          "name": "keyword.control.flow.scene.sd"
        },
        "3": {
          "tag": "propertyName",
          "name": "keyword.control.flow.scene.sd"
        },
        "5": {
          "tag": "propertyName",
          "name": "keyword.control.flow.scene.sd"
        },
        "7": {
          "tag": "propertyName",
          "name": "keyword.control.flow.scene.sd"
        },
        "8": {
          "patterns": [
            {
              "include": "#Comment"
            }
          ]
        }
      }
    },
    "Section": {
      "match": "^([ \\t]*)(#+)($|[ ]+)($|[a-zA-Z]+[a-zA-Z0-9_]*)([ ]*)($|[^\\n\\r:]+)?([:])?([ ]*)($|[a-zA-Z]+[a-zA-Z0-9_]*)?([ \\t]*)($|[/][/].*)",
      "captures": {
        "2": {
          "tag": "heading",
          "name": "keyword.control.export.section.sd"
        },
        "4": {
          "tag": "heading",
          "name": "keyword.control.export.section.sd"
        },
        "6": {
          "patterns": [
            {
              "include": "#Expression"
            }
          ]
        },
        "7": {
          "tag": "punctuation",
          "name": "keyword.operator.type.annotation.section.sd"
        },
        "9": {
          "tag": "typeName",
          "name": "entity.name.type.interface.section.sd"
        }
      }
    },
    "Transition": {
      "tag": "unit",
      "name": "keyword.control.flow.transition.sd",
      "match": "([ \\t]*)((?:^|.*[ ]+)(?:TO:|TO BLACK:|FADE OUT:|FADE IN:))"
    },
    "Dialogue": {
      "begin": "^([ \\t]*)(?![!#]|\\[\\[)([^\\p{Ll}\\r\\n]*?\\p{Lu}[^\\p{Ll}\\r\\n]*?)(\\(.*\\))?(\\s*)(\\^)?(\\s*)($|[/][/].*)",
      "beginCaptures": {
        "2": {
          "tag": "className",
          "name": "entity.name.type.sd"
        },
        "3": {
          "tag": "tagName",
          "name": "constant.character.escape.sd"
        },
        "5": {
          "tag": "tagName",
          "name": "constant.character.escape.sd"
        },
        "6": {
          "tag": "tagName",
          "name": "constant.character.escape.sd"
        },
        "7": {
          "patterns": [
            {
              "include": "#Comment"
            }
          ]
        }
      },
      "patterns": [
        {
          "include": "#Comment"
        },
        {
          "include": "#Parenthetical"
        },
        {
          "include": "#Note"
        },
        {
          "include": "#InlineString"
        }
      ],
      "end": "^$"
    },
    "Parenthetical": {
      "tag": "tagName",
      "name": "constant.character.escape.sd",
      "match": "^([ \\t]*)([(])([^()]*)([)])($|[/][/].*)"
    },
    "Lyric": {
      "tag": "annotation",
      "name": "markup.italic string",
      "match": "^([ \\t]*)(~)(.*)",
      "captures": {
        "3": {
          "patterns": [
            {
              "include": "#Inline"
            }
          ]
        }
      }
    },
    "Action": {
      "tag": "content",
      "name": "meta.paragraph.text.sd",
      "match": "^(.+)",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#Inline"
            }
          ]
        }
      }
    },
    "InlineString": {
      "tag": "string",
      "name": "string.inline.sd",
      "match": "((?:(?![/][/]).)+)",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#Comment"
            },
            {
              "include": "#Lyric"
            },
            {
              "include": "#Inline"
            }
          ]
        }
      }
    },
    "Inline": {
      "patterns": [
        {
          "include": "#Comment"
        },
        {
          "include": "#Underline"
        },
        {
          "include": "#Bold"
        },
        {
          "include": "#Italic"
        },
        {
          "include": "#Raw"
        },
        {
          "include": "#Strikethrough"
        },
        {
          "include": "#Escape"
        }
      ]
    },
    "Escape": {
      "tag": "escape",
      "name": "constant.character.escape.sd",
      "match": "\\\\[-`*_#+.!(){}\\[\\]\\\\>]"
    },
    "Bold": {
      "tag": "strong",
      "name": "markup.bold.sd",
      "match": "([*][*])((?![*][*]).+)([*][*])",
      "captures": {
        "1": {
          "tag": "keyword",
          "name": "punctuation.definition.bold.sd"
        },
        "2": {
          "patterns": [
            {
              "include": "#Escape"
            },
            {
              "include": "#Raw"
            },
            {
              "include": "#Underline"
            },
            {
              "include": "#Italic"
            }
          ]
        },
        "3": {
          "tag": "keyword",
          "name": "punctuation.definition.bold.sd"
        }
      }
    },
    "Italic": {
      "tag": "emphasis",
      "name": "markup.italic.sd",
      "match": "([*])([^*]+)([*])",
      "captures": {
        "1": {
          "tag": "keyword",
          "name": "punctuation.definition.italic.sd"
        },
        "2": {
          "patterns": [
            {
              "include": "#Escape"
            },
            {
              "include": "#Raw"
            },
            {
              "include": "#Underline"
            },
            {
              "include": "#Bold"
            },
            {
              "include": "#Italic"
            }
          ]
        },
        "3": {
          "tag": "keyword",
          "name": "punctuation.definition.italic.sd"
        }
      }
    },
    "Underline": {
      "tag": "link",
      "name": "markup.underline.sd",
      "match": "([_])([^_]+)([_])",
      "captures": {
        "1": {
          "name": "punctuation.definition.underline.sd"
        },
        "2": {
          "patterns": [
            {
              "include": "#Escape"
            },
            {
              "include": "#Raw"
            },
            {
              "include": "#Bold"
            },
            {
              "include": "#Italic"
            }
          ]
        },
        "3": {
          "name": "punctuation.definition.underline.sd"
        }
      }
    },
    "Strikethrough": {
      "tag": "strikethrough",
      "name": "markup.strikethrough.sd",
      "match": "([~][~])((?![~][~]).+)([~][~])",
      "captures": {
        "1": {
          "name": "punctuation.definition.strikethrough.sd"
        },
        "2": {
          "patterns": [
            {
              "include": "#Escape"
            },
            {
              "include": "#Raw"
            },
            {
              "include": "#Underline"
            },
            {
              "include": "#Bold"
            },
            {
              "include": "#Italic"
            }
          ]
        },
        "3": {
          "name": "punctuation.definition.strikethrough.sd"
        }
      }
    },
    "Raw": {
      "tag": "monospace",
      "name": "markup.inline.raw.string.sd",
      "match": "([`])([^`]+)([`])",
      "captures": {
        "1": {
          "name": "punctuation.definition.raw.sd"
        },
        "3": {
          "name": "punctuation.definition.raw.sd"
        }
      }
    },
    "YAML": {
      "patterns": [
        {
          "include": "#Comment"
        },
        {
          "include": "#BlockScalarIndented"
        },
        {
          "include": "#BlockMapIndented"
        },
        {
          "include": "#ExpressionIndented"
        }
      ]
    },
    "BlockScalarIndented": {
      "match": "^([ ]{2,}|[\\t]+)(?![-])([^\\n\\r:]+)([:])([\\t ]+)([^\\n\\r]+)",
      "captures": {
        "1": {
          "tag": "content",
          "name": "markup.raw.whitespace.indent.sd"
        },
        "2": {
          "tag": "keyword",
          "name": "storage.type.map.sd"
        },
        "3": {
          "tag": "punctuation",
          "name": "punctuation.separator.colon.sd"
        },
        "4": {
          "tag": "content",
          "name": "markup.raw.whitespace.sd"
        },
        "5": {
          "patterns": [
            {
              "include": "#Comment"
            },
            {
              "include": "#BlockScalar"
            },
            {
              "include": "#Expression"
            }
          ]
        }
      }
    },
    "BlockMapIndented": {
      "match": "^([ ]{2,}|[\\t]+)(?![-])([^\\n\\r:]+)([:])([\\t ]*)($|[/][/].*)",
      "captures": {
        "1": {
          "tag": "content",
          "name": "markup.raw.whitespace.indent.sd"
        },
        "2": {
          "tag": "keyword",
          "name": "storage.type.map.sd"
        },
        "3": {
          "tag": "punctuation",
          "name": "punctuation.separator.colon.sd"
        }
      }
    },
    "ExpressionIndented": {
      "match": "^([ ]{2,}|[\\t]+)(.+)",
      "captures": {
        "1": {
          "tag": "content",
          "name": "markup.raw.whitespace.indent.sd"
        },
        "2": {
          "patterns": [
            {
              "include": "#Expression"
            }
          ]
        }
      }
    },
    "BlockScalar": {
      "begin": "(?:(\\|)|(>))([1-9])?([-+])?(.*[\\n]?)",
      "beginCaptures": {
        "1": {
          "tag": "definitionKeyword",
          "name": "punctuation.definition.block.scalar.literal.sd"
        },
        "2": {
          "tag": "definitionKeyword",
          "name": "punctuation.definition.block.scalar.folded.sd"
        },
        "3": {
          "tag": "definitionKeyword",
          "name": "constant.numeric.indentation-indicator.sd"
        },
        "4": {
          "tag": "definitionKeyword",
          "name": "support.other.chomping-indicator.sd"
        },
        "5": {
          "patterns": [
            {
              "include": "#Comment"
            },
            {
              "include": "#ExpectedCommentOrNewline"
            }
          ]
        }
      },
      "patterns": [
        {
          "include": "#BlockScalarContent"
        }
      ],
      "end": "^(?=\\S)"
    },
    "BlockScalarContent": {
      "tag": "definitionKeyword",
      "name": "string.unquoted.block.sd",
      "begin": "^([ ]+)(?![ ])",
      "end": "^(?!\\s*$)"
    },
    "ExpectedCommentOrNewline": {
      "tag": "invalid",
      "name": "invalid.illegal.expected-comment-or-newline.sd",
      "match": ".+"
    },
    "Expression": {
      "patterns": [
        {
          "include": "#String"
        },
        {
          "include": "#Comment"
        },
        {
          "include": "#ExpressionOperators"
        },
        {
          "include": "#NumericLiteral"
        },
        {
          "include": "#BooleanLiteral"
        },
        {
          "include": "#NullLiteral"
        },
        {
          "include": "#UndefinedLiteral"
        },
        {
          "include": "#NumericConstantLiteral"
        },
        {
          "include": "#Whitespace"
        },
        {
          "include": "#ArrayLiteral"
        },
        {
          "include": "#ParenExpression"
        },
        {
          "include": "#Identifiers"
        },
        {
          "include": "#ExpressionPunctuations"
        }
      ]
    },
    "Whitespace": {
      "tag": "content",
      "name": "markup.raw.whitespace.sd",
      "match": "([\\t ]+)"
    },
    "String": {
      "patterns": [
        {
          "include": "#QStringSingle"
        },
        {
          "include": "#QStringDouble"
        },
        {
          "include": "#Template"
        }
      ]
    },
    "QStringDouble": {
      "tag": "string",
      "name": "string.quoted.double.sd",
      "begin": "([\"])",
      "beginCaptures": {
        "1": {
          "tag": "quote",
          "name": "punctuation.definition.string.begin.sd"
        }
      },
      "patterns": [
        {
          "include": "#Color"
        }
      ],
      "end": "([\"])|([^\\\\\\n]$)",
      "endCaptures": {
        "1": {
          "tag": "quote",
          "name": "punctuation.definition.string.end.sd"
        },
        "2": {
          "tag": "invalid",
          "name": "invalid.illegal.newline.sd"
        }
      }
    },
    "QStringSingle": {
      "tag": "string",
      "name": "string.quoted.single.sd",
      "begin": "(['])",
      "beginCaptures": {
        "1": {
          "tag": "quote",
          "name": "punctuation.definition.string.begin.sd"
        }
      },
      "patterns": [
        {
          "include": "#Color"
        }
      ],
      "end": "(['])|([^\\\\\\n]$)",
      "endCaptures": {
        "1": {
          "tag": "quote",
          "name": "punctuation.definition.string.end.sd"
        },
        "2": {
          "tag": "invalid",
          "name": "invalid.illegal.newline.sd"
        }
      }
    },
    "ExpressionOperators": {
      "patterns": [
        {
          "include": "#AwaitOperator"
        },
        {
          "include": "#YieldOperator"
        },
        {
          "include": "#YieldIteratorOperator"
        },
        {
          "include": "#DeleteOperator"
        },
        {
          "include": "#InOperator"
        },
        {
          "include": "#OfOperator"
        },
        {
          "include": "#InstanceOfOperator"
        },
        {
          "include": "#NewOperator"
        },
        {
          "include": "#VoidOperator"
        },
        {
          "include": "#AsOperator"
        },
        {
          "include": "#SpreadOperator"
        },
        {
          "include": "#AssignArithmeticOperator"
        },
        {
          "include": "#AssignBitwiseOperator"
        },
        {
          "include": "#BitwiseShiftOperator"
        },
        {
          "include": "#CompareEqualOperator"
        },
        {
          "include": "#CompareRelativeOperator"
        },
        {
          "include": "#NegateOperator"
        },
        {
          "include": "#LogicalOperator"
        },
        {
          "include": "#BitwiseOperator"
        },
        {
          "include": "#AssignEqualOperator"
        },
        {
          "include": "#DecrementOperator"
        },
        {
          "include": "#IncrementOperator"
        },
        {
          "include": "#ArithmeticOperator"
        },
        {
          "include": "#AssignMultiplyOperator"
        },
        {
          "include": "#AssignDivideOperator"
        },
        {
          "include": "#ColonOperator"
        }
      ]
    },
    "AwaitOperator": {
      "tag": "controlKeyword",
      "name": "keyword.control.flow.sd",
      "match": "(?<![_$A-Za-z0-9])(?:(?<=[.][.][.])|(?<![.]))(await)(?![_$A-Za-z0-9])(?:(?=[.][.][.])|(?![.]))"
    },
    "YieldOperator": {
      "begin": "(?<![_$A-Za-z0-9])(?:(?<=[.][.][.])|(?<![.]))(yield)(?![_$A-Za-z0-9])(?:(?=[.][.][.])|(?![.]))(?=\\s*\\/[*]([^*]|([*][^\\/]))*[*]\\/\\s*[*])",
      "beginCaptures": {
        "1": {
          "tag": "controlKeyword",
          "name": "keyword.control.flow.sd"
        }
      },
      "patterns": [
        {
          "include": "#Comment"
        }
      ],
      "end": "([*])",
      "endCaptures": {
        "1": {
          "tag": "controlKeyword",
          "name": "keyword.generator.asterisk.sd"
        }
      }
    },
    "YieldIteratorOperator": {
      "match": "(?<![_$A-Za-z0-9])(?:(?<=[.][.][.])|(?<![.]))(yield)(?![_$A-Za-z0-9])(?:(?=[.][.][.])|(?![.]))(?:\\s*([*]))?",
      "captures": {
        "1": {
          "tag": "controlKeyword",
          "name": "keyword.control.flow.sd"
        },
        "2": {
          "tag": "controlKeyword",
          "name": "keyword.generator.asterisk.sd"
        }
      }
    },
    "DeleteOperator": {
      "tag": "operatorKeyword",
      "name": "keyword.operator.expression.delete.sd",
      "match": "(?<![_$A-Za-z0-9])(?:(?<=[.][.][.])|(?<![.]))delete(?![_$A-Za-z0-9])(?:(?=[.][.][.])|(?![.]))"
    },
    "InOperator": {
      "tag": "operatorKeyword",
      "name": "keyword.operator.expression.in.sd",
      "match": "(?<![_$A-Za-z0-9])(?:(?<=[.][.][.])|(?<![.]))in(?![_$A-Za-z0-9])(?:(?=[.][.][.])|(?![.]))(?!\\()"
    },
    "OfOperator": {
      "tag": "operatorKeyword",
      "name": "keyword.operator.expression.of.sd",
      "match": "(?<![_$A-Za-z0-9])(?:(?<=[.][.][.])|(?<![.]))of(?![_$A-Za-z0-9])(?:(?=[.][.][.])|(?![.]))(?!\\()"
    },
    "InstanceOfOperator": {
      "tag": "operatorKeyword",
      "name": "keyword.operator.expression.instanceof.sd",
      "match": "(?<![_$A-Za-z0-9])(?:(?<=[.][.][.])|(?<![.]))instanceof(?![_$A-Za-z0-9])(?:(?=[.][.][.])|(?![.]))"
    },
    "NewOperator": {
      "tag": "operatorKeyword",
      "name": "keyword.operator.new.sd",
      "match": "(?<![_$A-Za-z0-9])(?:(?<=[.][.][.])|(?<![.]))new(?![_$A-Za-z0-9])(?:(?=[.][.][.])|(?![.]))"
    },
    "VoidOperator": {
      "tag": "operatorKeyword",
      "name": "keyword.operator.expression.void.sd",
      "match": "(?<![_$A-Za-z0-9])(?:(?<=[.][.][.])|(?<![.]))void(?![_$A-Za-z0-9])(?:(?=[.][.][.])|(?![.]))"
    },
    "AsOperator": {
      "match": "(?<![_$A-Za-z0-9])(?:(?<=[.][.][.])|(?<![.]))(as)\\s+(const)(?=\\s*($|[;,:})\\]]))",
      "captures": {
        "1": {
          "tag": "controlKeyword",
          "name": "keyword.control.as.sd"
        },
        "2": {
          "tag": "controlKeyword",
          "name": "storage.modifier.sd"
        }
      }
    },
    "SpreadOperator": {
      "tag": "derefOperator",
      "name": "keyword.operator.spread.sd",
      "match": "([.][.][.])"
    },
    "AssignArithmeticOperator": {
      "tag": "updateOperator",
      "name": "keyword.operator.assignment.compound.sd",
      "match": "([*][=]|(?<!\\()[/][=]|[%][=]|[+][=]|[-][=])"
    },
    "AssignBitwiseOperator": {
      "tag": "updateOperator",
      "name": "keyword.operator.assignment.compound.bitwise.sd",
      "match": "([&][=]|[\\^][=]|[<][<][=]|[>][>][=]|[>][>][>][=]|[|][=])"
    },
    "BitwiseShiftOperator": {
      "tag": "updateOperator",
      "name": "keyword.operator.bitwise.shift.sd",
      "match": "([<][<]|[>][>][>]|[>][>])"
    },
    "CompareEqualOperator": {
      "tag": "compareOperator",
      "name": "keyword.operator.comparison.sd",
      "match": "([=][=][=]|[!][=][=]|[=][=]|[!][=])"
    },
    "CompareRelativeOperator": {
      "tag": "compareOperator",
      "name": "keyword.operator.relational.sd",
      "match": "([<][=]|[>][=]|[<][>]|[<]|[>])"
    },
    "NegateOperator": {
      "tag": "updateOperator",
      "match": "(?<=[_$A-Za-z0-9])([!])\\s*(?:([/][=])|(?:([/])(?![/*])))",
      "captures": {
        "1": {
          "tag": "logicOperator",
          "name": "keyword.operator.logical.sd"
        },
        "2": {
          "tag": "updateOperator",
          "name": "keyword.operator.assignment.compound.sd"
        },
        "3": {
          "tag": "arithmeticOperator",
          "name": "keyword.operator.arithmetic.sd"
        }
      }
    },
    "LogicalOperator": {
      "tag": "logicOperator",
      "name": "keyword.operator.logical.sd",
      "match": "([!]|[&][&]|[|][|]|[?][?])"
    },
    "BitwiseOperator": {
      "tag": "bitwiseOperator",
      "name": "keyword.operator.bitwise.sd",
      "match": "([&]|[~]|[\\^]|[|])"
    },
    "AssignEqualOperator": {
      "tag": "updateOperator",
      "name": "keyword.operator.assignment.sd",
      "match": "([=])"
    },
    "DecrementOperator": {
      "tag": "updateOperator",
      "name": "keyword.operator.decrement.sd",
      "match": "([-][-])"
    },
    "IncrementOperator": {
      "tag": "updateOperator",
      "name": "keyword.operator.increment.sd",
      "match": "([+][+])"
    },
    "ArithmeticOperator": {
      "tag": "arithmeticOperator",
      "name": "keyword.operator.arithmetic.sd",
      "match": "([%]|[*]|[/]|[-]|[+])"
    },
    "AssignMultiplyOperator": {
      "begin": "(?<=[_$A-Za-z0-9)\\]])\\s*(?=(\\/[*]([^*]|([*][^\\/]))*[*]\\/\\s*)+(?:(/=)|(?:(/)(?![/*]))))",
      "patterns": [
        {
          "include": "#Comment"
        }
      ],
      "end": "(?:(/=)|(?:(/)(?![*]([^*]|([*][^\\/]))*[*][/])))",
      "endCaptures": {
        "1": {
          "tag": "updateOperator",
          "name": "keyword.operator.assignment.compound.sd"
        },
        "2": {
          "tag": "arithmeticOperator",
          "name": "keyword.operator.arithmetic.sd"
        }
      }
    },
    "AssignDivideOperator": {
      "match": "(?<=[_$A-Za-z0-9)\\]])([\\s]*)([/][=]|([/])(?![/*]))",
      "captures": {
        "2": {
          "tag": "arithmeticOperator",
          "name": "keyword.operator.arithmetic.sd"
        }
      }
    },
    "ColonOperator": {
      "tag": "punctuation",
      "name": "keyword.operator.type.annotation.sd",
      "match": "([:])"
    },
    "NumericLiteral": {
      "patterns": [
        {
          "include": "#HexNumber"
        },
        {
          "include": "#BinaryNumber"
        },
        {
          "include": "#OctalNumber"
        },
        {
          "include": "#DecimalNumber"
        }
      ]
    },
    "HexNumber": {
      "tag": "number",
      "name": "constant.numeric.hex.sd",
      "match": "\\b(?<![$])0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?![$])",
      "captures": {
        "1": {
          "tag": "number",
          "name": "storage.type.numeric.bigint.sd"
        }
      }
    },
    "BinaryNumber": {
      "tag": "number",
      "name": "constant.numeric.binary.sd",
      "match": "\\b(?<![$])0(?:b|B)[01][01_]*(n)?\\b(?![$])",
      "captures": {
        "1": {
          "tag": "number",
          "name": "storage.type.numeric.bigint.sd"
        }
      }
    },
    "OctalNumber": {
      "tag": "number",
      "name": "constant.numeric.octal.sd",
      "match": "\\b(?<![$])0(?:o|O)?[0-7][0-7_]*(n)?\\b(?![$])",
      "captures": {
        "1": {
          "tag": "number",
          "name": "storage.type.numeric.bigint.sd"
        }
      }
    },
    "DecimalNumber": {
      "tag": "number",
      "name": "constant.numeric.decimal.sd",
      "match": "((?<![$])(?:(?:\\b[0-9][0-9_]*[.][0-9][0-9_]*[eE][+-]?[0-9][0-9_]*[n]?\\b)|(?:\\b[0-9][0-9_]*[.][eE][+-]?[0-9][0-9_]*[n]?\\b)|(?:\\B[.][0-9][0-9_]*[eE][+-]?[0-9][0-9_]*[n]?\\b)|(?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*[n]?\\b)|(?:\\b[0-9][0-9_]*[.][0-9][0-9_]*[n]?\\b)|(?:\\b[0-9][0-9_]*[.][n]?\\B)|(?:\\B[.][0-9][0-9_]*[n]?\\b)|(?:\\b[0-9][0-9_]*[n]?\\b(?![.])))(?![$]))"
    },
    "BooleanLiteral": {
      "patterns": [
        {
          "include": "#BooleanTrue"
        },
        {
          "include": "#BooleanFalse"
        }
      ]
    },
    "BooleanTrue": {
      "tag": "bool",
      "name": "constant.language.boolean.true.sd",
      "match": "(?<![_$A-Za-z0-9])(?:(?<=[.][.][.])|(?<![.]))true(?![_$A-Za-z0-9])(?:(?=[.][.][.])|(?![.]))"
    },
    "BooleanFalse": {
      "tag": "bool",
      "name": "constant.language.boolean.false.sd",
      "match": "(?<![_$A-Za-z0-9])(?:(?<=[.][.][.])|(?<![.]))false(?![_$A-Za-z0-9])(?:(?=[.][.][.])|(?![.]))"
    },
    "NullLiteral": {
      "tag": "null",
      "name": "constant.language.null.sd",
      "match": "(?<![_$A-Za-z0-9])(?:(?<=[.][.][.])|(?<![.]))null(?![_$A-Za-z0-9])(?:(?=[.][.][.])|(?![.]))"
    },
    "UndefinedLiteral": {
      "tag": "null",
      "name": "constant.language.undefined.sd",
      "match": "(?<![_$A-Za-z0-9])(?:(?<=[.][.][.])|(?<![.]))undefined(?![_$A-Za-z0-9])(?:(?=[.][.][.])|(?![.]))"
    },
    "NumericConstantLiteral": {
      "patterns": [
        {
          "include": "#NaN"
        },
        {
          "include": "#Infinity"
        }
      ]
    },
    "NaN": {
      "tag": "atom",
      "name": "constant.language.nan.sd",
      "match": "(?<![_$A-Za-z0-9])(?:(?<=[.][.][.])|(?<![.]))NaN(?![_$A-Za-z0-9])(?:(?=[.][.][.])|(?![.]))"
    },
    "Infinity": {
      "tag": "atom",
      "name": "constant.language.infinity.sd",
      "match": "(?<![_$A-Za-z0-9])(?:(?<=[.][.][.])|(?<![.]))Infinity(?![_$A-Za-z0-9])(?:(?=[.][.][.])|(?![.]))"
    },
    "ArrayLiteral": {
      "name": "meta.array.literal.sd",
      "brackets": true,
      "begin": "(\\[)",
      "beginCaptures": {
        "1": {
          "tag": "brace",
          "name": "meta.brace.square.sd"
        }
      },
      "patterns": [
        {
          "include": "#Expression"
        },
        {
          "include": "#PunctuationComma"
        }
      ],
      "end": "(\\])",
      "endCaptures": {
        "1": {
          "tag": "brace",
          "name": "meta.brace.square.sd"
        }
      }
    },
    "PunctuationComma": {
      "tag": "punctuation",
      "name": "punctuation.separator.comma.sd",
      "match": ","
    },
    "ParenExpression": {
      "brackets": true,
      "begin": "([(])",
      "beginCaptures": {
        "1": {
          "tag": "paren",
          "name": "meta.brace.round.sd"
        }
      },
      "patterns": [
        {
          "include": "#Expression"
        }
      ],
      "end": "([)])",
      "endCaptures": {
        "1": {
          "tag": "paren",
          "name": "meta.brace.round.sd"
        }
      }
    },
    "Identifiers": {
      "patterns": [
        {
          "include": "#AccessorIdentifier"
        },
        {
          "include": "#NestedAccessorIdentifier"
        },
        {
          "include": "#ConstantVariableIdentifier"
        },
        {
          "include": "#WritableVariableIdentifier"
        }
      ]
    },
    "AccessorIdentifier": {
      "match": "(?:([.])|(\\?[.](?!\\s*[0-9])))\\s*([#]?[A-Z][_$0-9A-Z]*)(?![_$A-Za-z0-9])",
      "captures": {
        "1": {
          "tag": "punctuation",
          "name": "punctuation.accessor.sd"
        },
        "2": {
          "tag": "punctuation",
          "name": "punctuation.accessor.optional.sd"
        },
        "3": {
          "tag": "variableName",
          "name": "variable.other.constant.property.sd"
        }
      }
    },
    "NestedAccessorIdentifier": {
      "match": "(?:([.])|(\\?[.](?!\\s*[0-9])))\\s*([#]?[_$A-Za-z][_$A-Za-z0-9]*)",
      "captures": {
        "1": {
          "tag": "punctuation",
          "name": "punctuation.accessor.sd"
        },
        "2": {
          "tag": "punctuation",
          "name": "punctuation.accessor.optional.sd"
        },
        "3": {
          "tag": "variableName",
          "name": "variable.other.property.sd"
        }
      }
    },
    "ConstantVariableIdentifier": {
      "tag": "variableName",
      "name": "variable.other.constant.sd",
      "match": "([A-Z][_$0-9A-Z]*)(?![_$A-Za-z0-9])"
    },
    "WritableVariableIdentifier": {
      "tag": "variableName",
      "name": "variable.other.readwrite.sd",
      "match": "[_$A-Za-z][_$A-Za-z0-9]*"
    },
    "ExpressionPunctuations": {
      "patterns": [
        {
          "include": "#PunctuationComma"
        },
        {
          "include": "#PunctuationAccessor"
        }
      ]
    },
    "PunctuationAccessor": {
      "match": "(?:([.])|(\\?[.](?!\\s*[0-9])))",
      "captures": {
        "1": {
          "tag": "variableName",
          "name": "punctuation.accessor.sd"
        },
        "2": {
          "tag": "punctuation",
          "name": "punctuation.accessor.optional.sd"
        }
      }
    },
    "Template": {
      "patterns": [
        {
          "include": "#TemplateSubstitution"
        }
      ]
    },
    "TemplateSubstitution": {
      "name": "string.template.ts",
      "begin": "([_$A-Za-z][_$A-Za-z0-9]*)?([`])",
      "beginCaptures": {
        "1": {
          "tag": "tagName",
          "name": "entity.name.function.tagged-template.sd"
        },
        "2": {
          "tag": "string",
          "name": "punctuation.definition.string.template.begin.sd"
        }
      },
      "patterns": [
        {
          "include": "#Color"
        },
        {
          "include": "#TemplateSubstitutionElement"
        },
        {
          "include": "#StringCharacterEscape"
        },
        {
          "include": "#StringContent"
        }
      ],
      "end": "([`])",
      "endCaptures": {
        "1": {
          "tag": "string",
          "name": "punctuation.definition.string.template.end.sd"
        }
      }
    },
    "TemplateSubstitutionElement": {
      "brackets": true,
      "name": "meta.template.expression.sd",
      "begin": "([$]?[{])",
      "beginCaptures": {
        "1": {
          "tag": "keyword",
          "name": "punctuation.definition.template-expression.begin.sd"
        }
      },
      "contentName": "meta.embedded.line.sd",
      "patterns": [
        {
          "include": "#Expression"
        }
      ],
      "end": "([}])",
      "endCaptures": {
        "1": {
          "tag": "keyword",
          "name": "punctuation.definition.template-expression.end.sd"
        }
      }
    },
    "StringCharacterEscape": {
      "tag": "character",
      "name": "constant.character.escape.ts",
      "match": "([\\\\])(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|u\\{[0-9A-Fa-f]+\\}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.|$)"
    },
    "StringContent": {
      "tag": "string",
      "name": "string.template.sd",
      "match": "((?:(?![$]?[{])[^\\n\\r`])+)"
    },
    "Color": {
      "patterns": [
        {
          "include": "#HEXColor"
        },
        {
          "include": "#RGBColor"
        },
        {
          "include": "#HSLColor"
        }
      ]
    },
    "HEXColor": {
      "tag": "string",
      "name": "string.color.hex.sd",
      "match": "(#)((?:[0-9a-fA-F]{2}){2,4})",
      "color": true
    },
    "RGBColor": {
      "tag": "string",
      "name": "string.color.rgb.sd",
      "match": "(rgb)([(][\\d]+[\\s]+[\\d]+[\\s]+[\\d]+(?:[\\s]*[/][\\s]*[\\d.]+[%]?)?[)])",
      "color": true
    },
    "HSLColor": {
      "tag": "string",
      "name": "string.color.hsl.sd",
      "match": "(hsl)([(][\\d]+[\\s]+[\\d]+[%]?[\\s]+[\\d]+[%]?(?:[\\s]*[/][\\s]*[\\d.]+[%]?)?[)])",
      "color": true
    }
  }
}