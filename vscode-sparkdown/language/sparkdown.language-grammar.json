{
  "fileTypes": [
    "sparkdown",
    "sd",
    "script",
    "project"
  ],
  "keyEquivalent": "^~S",
  "indentUnit": "  ",
  "name": "Sparkdown",
  "scopeName": "text.source.sparkdown",
  "uuid": "E26C862D-2A5E-4F10-B0C3-D6BCB838CB7F",
  "flags": "mu",
  "patterns": [
    {
      "include": "#Comment"
    },
    {
      "include": "#Label"
    },
    {
      "include": "#Newline"
    },
    {
      "include": "#ExplicitAction"
    },
    {
      "include": "#FrontMatter"
    },
    {
      "include": "#Chunk"
    },
    {
      "include": "#Section"
    },
    {
      "include": "#Checkpoint"
    },
    {
      "include": "#FlowBreak"
    },
    {
      "include": "#Import"
    },
    {
      "include": "#Define"
    },
    {
      "include": "#Store"
    },
    {
      "include": "#Logic"
    },
    {
      "include": "#Jump"
    },
    {
      "include": "#Transition"
    },
    {
      "include": "#Scene"
    },
    {
      "include": "#Dialogue"
    },
    {
      "include": "#ImplicitAction"
    },
    {
      "include": "#Unknown"
    }
  ],
  "repository": {
    "Comment": {
      "tag": "lineComment",
      "name": "comment.line.sd",
      "match": "([ ]*)([/][/])($|[ ]*)($|.*$)",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        },
        "2": {
          "tag": "definition(lineComment)",
          "name": "punctuation.definition.comment.mark.sd"
        },
        "3": {
          "tag": "definition(lineComment)",
          "name": "punctuation.definition.comment.separator.sd"
        },
        "4": {
          "patterns": [
            {
              "include": "#CommentContent"
            }
          ]
        }
      }
    },
    "CommentContent": {
      "tag": "definition(lineComment)",
      "name": "punctuation.definition.comment.content.sd",
      "match": "(.+)"
    },
    "IllegalExpression": {
      "tag": "invalid",
      "name": "invalid.illegal.illegal-expression.sd",
      "match": "(.+)",
      "captures": {
        "1": {
          "tag": "content",
          "name": "markup.raw.unknown.sd"
        }
      }
    },
    "IllegalChar": {
      "tag": "invalid",
      "name": "invalid.illegal.illegal-char.sd",
      "match": "(.)",
      "captures": {
        "1": {
          "tag": "content",
          "name": "markup.raw.unknown.sd"
        }
      }
    },
    "Unknown": {
      "tag": "invalid",
      "name": "invalid.illegal.unknown-statement.sd",
      "match": "(.+$)",
      "captures": {
        "1": {
          "tag": "content",
          "name": "markup.raw.unknown.sd"
        }
      }
    },
    "Label": {
      "match": "^([:])($|[ ]+)(.*$)",
      "captures": {
        "1": {
          "tag": "contentSeparator",
          "name": "keyword.control.flow-break.sd"
        },
        "2": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        },
        "3": {
          "patterns": [
            {
              "include": "#Expression"
            }
          ]
        }
      }
    },
    "FrontMatter": {
      "tag": "meta",
      "name": "meta.front-matter.sd",
      "begin": "^([-]{3,})($|[ ]*$)",
      "beginCaptures": {
        "1": {
          "tag": "keyword",
          "name": "keyword.other.front-matter.dashes.start.sd"
        },
        "2": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        }
      },
      "patterns": [
        {
          "include": "#Comment"
        },
        {
          "include": "#FrontMatterField"
        },
        {
          "include": "#Newline"
        },
        {
          "include": "#Unknown"
        }
      ],
      "end": "^([-]{3,})($|[ ]*$)?",
      "endCaptures": {
        "1": {
          "tag": "keyword",
          "name": "keyword.other.front-matter.dashes.end.sd"
        },
        "2": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        }
      }
    },
    "FrontMatterField": {
      "tag": "meta",
      "name": "meta.front-matter.field.sd",
      "begin": "^([_a-zA-Z][_a-zA-Z0-9]*)($|[ ]*)($|[:])(.*$(?:\\r\\n|\\r|\\n)?)",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#FrontMatterFieldKeyword"
            }
          ]
        },
        "2": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        },
        "3": {
          "tag": "punctuation",
          "name": "punctuation.separator.colon.sd"
        },
        "4": {
          "patterns": [
            {
              "include": "#FrontMatterStringInline"
            }
          ]
        }
      },
      "patterns": [
        {
          "include": "#FrontMatterArrayItem"
        },
        {
          "include": "#FrontMatterStringBlock"
        },
        {
          "include": "#Newline"
        },
        {
          "include": "#Unknown"
        }
      ],
      "end": "(?=^[_a-zA-Z][_a-zA-Z0-9]*[ ]*[:]|[-]{3,})"
    },
    "FrontMatterArrayItem": {
      "match": "^([ ]{2,})([-])($|[ ]+)(.*$(?:\\r\\n|\\r|\\n)?)",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#Indent"
            }
          ]
        },
        "2": {
          "tag": "keyword",
          "name": "keyword.operator.expression.array.sd"
        },
        "3": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        },
        "4": {
          "patterns": [
            {
              "include": "#FrontMatterString"
            }
          ]
        }
      }
    },
    "FrontMatterStringInline": {
      "match": "($|[ ]*)(.*$(?:\\r\\n|\\r|\\n)?)",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        },
        "2": {
          "patterns": [
            {
              "include": "#FrontMatterString"
            }
          ]
        }
      }
    },
    "FrontMatterStringBlock": {
      "match": "^($|[ ]*)(.*$(?:\\r\\n|\\r|\\n)?)",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#Indent"
            }
          ]
        },
        "2": {
          "patterns": [
            {
              "include": "#FrontMatterString"
            }
          ]
        }
      }
    },
    "FrontMatterString": {
      "tag": "string",
      "name": "string.front-matter.string.sd",
      "begin": "(?=.*$)",
      "patterns": [
        {
          "include": "#InlineText"
        }
      ],
      "end": "($(?:\\r\\n|\\r|\\n)?)",
      "endCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#Newline"
            }
          ]
        }
      }
    },
    "FrontMatterFieldKeyword": {
      "tag": "keyword",
      "name": "keyword.other.front-matter.field.sd",
      "match": "(.+)"
    },
    "ChunkSplitter": {
      "match": "^((?:[@])(?:$|[ ]+)(?:$|[._a-zA-Z][._a-zA-Z0-9]*)(?:$|[ ]*$))"
    },
    "Chunk": {
      "tag": "definition(annotation)",
      "name": "keyword.control.chunk.sd",
      "match": "^([@])($|[ ]+)($|[._a-zA-Z][._a-zA-Z0-9]*)($|[ ]*$)",
      "captures": {
        "1": {
          "tag": "keyword",
          "name": "keyword.control.chunk.percent.sd"
        },
        "2": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        },
        "3": {
          "patterns": [
            {
              "include": "#ChunkName"
            }
          ]
        },
        "4": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        }
      }
    },
    "ChunkName": {
      "tag": "special(annotation)",
      "name": "keyword.control.chunk.sd",
      "match": "(.+)"
    },
    "Section": {
      "tag": "definition(heading)",
      "name": "keyword.control.section.sd",
      "match": "^([#]+)($|[ ]+)($|[_a-zA-Z][_a-zA-Z0-9]*)($|[ ]*$)",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#SectionLevel"
            }
          ]
        },
        "2": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        },
        "3": {
          "patterns": [
            {
              "include": "#SectionName"
            }
          ]
        },
        "4": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        }
      }
    },
    "SectionLevel": {
      "tag": "keyword",
      "name": "keyword.control.section.number-sign.sd",
      "match": "(.+)"
    },
    "SectionName": {
      "tag": "special(heading)",
      "name": "keyword.control.section.sd",
      "match": "(.+)"
    },
    "Checkpoint": {
      "match": "^([=])($|[ ]+)(.*$)((?:\\r\\n|\\r|\\n)?)",
      "captures": {
        "1": {
          "tag": "contentSeparator",
          "name": "keyword.control.flow-break.sd"
        },
        "2": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        },
        "3": {
          "patterns": [
            {
              "include": "#CheckpointName"
            }
          ]
        },
        "4": {
          "patterns": [
            {
              "include": "#Newline"
            }
          ]
        }
      }
    },
    "CheckpointName": {
      "tag": "contentSeparator",
      "name": "keyword.control.flow-break.sd",
      "match": "(.+)"
    },
    "FlowBreak": {
      "tag": "meta",
      "name": "meta.break.sd",
      "match": "^(===+)($|[ ]*$)",
      "captures": {
        "1": {
          "tag": "contentSeparator",
          "name": "keyword.control.flow-break.sd"
        },
        "2": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        }
      }
    },
    "Logic": {
      "patterns": [
        {
          "include": "#Break"
        },
        {
          "include": "#Continue"
        },
        {
          "include": "#Return"
        },
        {
          "include": "#Delete"
        },
        {
          "include": "#Branch"
        },
        {
          "include": "#Repeat"
        },
        {
          "include": "#Define"
        },
        {
          "include": "#Call"
        },
        {
          "include": "#Assign"
        }
      ]
    },
    "Import": {
      "tag": "meta",
      "name": "meta.import.sd",
      "begin": "^([ ]*)(import)($|[ ]+)",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#Indent"
            }
          ]
        },
        "2": {
          "tag": "keyword",
          "name": "keyword.control.import.sd"
        },
        "3": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        }
      },
      "patterns": [
        {
          "include": "#ImportDeclaration"
        },
        {
          "include": "#Newline"
        },
        {
          "include": "#Unknown"
        }
      ],
      "end": "($)"
    },
    "ImportDeclaration": {
      "match": "([_a-zA-Z][_a-zA-Z0-9]*)($|[ ]+)($|[_a-zA-Z][_a-zA-Z0-9]*)($|[ ]*)($|.+$)",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#DeclarationType"
            }
          ]
        },
        "2": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        },
        "3": {
          "patterns": [
            {
              "include": "#DeclarationName"
            }
          ]
        },
        "4": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        },
        "5": {
          "patterns": [
            {
              "include": "#ImportAssignment"
            },
            {
              "include": "#Unknown"
            }
          ]
        }
      }
    },
    "ImportAssignment": {
      "match": "($|from)($|[ ]+)($|.*$)",
      "captures": {
        "1": {
          "tag": "keyword",
          "name": "keyword.control.from.sd"
        },
        "2": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        },
        "3": {
          "patterns": [
            {
              "include": "#ValueText"
            },
            {
              "include": "#Unknown"
            }
          ]
        }
      }
    },
    "DefinitionParameters": {
      "brackets": true,
      "begin": "([(])",
      "beginCaptures": {
        "1": {
          "tag": "paren",
          "name": "meta.brace.round.open.sd"
        }
      },
      "patterns": [
        {
          "include": "#Parameter"
        },
        {
          "include": "#Newline"
        }
      ],
      "end": "([)])([ ]*)([:]?)",
      "endCaptures": {
        "1": {
          "tag": "paren",
          "name": "meta.brace.round.close.sd"
        },
        "2": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        },
        "3": {
          "tag": "punctuation",
          "name": "punctuation.separator.colon.sd"
        }
      }
    },
    "CallParameters": {
      "brackets": true,
      "begin": "([(])",
      "beginCaptures": {
        "1": {
          "tag": "paren",
          "name": "meta.brace.round.open.sd"
        }
      },
      "patterns": [
        {
          "include": "#Parameter"
        }
      ],
      "end": "([)])",
      "endCaptures": {
        "1": {
          "tag": "paren",
          "name": "meta.brace.round.close.sd"
        }
      }
    },
    "Parameter": {
      "tag": "meta",
      "name": "meta.parameter.sd",
      "begin": "(?=.+$)",
      "patterns": [
        {
          "include": "#Expression"
        }
      ],
      "end": "(?=[)])|([,])",
      "endCaptures": {
        "1": {
          "tag": "punctuation",
          "name": "punctuation.separator.comma.sd"
        }
      }
    },
    "Define": {
      "emit": true,
      "patterns": [
        {
          "include": "#DefineFunction"
        },
        {
          "include": "#DefineScalar"
        },
        {
          "include": "#DefineObject"
        },
        {
          "include": "#DefineInvalid"
        }
      ]
    },
    "DefineFunction": {
      "tag": "meta",
      "name": "meta.definition.function.sd",
      "begin": "^([ ]*)(define)($|[ ]+)(?:([_a-zA-Z][_a-zA-Z0-9]*)([ ]*)(?=[(])|($|[_a-zA-Z][_a-zA-Z0-9]*)($|[ ]+)($|[_a-zA-Z][_a-zA-Z0-9]*)([ ]*))(?=[(])",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#Indent"
            }
          ]
        },
        "2": {
          "tag": "controlKeyword",
          "name": "keyword.control.definition.object.sd"
        },
        "3": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        },
        "4": {
          "patterns": [
            {
              "include": "#FunctionName"
            }
          ]
        },
        "5": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        },
        "6": {
          "patterns": [
            {
              "include": "#TypeIdentifier"
            }
          ]
        },
        "7": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        },
        "8": {
          "patterns": [
            {
              "include": "#FunctionName"
            }
          ]
        },
        "9": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        },
        "10": {
          "patterns": [
            {
              "include": "#DeclarationAssignOperator"
            }
          ]
        },
        "11": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        }
      },
      "patterns": [
        {
          "include": "#Comment"
        },
        {
          "include": "#DefinitionParameters"
        },
        {
          "include": "#Logic"
        },
        {
          "include": "#Expression"
        }
      ],
      "end": "(?=^(?!\\1(?:[ ]{2,})))"
    },
    "DefineScalar": {
      "tag": "meta",
      "name": "meta.definition.type.sd",
      "begin": "^([ ]*)(define)($|[ ]+)([^:]*?)([ ]*)($|[!?~^|&<>%\\/*+-]{0,2}[=])($|[ ]*)",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#Indent"
            }
          ]
        },
        "2": {
          "tag": "controlKeyword",
          "name": "keyword.control.definition.object.sd"
        },
        "3": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        },
        "4": {
          "patterns": [
            {
              "include": "#TargetAccessPath"
            }
          ]
        },
        "5": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        },
        "6": {
          "patterns": [
            {
              "include": "#DeclarationAssignOperator"
            }
          ]
        },
        "7": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        }
      },
      "patterns": [
        {
          "include": "#ValueText"
        }
      ],
      "end": "([;])|(?=$)",
      "endCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#PunctuationSemicolon"
            }
          ]
        }
      }
    },
    "DefineObject": {
      "tag": "meta",
      "name": "meta.definition.type.sd",
      "begin": "^([ ]*)(define)($|[ ]+)([^:]*?)($|[ ]*)($|[:])($|[ ]*)($|(?!.+)$)",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#Indent"
            }
          ]
        },
        "2": {
          "tag": "controlKeyword",
          "name": "keyword.control.definition.object.sd"
        },
        "3": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        },
        "4": {
          "patterns": [
            {
              "include": "#TargetAccessPath"
            }
          ]
        },
        "5": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        },
        "6": {
          "patterns": [
            {
              "include": "#DeclarationAssignOperator"
            }
          ]
        },
        "7": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        }
      },
      "patterns": [
        {
          "include": "#Comment"
        },
        {
          "include": "#StructField"
        },
        {
          "include": "#Unknown"
        }
      ],
      "end": "(?=^[ ]?(?=$|[/][/]))|(?=^(?!\\1(?:[ ]{2,})))"
    },
    "DefineInvalid": {
      "tag": "meta",
      "name": "meta.define.invalid.sd",
      "begin": "^([ ]*)(define)($|[ ]+)($|.+$)",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#Indent"
            }
          ]
        },
        "2": {
          "tag": "controlKeyword",
          "name": "keyword.control.definition.define.sd"
        },
        "3": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        },
        "4": {
          "patterns": [
            {
              "include": "#Unknown"
            }
          ]
        }
      },
      "patterns": [
        {
          "include": "#Newline"
        },
        {
          "include": "#Unknown"
        }
      ],
      "end": "(?=^(?!\\1(?:[ ]{2,})))"
    },
    "StructField": {
      "emit": true,
      "patterns": [
        {
          "include": "#StructMapItem"
        },
        {
          "include": "#StructScalarItem"
        },
        {
          "include": "#StructMapProperty"
        },
        {
          "include": "#StructScalarProperty"
        },
        {
          "include": "#Newline"
        },
        {
          "include": "#StructBlankProperty"
        }
      ]
    },
    "StructBlankProperty": {
      "match": "(\\s+$)",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#Indent"
            }
          ]
        }
      }
    },
    "StructMapItem": {
      "tag": "meta",
      "name": "meta.definition.struct.item.map.sd",
      "begin": "^([ ]*)([-])($|[ ]+$)",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#Indent"
            }
          ]
        },
        "2": {
          "tag": "keyword",
          "name": "keyword.operator.expression.array.sd"
        },
        "3": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        }
      },
      "patterns": [
        {
          "include": "#Comment"
        },
        {
          "include": "#StructMapItem"
        },
        {
          "include": "#StructScalarItem"
        },
        {
          "include": "#StructMapProperty"
        },
        {
          "include": "#StructScalarProperty"
        },
        {
          "include": "#Newline"
        },
        {
          "include": "#Unknown"
        }
      ],
      "end": "(?=^(?!\\1(?:[ ]{2,})))"
    },
    "StructScalarItem": {
      "tag": "meta",
      "name": "meta.definition.struct.item.scalar.sd",
      "begin": "^([ ]*)([-])($|[ ]+)(?=.*\\S.*$)",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#Indent"
            }
          ]
        },
        "2": {
          "tag": "keyword",
          "name": "keyword.operator.expression.array.sd"
        },
        "3": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        }
      },
      "patterns": [
        {
          "include": "#ValueText"
        }
      ],
      "end": "(?=$)"
    },
    "StructMapProperty": {
      "tag": "meta",
      "name": "meta.definition.struct.property.map.sd",
      "begin": "^([ ]*)([^\\s:]+)($|[ ]*)($|[:])($|[ ]*$)",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#Indent"
            }
          ]
        },
        "2": {
          "patterns": [
            {
              "include": "#DeclarationProperty"
            }
          ]
        },
        "3": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        },
        "4": {
          "tag": "punctuation",
          "name": "punctuation.separator.colon.sd"
        },
        "5": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        }
      },
      "patterns": [
        {
          "include": "#Comment"
        },
        {
          "include": "#StructMapItem"
        },
        {
          "include": "#StructScalarItem"
        },
        {
          "include": "#StructMapProperty"
        },
        {
          "include": "#StructScalarProperty"
        },
        {
          "include": "#Newline"
        },
        {
          "include": "#StructBlankProperty"
        },
        {
          "include": "#Unknown"
        }
      ],
      "end": "(?=^(?!\\1(?:[ ]{2,})))"
    },
    "StructScalarProperty": {
      "tag": "meta",
      "name": "meta.definition.struct.property.scalar.sd",
      "begin": "^([ ]*)([^\\s:]+)($|[ ]*)(?:($|[=])($|[ ]*)|($|[:])($|[ ]*)(?=.*\\S.*$))",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#Indent"
            }
          ]
        },
        "2": {
          "patterns": [
            {
              "include": "#DeclarationProperty"
            }
          ]
        },
        "3": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        },
        "4": {
          "tag": "updateOperator",
          "name": "keyword.operator.assignment.sd"
        },
        "5": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        },
        "6": {
          "tag": "updateOperator",
          "name": "keyword.operator.assignment.sd"
        },
        "7": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        }
      },
      "patterns": [
        {
          "include": "#ValueText"
        }
      ],
      "end": "(?=$)"
    },
    "Break": {
      "tag": "meta",
      "name": "meta.break.sd",
      "match": "^([ ]*)(break)($|[ ]+$|[ ]*[;])",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#Indent"
            }
          ]
        },
        "2": {
          "tag": "controlKeyword",
          "name": "keyword.control.flow.break.sd"
        },
        "3": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        }
      }
    },
    "Continue": {
      "tag": "meta",
      "name": "meta.continue.sd",
      "match": "^([ ]*)(continue)($|[ ]+$|[ ]*[;])",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#Indent"
            }
          ]
        },
        "2": {
          "tag": "controlKeyword",
          "name": "keyword.control.flow.continue.sd"
        },
        "3": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        }
      }
    },
    "Return": {
      "patterns": [
        {
          "include": "#ReturnVoid"
        },
        {
          "include": "#ReturnValue"
        }
      ]
    },
    "ReturnVoid": {
      "tag": "meta",
      "name": "meta.return.sd",
      "match": "^([ ]*)(return)($|[ ]+$|[ ]*[;])",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#Indent"
            }
          ]
        },
        "2": {
          "tag": "controlKeyword",
          "name": "keyword.control.flow.return.sd"
        },
        "3": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        }
      }
    },
    "ReturnValue": {
      "tag": "meta",
      "name": "meta.return.sd",
      "begin": "^([ ]*)(return)($|[ ]+)",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#Indent"
            }
          ]
        },
        "2": {
          "tag": "keyword",
          "name": "keyword.control.flow.return.sd"
        },
        "3": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        }
      },
      "patterns": [
        {
          "include": "#ParentheticalExpression"
        },
        {
          "include": "#NonParentheticalExpression"
        }
      ],
      "end": "([;])|(?=$)",
      "endCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#PunctuationSemicolon"
            }
          ]
        }
      }
    },
    "ParentheticalExpression": {
      "name": "meta.expression.parenthetical.sd",
      "brackets": true,
      "begin": "([(])",
      "beginCaptures": {
        "1": {
          "tag": "paren",
          "name": "meta.brace.round.open.sd"
        }
      },
      "patterns": [
        {
          "include": "#Expression"
        }
      ],
      "end": "([)])",
      "endCaptures": {
        "1": {
          "tag": "paren",
          "name": "meta.brace.round.close.sd"
        }
      }
    },
    "NonParentheticalExpression": {
      "name": "meta.expression.nonparenthetical.sd",
      "match": "(.+$)",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#Expression"
            }
          ]
        }
      }
    },
    "Delete": {
      "tag": "meta",
      "name": "meta.delete.sd",
      "begin": "^([ ]*)(delete)($|[ ]+)",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#Indent"
            }
          ]
        },
        "2": {
          "tag": "keyword",
          "name": "keyword.operator.expression.delete.sd"
        },
        "3": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        }
      },
      "patterns": [
        {
          "include": "#TargetAccessPath"
        }
      ],
      "end": "($)"
    },
    "Branch": {
      "patterns": [
        {
          "include": "#If"
        },
        {
          "include": "#Elseif"
        },
        {
          "include": "#Else"
        }
      ]
    },
    "If": {
      "tag": "meta",
      "name": "meta.branch.if.sd",
      "begin": "^([ ]*)(if)($|[ ]+)",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#Indent"
            }
          ]
        },
        "2": {
          "tag": "controlKeyword",
          "name": "keyword.control.branch.if.sd"
        },
        "3": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        }
      },
      "patterns": [
        {
          "include": "#Comment"
        },
        {
          "include": "#Logic"
        },
        {
          "include": "#Jump"
        },
        {
          "include": "#Condition"
        },
        {
          "include": "#Newline"
        },
        {
          "include": "#Unknown"
        }
      ],
      "end": "(?=^(?!\\1(?:[ ]{2,}|elseif|else)))"
    },
    "Elseif": {
      "tag": "meta",
      "name": "meta.branch.elseif.sd",
      "begin": "^([ ]*)(elseif)($|[ ]+)",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#Indent"
            }
          ]
        },
        "2": {
          "tag": "controlKeyword",
          "name": "keyword.control.branch.elseif.sd"
        },
        "3": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        }
      },
      "patterns": [
        {
          "include": "#Comment"
        },
        {
          "include": "#Logic"
        },
        {
          "include": "#Jump"
        },
        {
          "include": "#Condition"
        },
        {
          "include": "#Newline"
        },
        {
          "include": "#Unknown"
        }
      ],
      "end": "(?=^(?!\\1(?:[ ]{2,})))"
    },
    "Else": {
      "tag": "meta",
      "name": "meta.branch.else.sd",
      "begin": "^([ ]*)(else)($|[ ]*)($|[:])",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#Indent"
            }
          ]
        },
        "2": {
          "tag": "controlKeyword",
          "name": "keyword.control.branch.else.sd"
        },
        "3": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        },
        "4": {
          "tag": "punctuation",
          "name": "punctuation.separator.colon.sd"
        }
      },
      "patterns": [
        {
          "include": "#Comment"
        },
        {
          "include": "#Logic"
        },
        {
          "include": "#Jump"
        },
        {
          "include": "#Condition"
        },
        {
          "include": "#Newline"
        },
        {
          "include": "#Unknown"
        }
      ],
      "end": "(?=^(?!\\1(?:[ ]{2,})))"
    },
    "Repeat": {
      "patterns": [
        {
          "include": "#While"
        },
        {
          "include": "#Until"
        },
        {
          "include": "#For"
        }
      ]
    },
    "While": {
      "tag": "meta",
      "name": "meta.repeat.while.sd",
      "begin": "^([ ]*)(while)($|[ ]+)",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#Indent"
            }
          ]
        },
        "2": {
          "tag": "controlKeyword",
          "name": "keyword.control.repeat.while.sd"
        },
        "3": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        }
      },
      "patterns": [
        {
          "include": "#Comment"
        },
        {
          "include": "#Logic"
        },
        {
          "include": "#Jump"
        },
        {
          "include": "#Condition"
        },
        {
          "include": "#Newline"
        },
        {
          "include": "#Unknown"
        }
      ],
      "end": "(?=^(?!\\1(?:[ ]{2,})))"
    },
    "Until": {
      "tag": "meta",
      "name": "meta.repeat.until.sd",
      "begin": "^([ ]*)(until)($|[ ]+)",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#Indent"
            }
          ]
        },
        "2": {
          "tag": "controlKeyword",
          "name": "keyword.control.repeat.while.sd"
        },
        "3": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        }
      },
      "patterns": [
        {
          "include": "#Comment"
        },
        {
          "include": "#Logic"
        },
        {
          "include": "#Jump"
        },
        {
          "include": "#Condition"
        },
        {
          "include": "#Newline"
        },
        {
          "include": "#Unknown"
        }
      ],
      "end": "(?=^(?!\\1(?:[ ]{2,})))"
    },
    "For": {
      "tag": "meta",
      "name": "meta.repeat.for.sd",
      "begin": "^([ ]*)(for)($|[ ]+)",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#Indent"
            }
          ]
        },
        "2": {
          "tag": "controlKeyword",
          "name": "keyword.control.repeat.while.sd"
        },
        "3": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        }
      },
      "patterns": [
        {
          "include": "#Comment"
        },
        {
          "include": "#Logic"
        },
        {
          "include": "#Jump"
        },
        {
          "include": "#Condition"
        },
        {
          "include": "#Newline"
        },
        {
          "include": "#Unknown"
        }
      ],
      "end": "(?=^(?!\\1(?:[ ]{2,})))"
    },
    "Condition": {
      "patterns": [
        {
          "include": "#ParentheticalCondition"
        },
        {
          "include": "#NonParentheticalCondition"
        }
      ]
    },
    "ParentheticalCondition": {
      "name": "meta.condition.parenthetical.sd",
      "brackets": true,
      "begin": "([(])",
      "beginCaptures": {
        "1": {
          "tag": "paren",
          "name": "meta.brace.round.open.sd"
        }
      },
      "patterns": [
        {
          "include": "#Expression"
        }
      ],
      "end": "([)])",
      "endCaptures": {
        "1": {
          "tag": "paren",
          "name": "meta.brace.round.close.sd"
        }
      }
    },
    "NonParentheticalCondition": {
      "name": "meta.condition.nonparenthetical.sd",
      "match": "(.+?)([:])($|[ ]*)($|.+)|(.+$)",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#Expression"
            }
          ]
        },
        "2": {
          "tag": "punctuation",
          "name": "punctuation.separator.colon.sd"
        },
        "3": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        },
        "4": {
          "patterns": [
            {
              "include": "#Unknown"
            }
          ]
        },
        "5": {
          "patterns": [
            {
              "include": "#Expression"
            }
          ]
        }
      }
    },
    "Call": {
      "tag": "meta",
      "name": "meta.call.sd",
      "begin": "^([ ]*)(do)($|[ ]+)",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#Indent"
            }
          ]
        },
        "2": {
          "tag": "keyword",
          "name": "keyword.operator.expression.call.sd"
        },
        "3": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        }
      },
      "patterns": [
        {
          "include": "#AccessPath"
        }
      ],
      "end": "([;])|(?=$)",
      "endCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#PunctuationSemicolon"
            }
          ]
        }
      }
    },
    "FunctionAccessor": {
      "begin": "([.]|[?][.](?!\\s*[0-9]))?([_a-zA-Z][_a-zA-Z0-9]*)(?=[(])",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#PunctuationAccessor"
            }
          ]
        },
        "2": {
          "patterns": [
            {
              "include": "#FunctionName"
            }
          ]
        }
      },
      "patterns": [
        {
          "include": "#CallParameters"
        }
      ],
      "end": "([;])|(?=$|[^(])",
      "endCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#PunctuationSemicolon"
            }
          ]
        }
      }
    },
    "Store": {
      "tag": "meta",
      "name": "meta.assign.sd",
      "begin": "^([ ]*)(store)($|[ ]+)(.*?)([ ]*)($|[!?~^|&<>%\\/*+-]{0,2}[=])($|[ ]*)",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#Indent"
            }
          ]
        },
        "2": {
          "tag": "keyword",
          "name": "keyword.operator.expression.assign.sd"
        },
        "3": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        },
        "4": {
          "patterns": [
            {
              "include": "#TargetAccessPath"
            }
          ]
        },
        "5": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        },
        "6": {
          "patterns": [
            {
              "include": "#DeclarationAssignOperator"
            }
          ]
        },
        "7": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        }
      },
      "patterns": [
        {
          "include": "#ValueText"
        }
      ],
      "end": "($)"
    },
    "Assign": {
      "tag": "meta",
      "name": "meta.assign.sd",
      "begin": "^([ ]*)(set)($|[ ]+)(.*?)([ ]*)($|[!?~^|&<>%\\/*+-]{0,2}[=])($|[ ]*)",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#Indent"
            }
          ]
        },
        "2": {
          "tag": "keyword",
          "name": "keyword.operator.expression.assign.sd"
        },
        "3": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        },
        "4": {
          "patterns": [
            {
              "include": "#TargetAccessPath"
            }
          ]
        },
        "5": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        },
        "6": {
          "patterns": [
            {
              "include": "#DeclarationAssignOperator"
            }
          ]
        },
        "7": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        }
      },
      "patterns": [
        {
          "include": "#ValueText"
        }
      ],
      "end": "($)"
    },
    "TargetAccessPath": {
      "emit": true,
      "patterns": [
        {
          "include": "#AccessPath"
        },
        {
          "include": "#IllegalExpression"
        }
      ]
    },
    "AssignOperator": {
      "emit": true,
      "patterns": [
        {
          "include": "#AssignArithmeticOperator"
        },
        {
          "include": "#AssignBitwiseOperator"
        },
        {
          "include": "#AssignEqualOperator"
        },
        {
          "include": "#AssignMultiplyOperator"
        },
        {
          "include": "#AssignDivideOperator"
        },
        {
          "include": "#AssignColonOperator"
        },
        {
          "include": "#IllegalExpression"
        }
      ]
    },
    "ValueText": {
      "emit": true,
      "patterns": [
        {
          "include": "#Expression"
        }
      ]
    },
    "AccessPath": {
      "begin": "(?=[_a-zA-Z])",
      "patterns": [
        {
          "include": "#AccessPart"
        }
      ],
      "end": "(?=$|[^_a-zA-Z\\[?!.])"
    },
    "AccessPart": {
      "emit": true,
      "patterns": [
        {
          "include": "#ArrayLiteral"
        },
        {
          "include": "#FunctionAccessor"
        },
        {
          "include": "#PropertyAccessor"
        },
        {
          "include": "#NamespaceAccessor"
        },
        {
          "include": "#VariableName"
        },
        {
          "include": "#PunctuationAccessor"
        }
      ]
    },
    "DeclarationType": {
      "emit": true,
      "patterns": [
        {
          "include": "#TypeIdentifier"
        },
        {
          "include": "#Unknown"
        }
      ]
    },
    "DeclarationName": {
      "emit": true,
      "patterns": [
        {
          "include": "#VariableName"
        },
        {
          "include": "#Unknown"
        }
      ]
    },
    "DeclarationProperty": {
      "emit": true,
      "patterns": [
        {
          "include": "#PropertyName"
        },
        {
          "include": "#Unknown"
        }
      ]
    },
    "DeclarationAssignOperator": {
      "emit": true,
      "patterns": [
        {
          "include": "#AssignOperator"
        }
      ]
    },
    "Jump": {
      "tag": "meta",
      "name": "meta.jump.sd",
      "match": "^([ ]*)((?=[-][>]).+$)",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#Indent"
            }
          ]
        },
        "2": {
          "patterns": [
            {
              "include": "#JumpTo"
            }
          ]
        }
      }
    },
    "JumpTo": {
      "begin": "([-][>])($|[ ]+)",
      "beginCaptures": {
        "1": {
          "tag": "function(variableName)",
          "name": "entity.name.function.jump.sd"
        },
        "2": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        }
      },
      "patterns": [
        {
          "include": "#JumpToSection"
        }
      ],
      "end": "($|[ ]*$)",
      "endCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        }
      }
    },
    "JumpToSection": {
      "tag": "heading",
      "name": "keyword.control.jump.name.sd",
      "match": "(.+)$",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#PlainText"
            },
            {
              "include": "#InlineTemplateStringConditionalSubstitution"
            }
          ]
        }
      }
    },
    "Choice": {
      "name": "entity.choice.sd",
      "match": "^([+])($|[ ]+)($|.*?)($|[ ]+)($|[-][>].*$)((?:\\r\\n|\\r|\\n)?)",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#ChoiceOperator"
            }
          ]
        },
        "2": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        },
        "3": {
          "patterns": [
            {
              "include": "#ChoiceContent"
            }
          ]
        },
        "4": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        },
        "5": {
          "patterns": [
            {
              "include": "#JumpTo"
            }
          ]
        },
        "6": {
          "patterns": [
            {
              "include": "#Newline"
            }
          ]
        }
      }
    },
    "ChoiceOperator": {
      "tag": "keyword",
      "name": "keyword.operator.expression.list.sd",
      "match": "(.+)"
    },
    "ChoiceContent": {
      "tag": "string",
      "name": "string.choice.sd",
      "match": "(.+)",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#DisplayText"
            }
          ]
        }
      }
    },
    "Image": {
      "tag": "macroName",
      "name": "meta.image.sd",
      "match": "^([ ]*)(\\[\\[)(.*?)(\\]\\])($|[ ]*$)((?:\\r\\n|\\r|\\n)?)",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#Indent"
            }
          ]
        },
        "2": {
          "tag": "keyword",
          "name": "keyword.operator.expression.begin.image.sd"
        },
        "3": {
          "patterns": [
            {
              "include": "#AssetCommand"
            }
          ]
        },
        "4": {
          "tag": "keyword",
          "name": "keyword.operator.expression.end.image.sd"
        },
        "5": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        },
        "6": {
          "patterns": [
            {
              "include": "#Newline"
            }
          ]
        }
      }
    },
    "InlineImage": {
      "tag": "macroName",
      "name": "meta.image.sd",
      "match": "(\\[\\[)((?:\\\\.|[^\\]])*)(\\]\\])",
      "captures": {
        "1": {
          "tag": "keyword",
          "name": "keyword.operator.expression.begin.image.sd"
        },
        "2": {
          "patterns": [
            {
              "include": "#AssetCommand"
            }
          ]
        },
        "3": {
          "tag": "keyword",
          "name": "keyword.operator.expression.end.image.sd"
        }
      }
    },
    "Audio": {
      "tag": "macroName",
      "name": "meta.audio.sd",
      "match": "^([ ]*)([(][(])(.*?)([)][)])($|[ ]*$)((?:\\r\\n|\\r|\\n)?)",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#Indent"
            }
          ]
        },
        "2": {
          "tag": "keyword",
          "name": "keyword.operator.expression.begin.audio.sd"
        },
        "3": {
          "patterns": [
            {
              "include": "#AssetCommand"
            }
          ]
        },
        "4": {
          "tag": "keyword",
          "name": "keyword.operator.expression.end.audio.sd"
        },
        "5": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        },
        "6": {
          "patterns": [
            {
              "include": "#Newline"
            }
          ]
        }
      }
    },
    "InlineAudio": {
      "tag": "macroName",
      "name": "meta.audio.sd",
      "match": "([(][(])((?:\\\\.|[^)])*)([)][)])",
      "captures": {
        "1": {
          "tag": "keyword",
          "name": "keyword.operator.expression.begin.audio.sd"
        },
        "2": {
          "patterns": [
            {
              "include": "#AssetCommand"
            }
          ]
        },
        "3": {
          "tag": "keyword",
          "name": "keyword.operator.expression.end.audio.sd"
        }
      }
    },
    "AssetCommand": {
      "match": "(?:(\\b(?:show|hide|play|stop|fade)\\b)([ ]*)($|[_a-zA-Z][_a-zA-Z0-9]*\\b))?($|[ ]*\\S*)(.*)",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#AssetControl"
            }
          ]
        },
        "2": {
          "patterns": [
            {
              "include": "#AssetTargetSeparator"
            }
          ]
        },
        "3": {
          "patterns": [
            {
              "include": "#AssetTarget"
            }
          ]
        },
        "4": {
          "patterns": [
            {
              "include": "#AssetNames"
            }
          ]
        },
        "5": {
          "patterns": [
            {
              "include": "#AssetArgs"
            }
          ]
        }
      }
    },
    "AssetKeyword": {
      "tag": "keyword",
      "name": "keyword.asset.arguments.keyword.sd",
      "match": "(\\b(?:to|after|with|over|now|loop|noloop|mute|unmute)\\b)"
    },
    "AssetControl": {
      "tag": "controlKeyword",
      "name": "keyword.control.asset.action.sd",
      "match": "(.+)"
    },
    "AssetTargetSeparator": {
      "tag": "typeName",
      "name": "entity.name.type.asset.target.separator.sd",
      "match": "([ ]+)",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        }
      }
    },
    "AssetTarget": {
      "tag": "typeName",
      "name": "entity.name.type.asset.target.sd",
      "match": "(.+)"
    },
    "AssetNames": {
      "match": "(.+)",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#Whitespace"
            },
            {
              "include": "#AssetName"
            },
            {
              "include": "#CombineOperator"
            }
          ]
        }
      }
    },
    "AssetName": {
      "tag": "variableName",
      "name": "variable.other.constant.asset.name.sd",
      "match": "([_a-zA-Z][_a-zA-Z0-9]*)"
    },
    "CombineOperator": {
      "tag": "propertyName",
      "name": "variable.other.property.combine.sd",
      "match": "([~+-]+)"
    },
    "AssetArgs": {
      "match": "(.+)",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#Whitespace"
            },
            {
              "include": "#AssetKeyword"
            },
            {
              "include": "#NumericLiteral"
            },
            {
              "include": "#AssetEffect"
            },
            {
              "include": "#TimeValue"
            }
          ]
        }
      }
    },
    "AssetEffect": {
      "tag": "string",
      "name": "string.asset.sd",
      "match": "([_a-zA-Z][_a-zA-Z0-9]*)"
    },
    "TimeValue": {
      "tag": "number",
      "name": "constant.numeric.time.sd",
      "match": "((?:\\d*[.])?\\d+)(ms|s)",
      "captures": {
        "1": {
          "tag": "number",
          "name": "constant.numeric.time.amount.sd"
        },
        "2": {
          "tag": "number",
          "name": "constant.numeric.time.unit.sd"
        }
      }
    },
    "Transition": {
      "tag": "labelName",
      "name": "keyword.control.transition.sd",
      "match": "^(?:([%])($|[ ]+)($|.+?)|((?:[^\\p{Ll}\\s]+\\b[ ]+)*(?:(?:[^\\p{Ll}\\s]+\\b[ ]+)+TO[:]|TO BLACK[:.]|FADE OUT[:.]|FADE IN[:.])))($|[ ]*$)",
      "captures": {
        "1": {
          "tag": "punctuation",
          "name": "punctuation.transition.mark.sd"
        },
        "2": {
          "tag": "punctuation",
          "name": "punctuation.transition.mark.sd"
        },
        "3": {
          "patterns": [
            {
              "include": "#DisplayText"
            }
          ]
        },
        "4": {
          "patterns": [
            {
              "include": "#DisplayText"
            }
          ]
        },
        "5": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        }
      }
    },
    "Scene": {
      "tag": "regexp",
      "name": "string.regexp.scene.sd",
      "match": "^(?:([$])($|[ ]+)($|.+?)|((?:INT[.]?[\\/]EXT[.]|INT[.]|EXT[.]|CLOSEUP[ ]*[-])(?:$|[ ]+)(?:$|.+?)))($|[ ]*$)",
      "captures": {
        "1": {
          "tag": "punctuation",
          "name": "punctuation.scene.mark.sd"
        },
        "2": {
          "tag": "punctuation",
          "name": "punctuation.scene.mark.sd"
        },
        "3": {
          "patterns": [
            {
              "include": "#DisplayText"
            }
          ]
        },
        "4": {
          "patterns": [
            {
              "include": "#DisplayText"
            }
          ]
        },
        "5": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        }
      }
    },
    "SceneLocationTime": {
      "match": "INT[.]?[\\/]EXT[.]|INT[.]|EXT[.][ ]*(.*?)[ ]+[-][ ]+(.*?)[ ]*$"
    },
    "Dialogue": {
      "name": "entity.dialogue.sd",
      "begin": "^(?:([*])($|[ ]+)(.+?)|([\\p{Lu}][^\\p{Ll}\\r\\n^%()]*[\\p{Lu}?]))($|[ ]*)([(][^)]*(?:$|[)]))?($|[ ]*)(\\^)?($|[ ]*$)((?:\\r\\n|\\r|\\n)?)",
      "beginCaptures": {
        "1": {
          "tag": "keyword",
          "name": "keyword.dialogue.mark.sd"
        },
        "2": {
          "tag": "keyword",
          "name": "keyword.dialogue.mark.sd"
        },
        "3": {
          "patterns": [
            {
              "include": "#DialogueCharacterName"
            }
          ]
        },
        "4": {
          "patterns": [
            {
              "include": "#DialogueCharacterName"
            }
          ]
        },
        "5": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        },
        "6": {
          "patterns": [
            {
              "include": "#DialogueCharacterParenthetical"
            }
          ]
        },
        "7": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        },
        "8": {
          "patterns": [
            {
              "include": "#DialogueCharacterSimultaneous"
            }
          ]
        },
        "9": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        },
        "10": {
          "patterns": [
            {
              "include": "#Newline"
            }
          ]
        }
      },
      "patterns": [
        {
          "include": "#Checkpoint"
        },
        {
          "include": "#Choice"
        },
        {
          "include": "#DialogueBox"
        }
      ],
      "end": "^[ ]?(?=$|[/][/])"
    },
    "DialogueCharacterName": {
      "tag": "typeName",
      "name": "entity.name.type.dialogue.character.name.sd",
      "match": "(.+$)"
    },
    "DialogueCharacterParenthetical": {
      "tag": "escape",
      "name": "constant.character.escape.dialogue.character.parenthetical.sd",
      "match": "(.+$)"
    },
    "DialogueCharacterSimultaneous": {
      "tag": "escape",
      "name": "constant.character.escape.dialogue.character.simultaneous.sd",
      "match": "(.+$)"
    },
    "DialogueBox": {
      "tag": "string",
      "name": "string.dialogue.line.sd",
      "begin": "^(?=.+$)",
      "patterns": [
        {
          "include": "#Comment"
        },
        {
          "include": "#Image"
        },
        {
          "include": "#Audio"
        },
        {
          "include": "#DialogueLineParenthetical"
        },
        {
          "include": "#BoxLineContinue"
        },
        {
          "include": "#BoxLineComplete"
        }
      ],
      "end": "(?=^[ ]?(?=$|[/][/]))|(\\r\\n|\\r|\\n)",
      "endCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#Newline"
            }
          ]
        }
      }
    },
    "DialogueLineParenthetical": {
      "tag": "tagName",
      "name": "constant.character.escape.sd",
      "match": "^([ ]*)([(][^()]*[)])($|[ ]*$)((?:\\r\\n|\\r|\\n)?)",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#Indent"
            }
          ]
        },
        "2": {
          "patterns": [
            {
              "include": "#DialogueLineParentheticalContent"
            }
          ]
        },
        "3": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        },
        "4": {
          "patterns": [
            {
              "include": "#Newline"
            }
          ]
        }
      }
    },
    "DialogueLineParentheticalContent": {
      "tag": "escape",
      "name": "constant.character.escape.sd",
      "match": "(.+)",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#InlineText"
            }
          ]
        }
      }
    },
    "BoxLineContinue": {
      "match": "((?:[@].*|.*[ ])$(?:\\r\\n|\\r|\\n)?)",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#DisplayText"
            }
          ]
        }
      }
    },
    "BoxLineComplete": {
      "match": "(.*$)",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#DisplayText"
            }
          ]
        }
      }
    },
    "ExplicitAction": {
      "tag": "content",
      "name": "entity.paragraph.text.action.explicit.sd",
      "begin": "^([!])($|[ ]+)(?=.+$)",
      "beginCaptures": {
        "1": {
          "tag": "punctuation",
          "name": "keyword.operator.expression.action.explicit.sd"
        },
        "2": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        }
      },
      "patterns": [
        {
          "include": "#Checkpoint"
        },
        {
          "include": "#Choice"
        },
        {
          "include": "#ActionBox"
        }
      ],
      "end": "^[ ]?(?=$|[/][/])"
    },
    "ImplicitAction": {
      "tag": "content",
      "name": "entity.paragraph.text.action.implicit.sd",
      "begin": "^(?=.+$)",
      "patterns": [
        {
          "include": "#Checkpoint"
        },
        {
          "include": "#Choice"
        },
        {
          "include": "#ActionBox"
        }
      ],
      "end": "^[ ]?(?=$|[/][/])"
    },
    "ActionBox": {
      "tag": "content",
      "name": "markup.raw.action.line.sd",
      "begin": "(?=.+$)",
      "patterns": [
        {
          "include": "#Comment"
        },
        {
          "include": "#Image"
        },
        {
          "include": "#Audio"
        },
        {
          "include": "#BoxLineContinue"
        },
        {
          "include": "#BoxLineComplete"
        }
      ],
      "end": "(?=^[ ]?(?=$|[/][/]))|(\\r\\n|\\r|\\n)",
      "endCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#Newline"
            }
          ]
        }
      }
    },
    "DisplayText": {
      "name": "entity.display.sd",
      "match": "(?:([!]?(?:\\d+|[_a-zA-Z][_a-zA-Z0-9]*))?([?][:])([ ]*))?($|.+?(?=[@])|.+$(?:\\r\\n|\\r|\\n)?)",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#DisplayTextPrerequisiteValue"
            }
          ]
        },
        "2": {
          "patterns": [
            {
              "include": "#DisplayTextPrerequisiteOperator"
            }
          ]
        },
        "3": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        },
        "4": {
          "patterns": [
            {
              "include": "#DisplayTextContent"
            }
          ]
        }
      }
    },
    "TargetName": {
      "tag": "typeName",
      "name": "entity.name.type.text.target.sd",
      "match": "(.+)"
    },
    "DisplayTextPrerequisiteValue": {
      "tag": "variableName",
      "name": "variable.other.constant.sd",
      "match": "(.+)"
    },
    "DisplayTextPrerequisiteOperator": {
      "tag": "keyword",
      "name": "keyword.operator.expression.prerequisite.sd",
      "match": "(.+)"
    },
    "DisplayTextContent": {
      "emit": true,
      "patterns": [
        {
          "include": "#InlineImage"
        },
        {
          "include": "#InlineAudio"
        },
        {
          "include": "#DisplayString"
        }
      ]
    },
    "DisplayString": {
      "emit": true,
      "patterns": [
        {
          "include": "#InlineText"
        }
      ]
    },
    "InlineText": {
      "emit": true,
      "patterns": [
        {
          "include": "#Escape"
        },
        {
          "include": "#InlineTemplateStringSubstitution"
        },
        {
          "include": "#Styling"
        },
        {
          "include": "#EmphasisSurround"
        },
        {
          "include": "#EmphasisStart"
        },
        {
          "include": "#Pause"
        },
        {
          "include": "#PlainText"
        }
      ]
    },
    "InnerText": {
      "patterns": [
        {
          "include": "#Escape"
        },
        {
          "include": "#InlineTemplateStringSubstitution"
        },
        {
          "include": "#Styling"
        },
        {
          "include": "#EmphasisSurround"
        },
        {
          "include": "#Pause"
        },
        {
          "include": "#PlainText"
        }
      ]
    },
    "PlainText": {
      "emit": true,
      "patterns": [
        {
          "include": "#Newline"
        },
        {
          "include": "#Space"
        },
        {
          "include": "#Word"
        },
        {
          "include": "#EmDash"
        },
        {
          "include": "#Punctuation"
        }
      ]
    },
    "Word": {
      "tag": "content",
      "name": "markup.raw.text.sd",
      "match": "([\\p{L}\\p{N}\\p{Mn}']+)"
    },
    "Space": {
      "tag": "content",
      "name": "markup.raw.space.sd",
      "match": "([ ])"
    },
    "EmDash": {
      "tag": "content",
      "name": "markup.raw.punctuation.sd",
      "match": "([-][-])"
    },
    "Newline": {
      "tag": "content",
      "name": "markup.raw.whitespace.newline.sd",
      "match": "(\\r\\n|\\r|\\n)"
    },
    "Punctuation": {
      "tag": "content",
      "name": "markup.raw.punctuation.sd",
      "match": "(.)"
    },
    "Pause": {
      "tag": "special(content)",
      "name": "markup.raw.whitespace.pause.sd",
      "match": "(?=[ ][ ])[ ]+|[ ]+$"
    },
    "Escape": {
      "tag": "escape",
      "name": "constant.character.escape.sd",
      "match": "\\\\[-`*_#+.!(){}\\[\\]\\\\>|]"
    },
    "Styling": {
      "patterns": [
        {
          "include": "#Underline"
        },
        {
          "include": "#BoldItalic"
        },
        {
          "include": "#Bold"
        },
        {
          "include": "#Italic"
        },
        {
          "include": "#Centered"
        }
      ]
    },
    "StylingMark": {
      "match": "([*_|]+)",
      "captures": {
        "1": {
          "tag": "bracket",
          "name": "punctuation.definition.styling.sd"
        }
      }
    },
    "BoldItalic": {
      "tag": "strong",
      "name": "markup.bold.sd",
      "match": "([*][*]+)([*].+?[*])(\\1)",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#StylingMark"
            }
          ]
        },
        "2": {
          "patterns": [
            {
              "include": "#Italic"
            }
          ]
        },
        "3": {
          "patterns": [
            {
              "include": "#StylingMark"
            }
          ]
        }
      }
    },
    "Bold": {
      "tag": "strong",
      "name": "markup.bold.sd",
      "match": "([*][*](?![*]))(.+?)(\\1)",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#StylingMark"
            }
          ]
        },
        "2": {
          "patterns": [
            {
              "include": "#InnerText"
            }
          ]
        },
        "3": {
          "patterns": [
            {
              "include": "#StylingMark"
            }
          ]
        }
      }
    },
    "Italic": {
      "tag": "emphasis",
      "name": "markup.italic.sd",
      "match": "([*](?![*]))(.+?)(\\1)",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#StylingMark"
            }
          ]
        },
        "2": {
          "patterns": [
            {
              "include": "#InnerText"
            }
          ]
        },
        "3": {
          "patterns": [
            {
              "include": "#StylingMark"
            }
          ]
        }
      }
    },
    "Underline": {
      "tag": "link",
      "name": "markup.underline.sd",
      "match": "([_]+)(.+?)(\\1)",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#StylingMark"
            }
          ]
        },
        "2": {
          "patterns": [
            {
              "include": "#InnerText"
            }
          ]
        },
        "3": {
          "patterns": [
            {
              "include": "#StylingMark"
            }
          ]
        }
      }
    },
    "Centered": {
      "tag": "monospace",
      "name": "markup.other.centered.sd",
      "match": "([|]+)(.+?)(\\1)",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#StylingMark"
            }
          ]
        },
        "2": {
          "patterns": [
            {
              "include": "#InnerText"
            }
          ]
        },
        "3": {
          "patterns": [
            {
              "include": "#StylingMark"
            }
          ]
        }
      }
    },
    "EmphasisStart": {
      "patterns": [
        {
          "include": "#EmphasisCaretStart"
        },
        {
          "include": "#EmphasisTildeStart"
        },
        {
          "include": "#EmphasisEqualStart"
        },
        {
          "include": "#EmphasisAngleRightStart"
        },
        {
          "include": "#EmphasisAngleLeftStart"
        },
        {
          "include": "#EmphasisColonStart"
        }
      ]
    },
    "EmphasisSurround": {
      "patterns": [
        {
          "include": "#EmphasisCaretSurround"
        },
        {
          "include": "#EmphasisTildeSurround"
        },
        {
          "include": "#EmphasisEqualSurround"
        },
        {
          "include": "#EmphasisAngleRightSurround"
        },
        {
          "include": "#EmphasisAngleLeftSurround"
        },
        {
          "include": "#EmphasisColonSurround"
        }
      ]
    },
    "EmphasisCaretStart": {
      "tag": "emphasis",
      "name": "markup.emphasis.sd",
      "match": "^([\\^]+)([^\\^]+)$",
      "captures": {
        "1": {
          "tag": "bracket",
          "name": "punctuation.definition.emphasis.sd"
        },
        "2": {
          "patterns": [
            {
              "include": "#InnerText"
            }
          ]
        }
      }
    },
    "EmphasisCaretSurround": {
      "tag": "emphasis",
      "name": "markup.emphasis.sd",
      "match": "([\\^]+)((?:(?!\\1).*?)+)(\\1)",
      "captures": {
        "1": {
          "tag": "bracket",
          "name": "punctuation.definition.emphasis.sd"
        },
        "2": {
          "patterns": [
            {
              "include": "#InnerText"
            }
          ]
        },
        "3": {
          "tag": "bracket",
          "name": "punctuation.definition.emphasis.sd"
        }
      }
    },
    "EmphasisTildeStart": {
      "tag": "emphasis",
      "name": "markup.emphasis.sd",
      "match": "^([~][~]+)([^~]+)$",
      "captures": {
        "1": {
          "tag": "bracket",
          "name": "punctuation.definition.emphasis.sd"
        },
        "2": {
          "patterns": [
            {
              "include": "#InnerText"
            }
          ]
        }
      }
    },
    "EmphasisTildeSurround": {
      "tag": "emphasis",
      "name": "markup.emphasis.sd",
      "match": "([~][~]+)((?:(?!\\1).*?)+)(\\1)",
      "captures": {
        "1": {
          "tag": "bracket",
          "name": "punctuation.definition.emphasis.sd"
        },
        "2": {
          "patterns": [
            {
              "include": "#InnerText"
            }
          ]
        },
        "3": {
          "tag": "bracket",
          "name": "punctuation.definition.emphasis.sd"
        }
      }
    },
    "EmphasisColonStart": {
      "tag": "emphasis",
      "name": "markup.emphasis.sd",
      "match": "^([:][:]+)([^:]+)$",
      "captures": {
        "1": {
          "tag": "bracket",
          "name": "punctuation.definition.emphasis.sd"
        },
        "2": {
          "patterns": [
            {
              "include": "#InnerText"
            }
          ]
        }
      }
    },
    "EmphasisColonSurround": {
      "tag": "emphasis",
      "name": "markup.emphasis.sd",
      "match": "([:][:]+)((?:(?!\\1).*?)+)(\\1)",
      "captures": {
        "1": {
          "tag": "bracket",
          "name": "punctuation.definition.emphasis.sd"
        },
        "2": {
          "patterns": [
            {
              "include": "#InnerText"
            }
          ]
        },
        "3": {
          "tag": "bracket",
          "name": "punctuation.definition.emphasis.sd"
        }
      }
    },
    "EmphasisEqualStart": {
      "tag": "emphasis",
      "name": "markup.emphasis.sd",
      "match": "^([=]+)([^=]+)$",
      "captures": {
        "1": {
          "tag": "bracket",
          "name": "punctuation.definition.emphasis.sd"
        },
        "2": {
          "patterns": [
            {
              "include": "#InnerText"
            }
          ]
        }
      }
    },
    "EmphasisEqualSurround": {
      "tag": "emphasis",
      "name": "markup.emphasis.sd",
      "match": "([=]+)((?:(?!\\1).*?)+)(\\1)",
      "captures": {
        "1": {
          "tag": "bracket",
          "name": "punctuation.definition.emphasis.sd"
        },
        "2": {
          "patterns": [
            {
              "include": "#InnerText"
            }
          ]
        },
        "3": {
          "tag": "bracket",
          "name": "punctuation.definition.emphasis.sd"
        }
      }
    },
    "EmphasisAngleLeftStart": {
      "tag": "emphasis",
      "name": "markup.emphasis.sd",
      "match": "^([<]+)([^<]+)$",
      "captures": {
        "1": {
          "tag": "bracket",
          "name": "punctuation.definition.emphasis.sd"
        },
        "2": {
          "patterns": [
            {
              "include": "#InnerText"
            }
          ]
        }
      }
    },
    "EmphasisAngleLeftSurround": {
      "tag": "emphasis",
      "name": "markup.emphasis.sd",
      "match": "([<]+)((?:(?!\\1).*?)+)(\\1)",
      "captures": {
        "1": {
          "tag": "bracket",
          "name": "punctuation.definition.emphasis.sd"
        },
        "2": {
          "patterns": [
            {
              "include": "#InnerText"
            }
          ]
        },
        "3": {
          "tag": "bracket",
          "name": "punctuation.definition.emphasis.sd"
        }
      }
    },
    "EmphasisAngleRightStart": {
      "tag": "emphasis",
      "name": "markup.emphasis.sd",
      "match": "^([>]+)([^>]+)$",
      "captures": {
        "1": {
          "tag": "bracket",
          "name": "punctuation.definition.emphasis.sd"
        },
        "2": {
          "patterns": [
            {
              "include": "#InnerText"
            }
          ]
        }
      }
    },
    "EmphasisAngleRightSurround": {
      "tag": "emphasis",
      "name": "markup.emphasis.sd",
      "match": "([>]+)((?:(?!\\1).*?)+)(\\1)",
      "captures": {
        "1": {
          "tag": "bracket",
          "name": "punctuation.definition.emphasis.sd"
        },
        "2": {
          "patterns": [
            {
              "include": "#InnerText"
            }
          ]
        },
        "3": {
          "tag": "bracket",
          "name": "punctuation.definition.emphasis.sd"
        }
      }
    },
    "Expression": {
      "patterns": [
        {
          "include": "#IllegalPropertyDeclaration"
        },
        {
          "include": "#String"
        },
        {
          "include": "#Operator"
        },
        {
          "include": "#Literal"
        },
        {
          "include": "#Whitespace"
        },
        {
          "include": "#Newline"
        },
        {
          "include": "#ParenExpression"
        },
        {
          "include": "#AccessPath"
        },
        {
          "include": "#PunctuationSemicolon"
        },
        {
          "include": "#PunctuationComma"
        },
        {
          "include": "#IllegalChar"
        }
      ]
    },
    "Indent": {
      "tag": "content",
      "name": "markup.raw.whitespace.indent.sd",
      "match": "^([ ]+)"
    },
    "Whitespace": {
      "tag": "content",
      "name": "markup.raw.whitespace.sd",
      "match": "([ ]+)"
    },
    "String": {
      "emit": true,
      "patterns": [
        {
          "include": "#SingleQuoteString"
        },
        {
          "include": "#DoubleQuoteString"
        },
        {
          "include": "#TemplateString"
        }
      ]
    },
    "DoubleQuoteString": {
      "tag": "string",
      "name": "string.quoted.double.sd",
      "begin": "([\"])",
      "beginCaptures": {
        "1": {
          "tag": "string",
          "name": "punctuation.definition.string.begin.sd"
        }
      },
      "patterns": [
        {
          "include": "#Color"
        },
        {
          "include": "#DoubleQuoteStringContent"
        }
      ],
      "end": "([\"])|($)",
      "endCaptures": {
        "1": {
          "tag": "string",
          "name": "punctuation.definition.string.end.sd"
        }
      }
    },
    "DoubleQuoteStringContent": {
      "tag": "string",
      "name": "string.quoted.double.content.sd",
      "match": "((?:[^\"\\\\]|\\\\.)*)"
    },
    "SingleQuoteString": {
      "tag": "string",
      "name": "string.quoted.single.sd",
      "begin": "(['])",
      "beginCaptures": {
        "1": {
          "tag": "string",
          "name": "punctuation.definition.string.begin.sd"
        }
      },
      "patterns": [
        {
          "include": "#Color"
        },
        {
          "include": "#SingleQuoteStringContent"
        }
      ],
      "end": "(['])|($)",
      "endCaptures": {
        "1": {
          "tag": "string",
          "name": "punctuation.definition.string.end.sd"
        }
      }
    },
    "SingleQuoteStringContent": {
      "tag": "string",
      "name": "string.quoted.double.content.sd",
      "match": "((?:[^'\\\\]|\\\\.)*)"
    },
    "Operator": {
      "emit": true,
      "patterns": [
        {
          "include": "#AwaitOperator"
        },
        {
          "include": "#YieldOperator"
        },
        {
          "include": "#YieldIteratorOperator"
        },
        {
          "include": "#DeleteOperator"
        },
        {
          "include": "#InOperator"
        },
        {
          "include": "#OfOperator"
        },
        {
          "include": "#InstanceOfOperator"
        },
        {
          "include": "#NewOperator"
        },
        {
          "include": "#VoidOperator"
        },
        {
          "include": "#AsOperator"
        },
        {
          "include": "#SpreadOperator"
        },
        {
          "include": "#AssignArithmeticOperator"
        },
        {
          "include": "#AssignBitwiseOperator"
        },
        {
          "include": "#BitwiseShiftOperator"
        },
        {
          "include": "#CompareEqualOperator"
        },
        {
          "include": "#CompareRelativeOperator"
        },
        {
          "include": "#NegateOperator"
        },
        {
          "include": "#LogicalOperator"
        },
        {
          "include": "#BitwiseOperator"
        },
        {
          "include": "#AssignEqualOperator"
        },
        {
          "include": "#DecrementOperator"
        },
        {
          "include": "#IncrementOperator"
        },
        {
          "include": "#ArithmeticOperator"
        },
        {
          "include": "#AssignMultiplyOperator"
        },
        {
          "include": "#AssignDivideOperator"
        }
      ]
    },
    "AwaitOperator": {
      "tag": "controlKeyword",
      "name": "keyword.control.flow.sd",
      "match": "(?<![_a-zA-Z0-9])(?:(?<=[.][.][.])|(?<![.]))(await)(?![_a-zA-Z0-9])(?:(?=[.][.][.])|(?![.]))"
    },
    "YieldOperator": {
      "begin": "(?<![_a-zA-Z0-9])(?:(?<=[.][.][.])|(?<![.]))(yield)(?![_a-zA-Z0-9])(?:(?=[.][.][.])|(?![.]))(?=\\s*\\/[*]([^*]|([*][^\\/]))*[*]\\/\\s*[*])",
      "beginCaptures": {
        "1": {
          "tag": "controlKeyword",
          "name": "keyword.control.flow.sd"
        }
      },
      "end": "([*])",
      "endCaptures": {
        "1": {
          "tag": "controlKeyword",
          "name": "keyword.generator.asterisk.sd"
        }
      }
    },
    "YieldIteratorOperator": {
      "match": "(?<![_a-zA-Z0-9])(?:(?<=[.][.][.])|(?<![.]))(yield)(?![_a-zA-Z0-9])(?:(?=[.][.][.])|(?![.]))(?:\\s*([*]))?",
      "captures": {
        "1": {
          "tag": "controlKeyword",
          "name": "keyword.control.flow.sd"
        },
        "2": {
          "tag": "controlKeyword",
          "name": "keyword.generator.asterisk.sd"
        }
      }
    },
    "DeleteOperator": {
      "tag": "operatorKeyword",
      "name": "keyword.operator.expression.delete.sd",
      "match": "(?<![_a-zA-Z0-9])(?:(?<=[.][.][.])|(?<![.]))delete(?![_a-zA-Z0-9])(?:(?=[.][.][.])|(?![.]))"
    },
    "InOperator": {
      "tag": "operatorKeyword",
      "name": "keyword.operator.expression.in.sd",
      "match": "(?<![_a-zA-Z0-9])(?:(?<=[.][.][.])|(?<![.]))in(?![_a-zA-Z0-9])(?:(?=[.][.][.])|(?![.]))(?!\\()"
    },
    "OfOperator": {
      "tag": "operatorKeyword",
      "name": "keyword.operator.expression.of.sd",
      "match": "(?<![_a-zA-Z0-9])(?:(?<=[.][.][.])|(?<![.]))of(?![_a-zA-Z0-9])(?:(?=[.][.][.])|(?![.]))(?!\\()"
    },
    "InstanceOfOperator": {
      "tag": "operatorKeyword",
      "name": "keyword.operator.expression.instanceof.sd",
      "match": "(?<![_a-zA-Z0-9])(?:(?<=[.][.][.])|(?<![.]))instanceof(?![_a-zA-Z0-9])(?:(?=[.][.][.])|(?![.]))"
    },
    "NewOperator": {
      "tag": "operatorKeyword",
      "name": "keyword.operator.new.sd",
      "match": "(?<![_a-zA-Z0-9])(?:(?<=[.][.][.])|(?<![.]))new(?![_a-zA-Z0-9])(?:(?=[.][.][.])|(?![.]))"
    },
    "VoidOperator": {
      "tag": "operatorKeyword",
      "name": "keyword.operator.expression.void.sd",
      "match": "(?<![_a-zA-Z0-9])(?:(?<=[.][.][.])|(?<![.]))void(?![_a-zA-Z0-9])(?:(?=[.][.][.])|(?![.]))"
    },
    "AsOperator": {
      "match": "(?<![_a-zA-Z0-9])(?:(?<=[.][.][.])|(?<![.]))(as)\\s+(const)(?=\\s*($|[;,:})\\]]))",
      "captures": {
        "1": {
          "tag": "controlKeyword",
          "name": "keyword.control.as.sd"
        },
        "2": {
          "tag": "controlKeyword",
          "name": "storage.modifier.sd"
        }
      }
    },
    "SpreadOperator": {
      "tag": "derefOperator",
      "name": "keyword.operator.spread.sd",
      "match": "([.][.][.])"
    },
    "AssignArithmeticOperator": {
      "tag": "updateOperator",
      "name": "keyword.operator.assignment.compound.sd",
      "match": "([*][=]|(?<!\\()[/][=]|[%][=]|[+][=]|[-][=])"
    },
    "AssignBitwiseOperator": {
      "tag": "updateOperator",
      "name": "keyword.operator.assignment.compound.bitwise.sd",
      "match": "([&][=]|[\\^][=]|[<][<][=]|[>][>][=]|[>][>][>][=]|[|][=])"
    },
    "BitwiseShiftOperator": {
      "tag": "updateOperator",
      "name": "keyword.operator.bitwise.shift.sd",
      "match": "([<][<]|[>][>][>]|[>][>])"
    },
    "CompareEqualOperator": {
      "tag": "compareOperator",
      "name": "keyword.operator.comparison.sd",
      "match": "([=][=][=]|[!][=][=]|[=][=]|[!][=])"
    },
    "CompareRelativeOperator": {
      "tag": "compareOperator",
      "name": "keyword.operator.relational.sd",
      "match": "([<][=]|[>][=]|[<][>]|[<]|[>])"
    },
    "NegateOperator": {
      "tag": "updateOperator",
      "match": "(?<=[_a-zA-Z0-9])([!])\\s*(?:([/][=])|(?:([/])(?![/*])))",
      "captures": {
        "1": {
          "tag": "logicOperator",
          "name": "keyword.operator.logical.sd"
        },
        "2": {
          "tag": "updateOperator",
          "name": "keyword.operator.assignment.compound.sd"
        },
        "3": {
          "tag": "arithmeticOperator",
          "name": "keyword.operator.arithmetic.sd"
        }
      }
    },
    "LogicalOperator": {
      "tag": "logicOperator",
      "name": "keyword.operator.logical.sd",
      "match": "([!]|[&][&]|[|][|]|[?][?])"
    },
    "BitwiseOperator": {
      "tag": "bitwiseOperator",
      "name": "keyword.operator.bitwise.sd",
      "match": "([&]|[~]|[\\^]|[|])"
    },
    "AssignEqualOperator": {
      "tag": "updateOperator",
      "name": "keyword.operator.assignment.sd",
      "match": "([=])"
    },
    "DecrementOperator": {
      "tag": "updateOperator",
      "name": "keyword.operator.decrement.sd",
      "match": "([-][-])"
    },
    "IncrementOperator": {
      "tag": "updateOperator",
      "name": "keyword.operator.increment.sd",
      "match": "([+][+])"
    },
    "ArithmeticOperator": {
      "tag": "arithmeticOperator",
      "name": "keyword.operator.arithmetic.sd",
      "match": "([%]|[*]|[/]|[-]|[+])"
    },
    "AssignMultiplyOperator": {
      "begin": "(?<=[_a-zA-Z0-9)\\]])\\s*(?=(\\/[*]([^*]|([*][^\\/]))*[*]\\/\\s*)+(?:(/=)|(?:(/)(?![/*]))))",
      "end": "(?:(/=)|(?:(/)(?![*]([^*]|([*][^\\/]))*[*][/])))",
      "endCaptures": {
        "1": {
          "tag": "updateOperator",
          "name": "keyword.operator.assignment.compound.sd"
        },
        "2": {
          "tag": "arithmeticOperator",
          "name": "keyword.operator.arithmetic.sd"
        }
      }
    },
    "AssignDivideOperator": {
      "match": "(?<=[_a-zA-Z0-9)\\]])([\\s]*)([/][=]|([/])(?![/*]))",
      "captures": {
        "2": {
          "tag": "arithmeticOperator",
          "name": "keyword.operator.arithmetic.sd"
        }
      }
    },
    "AssignColonOperator": {
      "tag": "punctuation",
      "name": "punctuation.separator.colon.sd",
      "match": "([:])"
    },
    "Literal": {
      "emit": true,
      "patterns": [
        {
          "include": "#NumericLiteral"
        },
        {
          "include": "#BooleanLiteral"
        },
        {
          "include": "#NullLiteral"
        },
        {
          "include": "#UndefinedLiteral"
        },
        {
          "include": "#NumericConstantLiteral"
        }
      ]
    },
    "NumericLiteral": {
      "patterns": [
        {
          "include": "#HexNumber"
        },
        {
          "include": "#BinaryNumber"
        },
        {
          "include": "#OctalNumber"
        },
        {
          "include": "#DecimalNumber"
        }
      ]
    },
    "HexNumber": {
      "tag": "number",
      "name": "constant.numeric.hex.sd",
      "match": "(\\b(?<![$])0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(?:n)?\\b(?![$]))",
      "captures": {
        "1": {
          "tag": "number",
          "name": "storage.type.numeric.bigint.sd"
        }
      }
    },
    "BinaryNumber": {
      "tag": "number",
      "name": "constant.numeric.binary.sd",
      "match": "(\\b(?<![$])0(?:b|B)[01][01_]*(?:n)?\\b(?![$]))",
      "captures": {
        "1": {
          "tag": "number",
          "name": "storage.type.numeric.bigint.sd"
        }
      }
    },
    "OctalNumber": {
      "tag": "number",
      "name": "constant.numeric.octal.sd",
      "match": "(\\b(?<![$])0(?:o|O)?[0-7][0-7_]*(?:n)?\\b(?![$]))",
      "captures": {
        "1": {
          "tag": "number",
          "name": "storage.type.numeric.bigint.sd"
        }
      }
    },
    "DecimalNumber": {
      "tag": "number",
      "name": "constant.numeric.decimal.sd",
      "match": "((?<![$])(?:(?:\\b[0-9][0-9_]*[.][0-9][0-9_]*[eE][+-]?[0-9][0-9_]*[n]?\\b)|(?:\\b[0-9][0-9_]*[.][eE][+-]?[0-9][0-9_]*[n]?\\b)|(?:\\B[.][0-9][0-9_]*[eE][+-]?[0-9][0-9_]*[n]?\\b)|(?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*[n]?\\b)|(?:\\b[0-9][0-9_]*[.][0-9][0-9_]*[n]?\\b)|(?:\\b[0-9][0-9_]*[.][n]?\\B)|(?:\\B[.][0-9][0-9_]*[n]?\\b)|(?:\\b[0-9][0-9_]*[n]?\\b(?![.])))(?![$]))"
    },
    "BooleanLiteral": {
      "patterns": [
        {
          "include": "#BooleanTrue"
        },
        {
          "include": "#BooleanFalse"
        }
      ]
    },
    "BooleanTrue": {
      "tag": "bool",
      "name": "constant.language.boolean.true.sd",
      "match": "(?<![_a-zA-Z0-9])(?:(?<=[.][.][.])|(?<![.]))true(?![_a-zA-Z0-9])(?:(?=[.][.][.])|(?![.]))"
    },
    "BooleanFalse": {
      "tag": "bool",
      "name": "constant.language.boolean.false.sd",
      "match": "(?<![_a-zA-Z0-9])(?:(?<=[.][.][.])|(?<![.]))false(?![_a-zA-Z0-9])(?:(?=[.][.][.])|(?![.]))"
    },
    "NullLiteral": {
      "tag": "null",
      "name": "constant.language.null.sd",
      "match": "(?<![_a-zA-Z0-9])(?:(?<=[.][.][.])|(?<![.]))null(?![_a-zA-Z0-9])(?:(?=[.][.][.])|(?![.]))"
    },
    "UndefinedLiteral": {
      "tag": "null",
      "name": "constant.language.undefined.sd",
      "match": "(?<![_a-zA-Z0-9])(?:(?<=[.][.][.])|(?<![.]))undefined(?![_a-zA-Z0-9])(?:(?=[.][.][.])|(?![.]))"
    },
    "NumericConstantLiteral": {
      "patterns": [
        {
          "include": "#NaN"
        },
        {
          "include": "#Infinity"
        }
      ]
    },
    "NaN": {
      "tag": "atom",
      "name": "constant.language.nan.sd",
      "match": "(?<![_a-zA-Z0-9])(?:(?<=[.][.][.])|(?<![.]))NaN(?![_a-zA-Z0-9])(?:(?=[.][.][.])|(?![.]))"
    },
    "Infinity": {
      "tag": "atom",
      "name": "constant.language.infinity.sd",
      "match": "(?<![_a-zA-Z0-9])(?:(?<=[.][.][.])|(?<![.]))Infinity(?![_a-zA-Z0-9])(?:(?=[.][.][.])|(?![.]))"
    },
    "ArrayLiteral": {
      "name": "meta.array.literal.sd",
      "brackets": true,
      "begin": "(\\[)",
      "beginCaptures": {
        "1": {
          "tag": "brace",
          "name": "meta.brace.square.open.sd"
        }
      },
      "patterns": [
        {
          "include": "#ArrayItem"
        },
        {
          "include": "#Newline"
        }
      ],
      "end": "(\\])",
      "endCaptures": {
        "1": {
          "tag": "brace",
          "name": "meta.brace.square.close.sd"
        }
      }
    },
    "ArrayItem": {
      "tag": "meta",
      "name": "meta.item.sd",
      "begin": "(?=.+$)",
      "patterns": [
        {
          "include": "#Expression"
        }
      ],
      "end": "(?=\\])|([,])",
      "endCaptures": {
        "1": {
          "tag": "punctuation",
          "name": "punctuation.separator.comma.sd"
        }
      }
    },
    "ObjectLiteral": {
      "name": "meta.object.literal.sd",
      "brackets": true,
      "begin": "(\\{)",
      "beginCaptures": {
        "1": {
          "tag": "brace",
          "name": "meta.brace.curly.open.sd"
        }
      },
      "patterns": [
        {
          "include": "#ObjectProperty"
        },
        {
          "include": "#Newline"
        }
      ],
      "end": "(\\})",
      "endCaptures": {
        "1": {
          "tag": "brace",
          "name": "meta.brace.curly.close.sd"
        }
      }
    },
    "ObjectProperty": {
      "tag": "meta",
      "name": "meta.item.sd",
      "begin": "(?=.+$)",
      "patterns": [
        {
          "include": "#Expression"
        }
      ],
      "end": "(?=\\})|([,])",
      "endCaptures": {
        "1": {
          "tag": "punctuation",
          "name": "punctuation.separator.comma.sd"
        }
      }
    },
    "PunctuationComma": {
      "tag": "punctuation",
      "name": "punctuation.separator.comma.sd",
      "match": ","
    },
    "PunctuationSemicolon": {
      "tag": "punctuation",
      "name": "punctuation.separator.semicolon.sd",
      "match": ";"
    },
    "PunctuationParenOpen": {
      "match": "([(])",
      "tag": "paren",
      "name": "meta.brace.round.open.sd"
    },
    "PunctuationParenClose": {
      "match": "([)])",
      "tag": "paren",
      "name": "meta.brace.round.close.sd"
    },
    "ParenExpression": {
      "brackets": true,
      "begin": "([(])",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#PunctuationParenOpen"
            }
          ]
        }
      },
      "patterns": [
        {
          "include": "#Expression"
        }
      ],
      "end": "([)])",
      "endCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#PunctuationParenClose"
            }
          ]
        }
      }
    },
    "NamespaceAccessor": {
      "match": "([a-zA-Z][_$0-9a-zA-Z]*)([.]|[?][.](?!\\s*[0-9]))([a-zA-Z][_$0-9a-zA-Z]*)?(?![_a-zA-Z0-9])(?![(])",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#TypeIdentifier"
            }
          ]
        },
        "2": {
          "patterns": [
            {
              "include": "#PunctuationAccessor"
            }
          ]
        },
        "3": {
          "patterns": [
            {
              "include": "#VariableName"
            }
          ]
        }
      }
    },
    "PropertyAccessor": {
      "match": "([.]|[?][.](?!\\s*[0-9]))([a-zA-Z][_$0-9a-zA-Z]*)(?![_a-zA-Z0-9])(?![(])",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#PunctuationAccessor"
            }
          ]
        },
        "2": {
          "patterns": [
            {
              "include": "#PropertyName"
            }
          ]
        }
      }
    },
    "IllegalPropertyDeclaration": {
      "tag": "invalid",
      "name": "invalid.illegal.property-declaration.sd",
      "match": "([_a-zA-Z][_a-zA-Z0-9]*)([ ]*)([:])(.*?)($|(?=[;}]))"
    },
    "StructName": {
      "tag": "variableName",
      "name": "variable.other.constant.sd",
      "match": "([_a-zA-Z][_a-zA-Z0-9]*)(?![(])"
    },
    "VariableName": {
      "tag": "variableName",
      "name": "variable.other.constant.sd",
      "match": "([_a-zA-Z][_a-zA-Z0-9]*)(?![(])"
    },
    "PropertyName": {
      "tag": "propertyName",
      "name": "variable.other.property.sd",
      "match": "([_a-zA-Z][_a-zA-Z0-9]*)(?![(])"
    },
    "TypeIdentifier": {
      "tag": "typeName",
      "name": "support.type.sd",
      "match": "([_a-zA-Z][_a-zA-Z0-9]*)"
    },
    "Identifier": {
      "match": "([_a-zA-Z][_a-zA-Z0-9]*)"
    },
    "PunctuationAccessor": {
      "match": "(?:([.])|([?][.](?!\\s*[0-9])))",
      "captures": {
        "1": {
          "tag": "punctuation",
          "name": "punctuation.accessor.sd"
        },
        "2": {
          "tag": "punctuation",
          "name": "punctuation.accessor.optional.sd"
        }
      }
    },
    "TemplateString": {
      "tag": "string",
      "name": "string.template.ts",
      "begin": "([`])",
      "beginCaptures": {
        "1": {
          "tag": "string",
          "name": "punctuation.definition.string.template.begin.sd"
        }
      },
      "patterns": [
        {
          "include": "#Color"
        },
        {
          "include": "#StringCharacterEscape"
        },
        {
          "include": "#TemplateStringSubstitution"
        },
        {
          "include": "#TemplateStringContent"
        }
      ],
      "end": "([`])",
      "endCaptures": {
        "1": {
          "tag": "string",
          "name": "punctuation.definition.string.template.end.sd"
        }
      }
    },
    "TemplateStringContent": {
      "tag": "string",
      "name": "string.quoted.template.content.sd",
      "match": "(.)"
    },
    "TemplateStringSubstitution": {
      "patterns": [
        {
          "include": "#TemplateStringExpressionSubstitution"
        },
        {
          "include": "#TemplateStringConditionalSubstitution"
        }
      ]
    },
    "TemplateStringExpressionSubstitution": {
      "brackets": true,
      "name": "meta.template.expression.sd",
      "contentName": "meta.embedded.line.sd",
      "begin": "([$][{])",
      "beginCaptures": {
        "1": {
          "tag": "keyword",
          "name": "punctuation.definition.template-expression.begin.sd"
        }
      },
      "patterns": [
        {
          "include": "#TemplateStringExpression"
        }
      ],
      "end": "([}])",
      "endCaptures": {
        "1": {
          "tag": "keyword",
          "name": "punctuation.definition.template-expression.end.sd"
        }
      }
    },
    "TemplateStringConditionalSubstitution": {
      "brackets": true,
      "begin": "([{])(?:([ ]*)([_a-zA-Z][_a-zA-Z0-9]*)([ ]*)((?=[}])|[:]))?(?:([ ]*)([_a-zA-Z][_a-zA-Z0-9]*)([ ]*)((?=[}])|[:]))?",
      "beginCaptures": {
        "1": {
          "tag": "keyword",
          "name": "punctuation.definition.template-expression.begin.sd"
        },
        "2": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        },
        "3": {
          "patterns": [
            {
              "include": "#TemplateStringExpression"
            }
          ]
        },
        "4": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        },
        "5": {
          "tag": "separator",
          "name": "meta.template.expression.colon.sd"
        },
        "6": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        },
        "7": {
          "patterns": [
            {
              "include": "#FunctionName"
            },
            {
              "include": "#Unknown"
            }
          ]
        },
        "8": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        },
        "9": {
          "tag": "separator",
          "name": "meta.template.expression.colon.sd"
        }
      },
      "patterns": [
        {
          "include": "#TemplateStringConditionalDelimiter"
        },
        {
          "include": "#TemplateStringContent"
        }
      ],
      "end": "([}])",
      "endCaptures": {
        "1": {
          "tag": "keyword",
          "name": "punctuation.definition.template-expression.end.sd"
        }
      }
    },
    "TemplateStringExpression": {
      "emit": true,
      "patterns": [
        {
          "include": "#Expression"
        }
      ]
    },
    "TemplateStringConditionalDelimiter": {
      "tag": "separator",
      "name": "meta.template.expression.delimiter.sd",
      "match": "([|])"
    },
    "InlineTemplateStringSubstitution": {
      "patterns": [
        {
          "include": "#TemplateStringExpressionSubstitution"
        },
        {
          "include": "#InlineTemplateStringConditionalSubstitution"
        }
      ]
    },
    "InlineTemplateStringConditionalSubstitution": {
      "brackets": true,
      "begin": "([{])(?:([ ]*)([_a-zA-Z][._a-zA-Z0-9]*)([ ]*)((?=[}])|[:]))?(?:([ ]*)([_a-zA-Z][._a-zA-Z0-9]*)([ ]*)((?=[}])|[:]))?",
      "beginCaptures": {
        "1": {
          "tag": "keyword",
          "name": "punctuation.definition.template-expression.begin.sd"
        },
        "2": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        },
        "3": {
          "patterns": [
            {
              "include": "#AccessPath"
            },
            {
              "include": "#Unknown"
            }
          ]
        },
        "4": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        },
        "5": {
          "tag": "separator",
          "name": "meta.template.expression.colon.sd"
        },
        "6": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        },
        "7": {
          "patterns": [
            {
              "include": "#FunctionName"
            },
            {
              "include": "#Unknown"
            }
          ]
        },
        "8": {
          "patterns": [
            {
              "include": "#Whitespace"
            }
          ]
        },
        "9": {
          "tag": "separator",
          "name": "meta.template.expression.colon.sd"
        }
      },
      "patterns": [
        {
          "include": "#TemplateStringConditionalDelimiter"
        },
        {
          "include": "#InnerText"
        }
      ],
      "end": "([}])",
      "endCaptures": {
        "1": {
          "tag": "keyword",
          "name": "punctuation.definition.template-expression.end.sd"
        }
      }
    },
    "StringCharacterEscape": {
      "tag": "escape",
      "name": "constant.character.escape.ts",
      "match": "([\\\\])(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|u\\{[0-9A-Fa-f]+\\}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.|$)"
    },
    "FunctionName": {
      "tag": "meta",
      "name": "meta.function-name.sd",
      "match": "([_a-zA-Z][_a-zA-Z0-9]*)",
      "captures": {
        "1": {
          "tag": "function(variableName)",
          "name": "entity.name.function.sd"
        }
      }
    },
    "Color": {
      "emit": true,
      "patterns": [
        {
          "include": "#HEXColor"
        },
        {
          "include": "#RGBColor"
        },
        {
          "include": "#HSLColor"
        }
      ]
    },
    "HEXColor": {
      "tag": "string",
      "name": "string.color.hex.sd",
      "match": "(#)((?:[0-9a-fA-F]{2}){2,4})",
      "color": true
    },
    "RGBColor": {
      "tag": "string",
      "name": "string.color.rgb.sd",
      "match": "(rgb)([(][\\d]+[\\s]+[\\d]+[\\s]+[\\d]+(?:[\\s]*[/][\\s]*[\\d.]+[%]?)?[)])",
      "color": true
    },
    "HSLColor": {
      "tag": "string",
      "name": "string.color.hsl.sd",
      "match": "(hsl)([(][\\d]+[\\s]+[\\d]+[%]?[\\s]+[\\d]+[%]?(?:[\\s]*[/][\\s]*[\\d.]+[%]?)?[)])",
      "color": true
    }
  }
}