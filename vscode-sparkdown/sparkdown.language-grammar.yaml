fileTypes: [sd, spark, sparkdown, sdown]
keyEquivalent: ^~S
name: Sparkdown
scopeName: text.source.sparkdown
uuid: E26C862D-2A5E-4F10-B0C3-D6BCB838CB7F

patterns:
  - { include: "#Comment" }
  - { include: "#Note" }
  - { include: "#Synopsis" }
  - { include: "#PageBreak" }
  - { include: "#Jump" }
  - { include: "#Centered" }
  - { include: "#CenteredAngle" }
  - { include: "#Condition" }
  - { include: "#Logic" }
  - { include: "#List" }
  - { include: "#Import" }
  - { include: "#Variable" }
  - { include: "#Struct" }
  - { include: "#Action" }

repository:
  Comment:
    patterns:
      - { include: "#CommentLine" }
      - { include: "#CommentBlock" }

  CommentBlock:
    tag: comment
    name: comment.block.sd
    begin: (/[*])
    beginCaptures:
      1:
        tag: blockComment
        name: comment.block.open.sd
    end: ([*]/)
    endCaptures:
      1:
        tag: blockComment
        name: comment.block.close.sd

  CommentLine:
    tag: comment
    name: comment.line.sd
    match: (\/\/)(.*)
    captures:
      1:
        tag: lineComment
        name: comment.line.double-slash.sd
      2:
        tag: comment
        name: comment.line.content.sd

  Note:
    tag: comment
    name: comment.line.note.sd
    match: (\[{2})([^\]]*)(\]{2})
    captures:
      1:
        tag: lineComment
        name: comment.line.double-square-bracket.sd
      2:
        tag: comment
        name: comment.line.note.sd
      3:
        tag: lineComment
        name: comment.line.double-square-bracket.sd

  Synopsis:
    tag: comment
    name: comment.line.synopsis.sd
    match: ^([ \t]*)(?![=]{2,})([=])([ ]*)(.*)
    captures:
      2:
        tag: lineComment
        name: comment.line.equal.sd
      4:
        tag: comment
        name: comment.line.synopsis.sd

  PageBreak:
    tag: contentSeparator
    name: markup.heading.separator.sd
    match: ^([ \t]*)(===+)
    captures:
      2:
        tag: contentSeparator
        name: markup.heading.separator.equals.sd

  Jump:
    match: ^([ \t]*)([>])([ ]*)([^\n\r ]+|[{][^\n\r<]+[}])?$
    captures:
      2:
        tag: keyword
        name: storage.type.jump.sd
      4:
        tag: labelName
        name: keyword.control.export.sd

  Centered:
    tag: quote
    name: keyword.other.centered.sd
    match: ^([ \t]*)(:)([^\n\r:]+)(:)
    captures:
      2:
        tag: quote
        name: storage.type.centered.colon-left.sd
      3:
        patterns:
          - { include: "#Comment" }
          - { include: "#Note" }
          - { include: "#Inline" }
      4:
        tag: quote
        name: storage.type.centered.colon-right.sd

  CenteredAngle:
    tag: quote
    name: keyword.other.centered.sd
    match: ^([ \t]*)(>)([^\n\r<>]+)(<)
    captures:
      2:
        tag: quote
        name: storage.type.centered.angle-left.sd
      3:
        patterns:
          - { include: "#Comment" }
          - { include: "#Note" }
          - { include: "#Inline" }
      4:
        tag: quote
        name: storage.type.centered.angle-right.sd

  Condition:
    match: ^([ \t]*)([*])($|[ ]+)($|if|elseif|else)(?:($|[ ]+)($|(?:[ ]+|`[^\n\r`]*`|"[^\n\r"]*"|'[^\n\r']*'|[^\n\r:])+))?([ ]*)($|[:])
    captures:
      2:
        tag: keyword
        name: storage.type.condition.sd
      4:
        tag: logicOperator
        name: keyword.other.condition.sd
      6:
        patterns:
          - { include: "#Expression" }
      8:
        tag: punctuation
        name: punctuation.separator.colon.sd

  Logic:
    match: ^([ \t]*)([*])($|[ ]+)([^\n\r]*)?
    captures:
      2:
        tag: keyword
        name: storage.type.logic.sd
      4:
        patterns:
          - { include: "#Expression" }

  List:
    match: ^([ \t]*)([*+-])($|[ ]+)
    captures:
      2:
        tag: keyword
        name: storage.type.list.sd

  Import:
    match: ^([ \t]*)(import)($|[ ]+)($|[^\n\r]+)
    captures:
      2:
        tag: logicOperator
        name: keyword.control.import.sd
      4:
        patterns:
          - { include: "#Expression" }

  Variable:
    match: ^([ \t]*)([@])([ ]+)($|[_a-zA-Z]+[_a-zA-Z0-9]*)($|[ ]+)([^\n\r:]+)(?![:])$
    captures:
      2:
        tag: keyword
        name: storage.type.variable.sd
      4:
        tag: typeName
        name: support.type.primitive.sd
      6:
        patterns:
          - { include: "#Expression" }

  Struct:
    begin: ^([ \t]*)(@)($|[ ]+)($|[_a-zA-Z]+[_a-zA-Z0-9]*)($|[ ]+)($|[_a-zA-Z]+[_a-zA-Z0-9]*)([ ]*)(?:([(])([ ]*)($|[_a-zA-Z]+[_a-zA-Z0-9]*)([ ]*)($|[)]))?([ ]*)([:]?)([ ]*)$
    beginCaptures:
      2:
        tag: keyword
        name: storage.type.struct.sd
      4:
        tag: typeName
        name: support.type.primitive.struct.sd
      6:
        tag: variableName
        name: variable.other.readwrite.struct.sd
      8:
        tag: punctuation
        name: punctuation.definition.struct.sd
      10:
        tag: typeName
        name: entity.name.type.interface.struct.sd
      12:
        tag: punctuation
        name: punctuation.definition.struct.sd
      14:
        tag: punctuation
        name: punctuation.definition.struct.sd
    patterns:
      - { include: "#YAML" }
    end: (?=@|^[\n\r\t ]*$)

  # TODO

  Inline:
    tag: content
    name: meta.paragraph.text.sd
    match: ([^\n\r<]+)

  Action:
    tag: content
    name: meta.paragraph.text.sd
    match: ^((?:(?![\/][\/]|[\/][*]).)+)$

  # YAML (stricter subset)

  YAML:
    patterns:
      - { include: "#Comment" }
      - { include: "#BlockArrayIndented" }
      - { include: "#BlockScalarIndented" }
      - { include: "#BlockMapIndented" }
      - { include: "#ExpressionIndented" }

  BlockArrayIndented:
    match: ([ ]{2,}|[\t]+)([-])([\t ]+[^\n\r]+|[\t ]*)$
    captures:
      1:
        tag: content
        name: markup.raw.whitespace.indent.yaml.sd
      2:
        tag: keyword
        name: storage.type.array.sd
      3:
        patterns:
          - { include: "#Comment" }
          - { include: "#BlockScalar" }
          - { include: "#Expression" }

  BlockScalarIndented:
    match: ([ ]{2,}|[\t]+)(?![-])([^\n\r:]+)([:])([\t ]+[^\n\r:]+)$
    captures:
      1:
        tag: content
        name: markup.raw.whitespace.indent.yaml.sd
      2:
        tag: keyword
        name: storage.type.map.sd
      3:
        tag: punctuation
        name: punctuation.separator.colon.sd
      4:
        patterns:
          - { include: "#Comment" }
          - { include: "#BlockScalar" }
          - { include: "#Expression" }

  BlockMapIndented:
    match: ([ ]{2,}|[\t]+)(?![-])([^\n\r:]+)([:])([\t ]*)$
    captures:
      1:
        tag: content
        name: markup.raw.whitespace.indent.yaml.sd
      2:
        tag: keyword
        name: storage.type.map.sd
      3:
        tag: punctuation
        name: punctuation.separator.colon.sd

  ExpressionIndented:
    match: ([ ]{2,}|[\t]+)([^\n\r]+)$
    captures:
      1:
        tag: content
        name: markup.raw.whitespace.indent.yaml.sd
      2:
        patterns:
          - { include: "#Expression" }

  BlockScalar:
    begin: (?:(\|)|(>))([1-9])?([-+])?(.*\n?)
    beginCaptures:
      1:
        tag: definitionKeyword
        name: punctuation.definition.block.scalar.literal.yaml
      2:
        tag: definitionKeyword
        name: punctuation.definition.block.scalar.folded.yaml
      3:
        tag: definitionKeyword
        name: constant.numeric.indentation-indicator.yaml
      4:
        tag: definitionKeyword
        name: support.other.chomping-indicator.yaml
      5:
        patterns:
          - { include: "#Comment" }
          - match: .+
            tag: invalid
            name: invalid.illegal.expected-comment-or-newline.yaml
    end: ^(?=\S)
    patterns:
      - begin: ^([ ]+)(?! )
        end: ^(?!\s*$)
        tag: definitionKeyword
        name: string.unquoted.block.yaml

  # TypeScript (subset)

  Expression:
    patterns:
      - { include: "#InnerExpression" }
      - { include: "#ArrayLiteral" }
      # - { include: "#ParenExpression" }
      # - { include: "#Identifiers" }
      # - { include: "#ExpressionPunctuations" }

  InnerExpression:
    patterns:
      - { include: "#String" }
      - { include: "#Comment" }
      - { include: "#ExpressionOperators" }
      - { include: "#NumericLiteral" }
      - { include: "#BooleanLiteral" }
      - { include: "#NullLiteral" }
      - { include: "#UndefinedLiteral" }
      - { include: "#NumericConstantLiteral" }

  String:
    patterns:
      - { include: "#QStringSingle" }
      - { include: "#QStringDouble" }
      # - { include: "#Template" }

  QStringDouble:
    tag: string
    name: string.quoted.double.ts
    begin: (["])
    beginCaptures:
      1:
        tag: string
        name: punctuation.definition.string.begin.ts
    end: (["])|([^\\\n]$)
    endCaptures:
      1:
        tag: string
        name: punctuation.definition.string.end.ts
      2:
        tag: invalid
        name: invalid.illegal.newline.ts

  QStringSingle:
    tag: string
    name: string.quoted.single.ts
    begin: (['])
    beginCaptures:
      1:
        tag: string
        name: punctuation.definition.string.begin.ts
    end: (['])|([^\\\n]$)
    endCaptures:
      1:
        tag: string
        name: punctuation.definition.string.end.ts
      2:
        tag: invalid
        name: invalid.illegal.newline.ts

  ExpressionOperators:
    patterns:
      - tag: controlKeyword
        name: keyword.control.flow.ts
        match: (?<![_$A-Za-z0-9])(?:(?<=[.][.][.])|(?<![.]))(await)(?![_$A-Za-z0-9])(?:(?=[.][.][.])|(?![.]))
      - begin: (?<![_$A-Za-z0-9])(?:(?<=[.][.][.])|(?<![.]))(yield)(?![_$A-Za-z0-9])(?:(?=[.][.][.])|(?![.]))(?=\s*\/[*]([^*]|([*][^\/]))*[*]\/\s*[*])
        beginCaptures:
          1:
            tag: controlKeyword
            name: keyword.control.flow.ts
        patterns:
          - { include: "#Comment" }
        end: ([*])
        endCaptures:
          1:
            tag: controlKeyword
            name: keyword.generator.asterisk.ts
      - match: (?<![_$A-Za-z0-9])(?:(?<=[.][.][.])|(?<![.]))(yield)(?![_$A-Za-z0-9])(?:(?=[.][.][.])|(?![.]))(?:\s*([*]))?
        captures:
          1:
            tag: controlKeyword
            name: keyword.control.flow.ts
          2:
            tag: controlKeyword
            name: keyword.generator.asterisk.ts
      - tag: operatorKeyword
        name: keyword.operator.expression.delete.ts
        match: (?<![_$A-Za-z0-9])(?:(?<=[.][.][.])|(?<![.]))delete(?![_$A-Za-z0-9])(?:(?=[.][.][.])|(?![.]))
      - tag: operatorKeyword
        name: keyword.operator.expression.in.ts
        match: (?<![_$A-Za-z0-9])(?:(?<=[.][.][.])|(?<![.]))in(?![_$A-Za-z0-9])(?:(?=[.][.][.])|(?![.]))(?!\()
      - tag: operatorKeyword
        name: keyword.operator.expression.of.ts
        match: (?<![_$A-Za-z0-9])(?:(?<=[.][.][.])|(?<![.]))of(?![_$A-Za-z0-9])(?:(?=[.][.][.])|(?![.]))(?!\()
      - tag: operatorKeyword
        name: keyword.operator.expression.instanceof.ts
        match: (?<![_$A-Za-z0-9])(?:(?<=[.][.][.])|(?<![.]))instanceof(?![_$A-Za-z0-9])(?:(?=[.][.][.])|(?![.]))
      - tag: operatorKeyword
        name: keyword.operator.new.ts
        match: (?<![_$A-Za-z0-9])(?:(?<=[.][.][.])|(?<![.]))new(?![_$A-Za-z0-9])(?:(?=[.][.][.])|(?![.]))
      - tag: operatorKeyword
        name: keyword.operator.expression.void.ts
        match: (?<![_$A-Za-z0-9])(?:(?<=[.][.][.])|(?<![.]))void(?![_$A-Za-z0-9])(?:(?=[.][.][.])|(?![.]))
      - match: (?<![_$A-Za-z0-9])(?:(?<=[.][.][.])|(?<![.]))(as)\s+(const)(?=\s*($|[;,:})\]]))
        captures:
          1:
            tag: controlKeyword
            name: keyword.control.as.ts
          2:
            tag: controlKeyword
            name: storage.modifier.ts
      - tag: derefOperator
        name: keyword.operator.spread.ts
        match: ([.][.][.])
      - tag: updateOperator
        name: keyword.operator.assignment.compound.ts
        match: ([*][=]|(?<!\()[\/][=]|[%][=]|[+][=]|[-][=])
      - tag: updateOperator
        name: keyword.operator.assignment.compound.bitwise.ts
        match: ([&][=]|[\^][=]|[<][<][=]|[>][>][=]|[>][>][>][=]|[|][=])
      - name: keyword.operator.bitwise.shift.ts
        match: ([<][<]|[>][>][>]|[>][>])
      - tag: compareOperator
        name: keyword.operator.comparison.ts
        match: ([=][=][=]|[!][=][=]|[=][=]|[!][=])
      - tag: compareOperator
        name: keyword.operator.relational.ts
        match: ([<][=]|[>][=]|[<][>]|[<]|[>])
      - match: (?<=[_$A-Za-z0-9])([!])\s*(?:([\/][=])|(?:([\/])(?![/*])))
        captures:
          1:
            tag: logicOperator
            name: keyword.operator.logical.ts
          2:
            tag: updateOperator
            name: keyword.operator.assignment.compound.ts
          3:
            tag: arithmeticOperator
            name: keyword.operator.arithmetic.ts
      - tag: logicOperator
        name: keyword.operator.logical.ts
        match: ([!]|[&][&]|[|][|]|[?][?])
      - tag: bitwiseOperator
        name: keyword.operator.bitwise.ts
        match: ([&]|[~]|[\^]|[|])
      - tag: updateOperator
        name: keyword.operator.assignment.ts
        match: ([=])
      - tag: updateOperator
        name: keyword.operator.decrement.ts
        match: ([-][-])
      - tag: updateOperator
        name: keyword.operator.increment.ts
        match: ([+][+])
      - tag: arithmeticOperator
        name: keyword.operator.arithmetic.ts
        match: ([%]|[*]|[\/]|[-]|[+])
      - begin: (?<=[_$A-Za-z0-9)\]])\s*(?=(\/[*]([^*]|([*][^\/]))*[*]\/\s*)+(?:(/=)|(?:(/)(?![/*]))))
        end: (?:(/=)|(?:(/)(?![*]([^*]|([*][^\/]))*[*][\/])))
        endCaptures:
          1:
            tag: updateOperator
            name: keyword.operator.assignment.compound.ts
          2:
            tag: arithmeticOperator
            name: keyword.operator.arithmetic.ts
        patterns:
          - { include: "#Comment" }
      - match: (?<=[_$A-Za-z0-9)\]])\s*(?:(/=)|(?:(/)(?![/*])))
        captures:
          1:
            tag: updateOperator
            name: keyword.operator.assignment.compound.ts
          2:
            tag: arithmeticOperator
            name: keyword.operator.arithmetic.ts
      - tag: punctuation
        name: keyword.operator.type.annotation.ts
        match: ([:])

  NumericLiteral:
    patterns:
      - tag: number
        name: constant.numeric.hex.ts
        match: \b(?<![$])0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\b(?![$])
        captures:
          1:
            tag: number
            name: storage.type.numeric.bigint.ts
      - tag: number
        name: constant.numeric.binary.ts
        match: \b(?<![$])0(?:b|B)[01][01_]*(n)?\b(?![$])
        captures:
          1:
            tag: number
            name: storage.type.numeric.bigint.ts
      - tag: number
        name: constant.numeric.octal.ts
        match: \b(?<![$])0(?:o|O)?[0-7][0-7_]*(n)?\b(?![$])
        captures:
          1:
            tag: number
            name: storage.type.numeric.bigint.ts
      - tag: number
        name: constant.numeric.decimal.ts
        # match: 1.1E+3|1.E+3|.1E+3|1E+3|1.1|1.|.1|1
        match: ((?<![$])(?:(?:\b[0-9][0-9_]*[.][0-9][0-9_]*[eE][+-]?[0-9][0-9_]*[n]?\b)|(?:\b[0-9][0-9_]*[.][eE][+-]?[0-9][0-9_]*[n]?\b)|(?:\B[.][0-9][0-9_]*[eE][+-]?[0-9][0-9_]*[n]?\b)|(?:\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*[n]?\b)|(?:\b[0-9][0-9_]*[.][0-9][0-9_]*[n]?\b)|(?:\b[0-9][0-9_]*[.][n]?\B)|(?:\B[.][0-9][0-9_]*[n]?\b)|(?:\b[0-9][0-9_]*[n]?\b(?![.])))(?![$]))

  BooleanLiteral:
    patterns:
      - tag: bool
        name: constant.language.boolean.true.ts
        match: (?<![_$A-Za-z0-9])(?:(?<=[.][.][.])|(?<![.]))true(?![_$A-Za-z0-9])(?:(?=[.][.][.])|(?![.]))
      - tag: bool
        name: constant.language.boolean.false.ts
        match: (?<![_$A-Za-z0-9])(?:(?<=[.][.][.])|(?<![.]))false(?![_$A-Za-z0-9])(?:(?=[.][.][.])|(?![.]))

  NullLiteral:
    tag: "null"
    name: constant.language.null.ts
    match: (?<![_$A-Za-z0-9])(?:(?<=[.][.][.])|(?<![.]))null(?![_$A-Za-z0-9])(?:(?=[.][.][.])|(?![.]))

  UndefinedLiteral:
    tag: "null"
    name: constant.language.undefined.ts
    match: (?<![_$A-Za-z0-9])(?:(?<=[.][.][.])|(?<![.]))undefined(?![_$A-Za-z0-9])(?:(?=[.][.][.])|(?![.]))

  NumericConstantLiteral:
    patterns:
      - tag: atom
        name: constant.language.nan.ts
        match: (?<![_$A-Za-z0-9])(?:(?<=[.][.][.])|(?<![.]))NaN(?![_$A-Za-z0-9])(?:(?=[.][.][.])|(?![.]))
      - tag: atom
        name: constant.language.infinity.ts
        match: (?<![_$A-Za-z0-9])(?:(?<=[.][.][.])|(?<![.]))Infinity(?![_$A-Za-z0-9])(?:(?=[.][.][.])|(?![.]))

  ArrayLiteral:
    name: meta.array.literal.ts
    begin: \s*(\[)
    beginCaptures:
      1:
        tag: brace
        name: meta.brace.square.ts
    patterns:
      - { include: "#InnerExpression" }
      - { include: "#PunctuationComma" }
    end: (\])
    endCaptures:
      1:
        tag: brace
        name: meta.brace.square.ts

  PunctuationComma:
    tag: punctuation
    name: punctuation.separator.comma.ts
    match: ","

  # ExpressionPunctuations:
  #   patterns:
  #     - { include: "#PunctuationComma" }
  #     - { include: "#PunctuationAccessor" }

  # ParenExpression:
  #   begin: \(
  #   beginCaptures:
  #     "0":
  #       name: meta.brace.round.ts
  #   patterns:
  #     - { include: "#Expression" }
  #   end: \)
  #   endCaptures:
  #     "0":
  #       name: meta.brace.round.ts

  # Identifiers:
  #   patterns:
  #     - match: >-
  #         (?x)(?:(?:([.])|(\?[.](?!\s*[0-9])))\s*)?([_$A-Za-z][_$A-Za-z0-9]*)(?=\s*=\s*(
  #           ((async\s+)?(
  #             (function\s*[(<*]) |
  #             (function\s+) |
  #             ([_$A-Za-z][_$A-Za-z0-9]*\s*=>)
  #           )) |
  #           ((async\s*)?(
  #             ((<\s*$)|((<\s*([_$A-Za-z]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*([_$A-Za-z]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*([_$A-Za-z]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<])*\>)*\>)*>\s*)?[\(]\s*((([\{\[]\s*)?$)|((\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})\s*((:\s*\{?$)|((\s*([^<>\(\)\{\}]|\<([^<>]|\<([^<>]|\<[^<>]+\>)+\>)+\>|\([^\(\)]+\)|\{[^\{\}]+\})+\s*)?=\s*)))|((\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])\s*((:\s*\[?$)|((\s*([^<>\(\)\{\}]|\<([^<>]|\<([^<>]|\<[^<>]+\>)+\>)+\>|\([^\(\)]+\)|\{[^\{\}]+\})+\s*)?=\s*)))))) |
  #             # sure shot arrow functions even if => is on new line
  #         (
  #           (<\s*([_$A-Za-z]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*([_$A-Za-z]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*([_$A-Za-z]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<])*\>)*\>)*>\s*)?
  #           [(]\s*([\/][*]([^*]|([*][^\/]))*[*][\/]\s*)*
  #           (
  #             ([)]\s*:) |                                                                                       # ():
  #             (([.][.][.]\s*)?[_$A-Za-z][_$A-Za-z0-9]*\s*:)                                                                  # [(]param: | [(]...param:
  #           )
  #         ) |

  #         # arrow function possible to detect only with => on same line

  #         (
  #           (<\s*([_$A-Za-z]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*([_$A-Za-z]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*([_$A-Za-z]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<])*\>)*\>)*>\s*)?                                                                                 # typeparameters
  #           \(\s*(\/[*]([^*]|([*][^\/]))*[*]\/\s*)*(([_$A-Za-z]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])|([.][.][.]\s*[_$A-Za-z]))([^()\'\"\`]|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\'([^\'\\]|\[.])*\')|(\"([^\"\\]|\[.])*\")|(\`([^\`\\]|\[.])*\`))*)?\)   # parameters
  #           (\s*:\s*([^<>\(\)\{\}]|\<([^<>]|\<([^<>]|\<[^<>]+\>)+\>)+\>|\([^\(\)]+\)|\{[^\{\}]+\})+)?                                                                        # return type
  #           \s*=>                                                                                               # arrow operator
  #         )
  #           ))
  #         ))
  #       captures:
  #         "1":
  #           name: punctuation.accessor.ts
  #         "2":
  #           name: punctuation.accessor.optional.ts
  #         "3":
  #           name: entity.name.function.ts
  #     - match: (?:([.])|(\?[.](?!\s*[0-9])))\s*(\#?[A-Z][_$0-9A-Z]*)(?![_$A-Za-z0-9])
  #       captures:
  #         "1":
  #           name: punctuation.accessor.ts
  #         "2":
  #           name: punctuation.accessor.optional.ts
  #         "3":
  #           name: variable.other.constant.property.ts
  #     - match: (?:([.])|(\?[.](?!\s*[0-9])))\s*(\#?[_$A-Za-z][_$A-Za-z0-9]*)
  #       captures:
  #         "1":
  #           name: punctuation.accessor.ts
  #         "2":
  #           name: punctuation.accessor.optional.ts
  #         "3":
  #           name: variable.other.property.ts
  #     - name: variable.other.constant.ts
  #       match: ([A-Z][_$0-9A-Z]*)(?![_$A-Za-z0-9])
  #     - name: variable.other.readwrite.ts
  #       match: "[_$A-Za-z][_$A-Za-z0-9]*"

  # PunctuationAccessor:
  #   match: (?:([.])|(\?[.](?!\s*[0-9])))
  #   captures:
  #     "1":
  #       name: punctuation.accessor.ts
  #     "2":
  #       name: punctuation.accessor.optional.ts

  # Template:
  #   patterns:
  #     - { include: "#TemplateCall" }
  #     - name: string.template.ts
  #       begin: ([_$A-Za-z][_$A-Za-z0-9]*)?(`)
  #       beginCaptures:
  #         "1":
  #           name: entity.name.function.tagged-template.ts
  #         "2":
  #           name: punctuation.definition.string.template.begin.ts
  #       patterns:
  #         - { include: "#TemplateSubstitutionElement" }
  #         - { include: "#StringCharacterEscape" }
  #       end: "`"
  #       endCaptures:
  #         "0":
  #           name: punctuation.definition.string.template.end.ts

  # TemplateCall:
  #   patterns:
  #     - name: string.template.ts
  #       begin: >-
  #         (?=(([_$A-Za-z][_$A-Za-z0-9]*\s*\??[.]\s*)*|(\??[.]\s*)?)([_$A-Za-z][_$A-Za-z0-9]*)(<\s*(((keyof|infer|typeof|readonly)\s+)|(([_$A-Za-z][_$A-Za-z0-9]*|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])|(\'([^\'\\]|\[.])*\')|(\"([^\"\\]|\[.])*\")|(\`([^\`\\]|\[.])*\`))(?=\s*([\<\>\,[.]\[]|=>|&(?!&)|\|(?!\|)))))([^<>\(]|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(?<==)\>|\<\s*(((keyof|infer|typeof|readonly)\s+)|(([_$A-Za-z][_$A-Za-z0-9]*|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])|(\'([^\'\\]|\[.])*\')|(\"([^\"\\]|\[.])*\")|(\`([^\`\\]|\[.])*\`))(?=\s*([\<\>\,[.]\[]|=>|&(?!&)|\|(?!\|)))))(([^<>\(]|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(?<==)\>|\<\s*(((keyof|infer|typeof|readonly)\s+)|(([_$A-Za-z][_$A-Za-z0-9]*|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])|(\'([^\'\\]|\[.])*\')|(\"([^\"\\]|\[.])*\")|(\`([^\`\\]|\[.])*\`))(?=\s*([\<\>\,[.]\[]|=>|&(?!&)|\|(?!\|)))))([^<>\(]|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(?<==)\>)*(?<!=)\>))*(?<!=)\>)*(?<!=)>\s*)?`)
  #       patterns:
  #         - begin: (?=(([_$A-Za-z][_$A-Za-z0-9]*\s*\??[.]\s*)*|(\??[.]\s*)?)([_$A-Za-z][_$A-Za-z0-9]*))
  #           patterns:
  #             - name: entity.name.function.tagged-template.ts
  #               match: ([_$A-Za-z][_$A-Za-z0-9]*)
  #           end: >-
  #             (?=(<\s*(((keyof|infer|typeof|readonly)\s+)|(([_$A-Za-z][_$A-Za-z0-9]*|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])|(\'([^\'\\]|\[.])*\')|(\"([^\"\\]|\[.])*\")|(\`([^\`\\]|\[.])*\`))(?=\s*([\<\>\,[.]\[]|=>|&(?!&)|\|(?!\|)))))([^<>\(]|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(?<==)\>|\<\s*(((keyof|infer|typeof|readonly)\s+)|(([_$A-Za-z][_$A-Za-z0-9]*|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])|(\'([^\'\\]|\[.])*\')|(\"([^\"\\]|\[.])*\")|(\`([^\`\\]|\[.])*\`))(?=\s*([\<\>\,[.]\[]|=>|&(?!&)|\|(?!\|)))))(([^<>\(]|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(?<==)\>|\<\s*(((keyof|infer|typeof|readonly)\s+)|(([_$A-Za-z][_$A-Za-z0-9]*|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])|(\'([^\'\\]|\[.])*\')|(\"([^\"\\]|\[.])*\")|(\`([^\`\\]|\[.])*\`))(?=\s*([\<\>\,[.]\[]|=>|&(?!&)|\|(?!\|)))))([^<>\(]|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(?<==)\>)*(?<!=)\>))*(?<!=)\>)*(?<!=)>\s*)?`)
  #       end: (?=`)

  # TemplateSubstitutionElement:
  #   name: meta.template.expression.ts
  #   begin: \$\{
  #   beginCaptures:
  #     "0":
  #       name: punctuation.definition.template-Expression.begin.ts
  #   contentName: meta.embedded.line.ts
  #   patterns:
  #     - { include: "#Expression" }
  #   end: \}
  #   endCaptures:
  #     "0":
  #       name: punctuation.definition.template-Expression.end.ts

  # TypeString:
  #   patterns:
  #     - { include: "#QStringSingle" }
  #     - { include: "#QStringDouble" }
  #     - { include: "#TemplateType" }

  # TemplateType:
  #   patterns:
  #     - { include: "#TemplateCall" }
  #     - name: string.template.ts
  #       begin: ([_$A-Za-z][_$A-Za-z0-9]*)?(`)
  #       beginCaptures:
  #         "1":
  #           name: entity.name.function.tagged-template.ts
  #         "2":
  #           name: punctuation.definition.string.template.begin.ts
  #       patterns:
  #         - { include: "#StringCharacterEscape" }
  #       end: "`"
  #       endCaptures:
  #         "0":
  #           name: punctuation.definition.string.template.end.ts

  # Brackets:
  #   patterns:
  #     - begin: "{"
  #       patterns:
  #         - { include: "#Brackets" }
  #       end: '}|(?=[*][\/])'
  #     - begin: \[
  #       patterns:
  #         - { include: "#Brackets" }
  #       end: \]|(?=[*][\/])
