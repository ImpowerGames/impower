fileTypes: [sd, spark, sparkdown, sdown]
keyEquivalent: ^~S
name: Sparkdown
scopeName: text.source.sparkdown
uuid: E26C862D-2A5E-4F10-B0C3-D6BCB838CB7F

patterns:
  - { include: "#Comment" }
  - { include: "#Note" }
  - { include: "#Synopsis" }
  - { include: "#PageBreak" }
  - { include: "#Jump" }
  - { include: "#Centered" }
  - { include: "#CenteredAngle" }
  - { include: "#Condition" }
  - { include: "#Logic" }
  - { include: "#List" }
  - { include: "#Import" }
  - { include: "#Variable" }
  - { include: "#Struct" }
  - { include: "#Action" }

repository:
  Comment:
    patterns:
      - { include: "#CommentLine" }
      - { include: "#CommentBlock" }

  CommentBlock:
    tag: comment
    name: comment.block.sd
    begin: ([/][*])
    beginCaptures:
      1:
        tag: blockComment
        name: comment.block.open.sd
    end: ([*][/])
    endCaptures:
      1:
        tag: blockComment
        name: comment.block.close.sd

  CommentLine:
    tag: comment
    name: comment.line.sd
    match: (\/\/)(.*)
    captures:
      1:
        tag: lineComment
        name: comment.line.double-slash.sd
      2:
        tag: comment
        name: comment.line.content.sd

  Note:
    tag: comment
    name: comment.line.note.sd
    match: (\[{2})([^\]]*)(\]{2})
    captures:
      1:
        tag: lineComment
        name: comment.line.double-square-bracket.sd
      2:
        tag: comment
        name: comment.line.note.sd
      3:
        tag: lineComment
        name: comment.line.double-square-bracket.sd

  Synopsis:
    tag: comment
    name: comment.line.synopsis.sd
    match: ^([ \t]*)(?![=]{2,})([=])([ ]*)(.*)
    captures:
      2:
        tag: lineComment
        name: comment.line.equal.sd
      4:
        tag: comment
        name: comment.line.synopsis.sd

  PageBreak:
    tag: contentSeparator
    name: markup.heading.separator.sd
    match: ^([ \t]*)(===+)
    captures:
      2:
        tag: contentSeparator
        name: markup.heading.separator.equals.sd

  Jump:
    match: ^([ \t]*)([>])([ ]*)([^\n\r ]+|[{][^\n\r<]+[}])?$
    captures:
      2:
        tag: keyword
        name: storage.type.jump.sd
      4:
        tag: labelName
        name: keyword.control.export.sd

  Centered:
    tag: quote
    name: keyword.other.centered.sd
    match: ^([ \t]*)(:)([^\n\r:]+)(:)
    captures:
      2:
        tag: quote
        name: storage.type.centered.colon-left.sd
      3:
        patterns:
          - { include: "#Comment" }
          - { include: "#Note" }
          - { include: "#Inline" }
      4:
        tag: quote
        name: storage.type.centered.colon-right.sd

  CenteredAngle:
    tag: quote
    name: keyword.other.centered.sd
    match: ^([ \t]*)(>)([^\n\r<>]+)(<)
    captures:
      2:
        tag: quote
        name: storage.type.centered.angle-left.sd
      3:
        patterns:
          - { include: "#Comment" }
          - { include: "#Note" }
          - { include: "#Inline" }
      4:
        tag: quote
        name: storage.type.centered.angle-right.sd

  Condition:
    match: ^([ \t]*)([*])($|[ ]+)($|if|elseif|else)(?:($|[ ]+)($|(?:[ ]+|`[^\n\r`]*`|"[^\n\r"]*"|'[^\n\r']*'|[^\n\r:])+))?([ ]*)($|[:])
    captures:
      2:
        tag: keyword
        name: storage.type.condition.sd
      4:
        tag: logicOperator
        name: keyword.other.condition.sd
      6:
        patterns:
          - { include: "#Expression" }
      8:
        tag: punctuation
        name: punctuation.separator.colon.sd

  Logic:
    match: ^([ \t]*)([*])($|[ ]+)([^\n\r]*)?
    captures:
      2:
        tag: keyword
        name: storage.type.logic.sd
      4:
        patterns:
          - { include: "#Expression" }

  List:
    match: ^([ \t]*)([*+-])($|[ ]+)
    captures:
      2:
        tag: keyword
        name: storage.type.list.sd

  Import:
    match: ^([ \t]*)(import)($|[ ]+)($|[^\n\r]+)
    captures:
      2:
        tag: logicOperator
        name: keyword.control.import.sd
      4:
        patterns:
          - { include: "#Expression" }

  Variable:
    match: ^([ \t]*)([@])([ ]+)($|[_a-zA-Z]+[_a-zA-Z0-9]*(?:\[\])*)($|[ ]+)([^\n\r:]+)(?![:])$
    captures:
      2:
        tag: keyword
        name: storage.type.variable.sd
      4:
        tag: typeName
        name: support.type.primitive.sd
      6:
        patterns:
          - { include: "#Expression" }

  Struct:
    begin: ^([ \t]*)(@)($|[ ]+)($|[_a-zA-Z]+[_a-zA-Z0-9]*)($|[ ]+)($|[_a-zA-Z]+[_a-zA-Z0-9]*)([ ]*)(?:([(])([ ]*)($|[_a-zA-Z]+[_a-zA-Z0-9]*)([ ]*)($|[)]))?([ ]*)([:]?)([ ]*)$
    beginCaptures:
      2:
        tag: keyword
        name: storage.type.struct.sd
      4:
        tag: typeName
        name: support.type.primitive.struct.sd
      6:
        tag: variableName
        name: variable.other.readwrite.struct.sd
      8:
        tag: punctuation
        name: punctuation.definition.struct.sd
      10:
        tag: typeName
        name: entity.name.type.interface.struct.sd
      12:
        tag: punctuation
        name: punctuation.definition.struct.sd
      14:
        tag: punctuation
        name: punctuation.definition.struct.sd
    patterns:
      - { include: "#YAML" }
    end: (?=@|^[\n\r\t ]*$)

  # TODO

  Inline:
    tag: content
    name: meta.paragraph.text.sd
    match: ([^\n\r<]+)

  Action:
    tag: content
    name: meta.paragraph.text.sd
    match: ^((?:(?![\/][\/]|[\/][*]).)+)$

  # YAML (stricter subset)

  YAML:
    patterns:
      - { include: "#Comment" }
      - { include: "#BlockArrayIndented" }
      - { include: "#BlockScalarIndented" }
      - { include: "#BlockMapIndented" }
      - { include: "#ExpressionIndented" }

  BlockArrayIndented:
    match: ([ ]{2,}|[\t]+)([-])([\t ]*)([^\n\r]*)$
    captures:
      1:
        tag: content
        name: markup.raw.whitespace.indent.yaml.sd
      2:
        tag: keyword
        name: storage.type.array.yaml.sd
      3:
        tag: content
        name: markup.raw.whitespace.yaml.sd
      4:
        patterns:
          - { include: "#Comment" }
          - { include: "#BlockScalar" }
          - { include: "#Expression" }

  BlockScalarIndented:
    match: ([ ]{2,}|[\t]+)(?![-])([^\n\r:]+)([:])([\t ]+)([^\n\r:]+)$
    captures:
      1:
        tag: content
        name: markup.raw.whitespace.indent.yaml.sd
      2:
        tag: keyword
        name: storage.type.map.yaml.sd
      3:
        tag: punctuation
        name: punctuation.separator.colon.yaml.sd
      4:
        tag: content
        name: markup.raw.whitespace.yaml.sd
      5:
        patterns:
          - { include: "#Comment" }
          - { include: "#BlockScalar" }
          - { include: "#Expression" }

  BlockMapIndented:
    match: ([ ]{2,}|[\t]+)(?![-])([^\n\r:]+)([:])([\t ]*)$
    captures:
      1:
        tag: content
        name: markup.raw.whitespace.indent.yaml.sd
      2:
        tag: keyword
        name: storage.type.map.yaml.sd
      3:
        tag: punctuation
        name: punctuation.separator.colon.yaml.sd

  ExpressionIndented:
    match: ([ ]{2,}|[\t]+)([^\n\r]+)$
    captures:
      1:
        tag: content
        name: markup.raw.whitespace.indent.yaml.sd
      2:
        patterns:
          - { include: "#Expression" }

  BlockScalar:
    begin: (?:(\|)|(>))([1-9])?([-+])?(.*\n?)
    beginCaptures:
      1:
        tag: definitionKeyword
        name: punctuation.definition.block.scalar.literal.yaml.sd
      2:
        tag: definitionKeyword
        name: punctuation.definition.block.scalar.folded.yaml.sd
      3:
        tag: definitionKeyword
        name: constant.numeric.indentation-indicator.yaml.sd
      4:
        tag: definitionKeyword
        name: support.other.chomping-indicator.yaml.sd
      5:
        patterns:
          - { include: "#Comment" }
          - { include: "#ExpectedCommentOrNewline" }
    patterns:
      - { include: "#BlockScalarContent" }
    end: ^(?=\S)

  BlockScalarContent:
    tag: definitionKeyword
    name: string.unquoted.block.yaml.sd
    begin: ^([ ]+)(?![ ])
    end: ^(?!\s*$)

  ExpectedCommentOrNewline:
    tag: invalid
    name: invalid.illegal.expected-comment-or-newline.yaml.sd
    match: .+

  # TypeScript (expression subset)

  Expression:
    patterns:
      - { include: "#String" }
      - { include: "#Comment" }
      - { include: "#ExpressionOperators" }
      - { include: "#NumericLiteral" }
      - { include: "#BooleanLiteral" }
      - { include: "#NullLiteral" }
      - { include: "#UndefinedLiteral" }
      - { include: "#NumericConstantLiteral" }
      - { include: "#Whitespace" }
      - { include: "#ArrayLiteral" }
      - { include: "#ParenExpression" }
      - { include: "#Identifiers" }
      - { include: "#ExpressionPunctuations" }

  Whitespace:
    tag: content
    name: markup.raw.whitespace.ts.sd
    match: ([\t ]+)

  String:
    patterns:
      - { include: "#QStringSingle" }
      - { include: "#QStringDouble" }
      - { include: "#Template" }

  QStringDouble:
    tag: string
    name: string.quoted.double.ts.sd
    begin: (["])
    beginCaptures:
      1:
        tag: quote
        name: punctuation.definition.string.begin.ts.sd
    end: (["])|([^\\\n]$)
    endCaptures:
      1:
        tag: quote
        name: punctuation.definition.string.end.ts.sd
      2:
        tag: invalid
        name: invalid.illegal.newline.ts.sd

  QStringSingle:
    tag: string
    name: string.quoted.single.ts.sd
    begin: (['])
    beginCaptures:
      1:
        tag: quote
        name: punctuation.definition.string.begin.ts.sd
    end: (['])|([^\\\n]$)
    endCaptures:
      1:
        tag: quote
        name: punctuation.definition.string.end.ts.sd
      2:
        tag: invalid
        name: invalid.illegal.newline.ts.sd

  ExpressionOperators:
    patterns:
      - { include: "#AwaitOperator" }
      - { include: "#YieldOperator" }
      - { include: "#YieldIteratorOperator" }
      - { include: "#DeleteOperator" }
      - { include: "#InOperator" }
      - { include: "#OfOperator" }
      - { include: "#InstanceOfOperator" }
      - { include: "#NewOperator" }
      - { include: "#VoidOperator" }
      - { include: "#AsOperator" }
      - { include: "#SpreadOperator" }
      - { include: "#AssignArithmeticOperator" }
      - { include: "#AssignBitwiseOperator" }
      - { include: "#BitwiseShiftOperator" }
      - { include: "#CompareEqualOperator" }
      - { include: "#CompareRelativeOperator" }
      - { include: "#NegateOperator" }
      - { include: "#LogicalOperator" }
      - { include: "#BitwiseOperator" }
      - { include: "#AssignEqualOperator" }
      - { include: "#DecrementOperator" }
      - { include: "#IncrementOperator" }
      - { include: "#ArithmeticOperator" }
      - { include: "#AssignMultiplyOperator" }
      - { include: "#AssignDivideOperator" }
      - { include: "#ColonOperator" }

  AwaitOperator:
    tag: controlKeyword
    name: keyword.control.flow.ts.sd
    match: (?<![_$A-Za-z0-9])(?:(?<=[.][.][.])|(?<![.]))(await)(?![_$A-Za-z0-9])(?:(?=[.][.][.])|(?![.]))

  YieldOperator:
    begin: (?<![_$A-Za-z0-9])(?:(?<=[.][.][.])|(?<![.]))(yield)(?![_$A-Za-z0-9])(?:(?=[.][.][.])|(?![.]))(?=\s*\/[*]([^*]|([*][^\/]))*[*]\/\s*[*])
    beginCaptures:
      1:
        tag: controlKeyword
        name: keyword.control.flow.ts.sd
    patterns:
      - { include: "#Comment" }
    end: ([*])
    endCaptures:
      1:
        tag: controlKeyword
        name: keyword.generator.asterisk.ts.sd

  YieldIteratorOperator:
    match: (?<![_$A-Za-z0-9])(?:(?<=[.][.][.])|(?<![.]))(yield)(?![_$A-Za-z0-9])(?:(?=[.][.][.])|(?![.]))(?:\s*([*]))?
    captures:
      1:
        tag: controlKeyword
        name: keyword.control.flow.ts.sd
      2:
        tag: controlKeyword
        name: keyword.generator.asterisk.ts.sd

  DeleteOperator:
    tag: operatorKeyword
    name: keyword.operator.expression.delete.ts.sd
    match: (?<![_$A-Za-z0-9])(?:(?<=[.][.][.])|(?<![.]))delete(?![_$A-Za-z0-9])(?:(?=[.][.][.])|(?![.]))

  InOperator:
    tag: operatorKeyword
    name: keyword.operator.expression.in.ts.sd
    match: (?<![_$A-Za-z0-9])(?:(?<=[.][.][.])|(?<![.]))in(?![_$A-Za-z0-9])(?:(?=[.][.][.])|(?![.]))(?!\()

  OfOperator:
    tag: operatorKeyword
    name: keyword.operator.expression.of.ts.sd
    match: (?<![_$A-Za-z0-9])(?:(?<=[.][.][.])|(?<![.]))of(?![_$A-Za-z0-9])(?:(?=[.][.][.])|(?![.]))(?!\()

  InstanceOfOperator:
    tag: operatorKeyword
    name: keyword.operator.expression.instanceof.ts.sd
    match: (?<![_$A-Za-z0-9])(?:(?<=[.][.][.])|(?<![.]))instanceof(?![_$A-Za-z0-9])(?:(?=[.][.][.])|(?![.]))

  NewOperator:
    tag: operatorKeyword
    name: keyword.operator.new.ts.sd
    match: (?<![_$A-Za-z0-9])(?:(?<=[.][.][.])|(?<![.]))new(?![_$A-Za-z0-9])(?:(?=[.][.][.])|(?![.]))

  VoidOperator:
    tag: operatorKeyword
    name: keyword.operator.expression.void.ts.sd
    match: (?<![_$A-Za-z0-9])(?:(?<=[.][.][.])|(?<![.]))void(?![_$A-Za-z0-9])(?:(?=[.][.][.])|(?![.]))

  AsOperator:
    match: (?<![_$A-Za-z0-9])(?:(?<=[.][.][.])|(?<![.]))(as)\s+(const)(?=\s*($|[;,:})\]]))
    captures:
      1:
        tag: controlKeyword
        name: keyword.control.as.ts.sd
      2:
        tag: controlKeyword
        name: storage.modifier.ts.sd

  SpreadOperator:
    tag: derefOperator
    name: keyword.operator.spread.ts.sd
    match: ([.][.][.])

  AssignArithmeticOperator:
    tag: updateOperator
    name: keyword.operator.assignment.compound.ts.sd
    match: ([*][=]|(?<!\()[\/][=]|[%][=]|[+][=]|[-][=])

  AssignBitwiseOperator:
    tag: updateOperator
    name: keyword.operator.assignment.compound.bitwise.ts.sd
    match: ([&][=]|[\^][=]|[<][<][=]|[>][>][=]|[>][>][>][=]|[|][=])

  BitwiseShiftOperator:
    tag: updateOperator
    name: keyword.operator.bitwise.shift.ts.sd
    match: ([<][<]|[>][>][>]|[>][>])

  CompareEqualOperator:
    tag: compareOperator
    name: keyword.operator.comparison.ts.sd
    match: ([=][=][=]|[!][=][=]|[=][=]|[!][=])

  CompareRelativeOperator:
    tag: compareOperator
    name: keyword.operator.relational.ts.sd
    match: ([<][=]|[>][=]|[<][>]|[<]|[>])

  NegateOperator:
    tag: updateOperator
    match: (?<=[_$A-Za-z0-9])([!])\s*(?:([\/][=])|(?:([\/])(?![/*])))
    captures:
      1:
        tag: logicOperator
        name: keyword.operator.logical.ts.sd
      2:
        tag: updateOperator
        name: keyword.operator.assignment.compound.ts.sd
      3:
        tag: arithmeticOperator
        name: keyword.operator.arithmetic.ts.sd

  LogicalOperator:
    tag: logicOperator
    name: keyword.operator.logical.ts.sd
    match: ([!]|[&][&]|[|][|]|[?][?])

  BitwiseOperator:
    tag: bitwiseOperator
    name: keyword.operator.bitwise.ts.sd
    match: ([&]|[~]|[\^]|[|])

  AssignEqualOperator:
    tag: updateOperator
    name: keyword.operator.assignment.ts.sd
    match: ([=])

  DecrementOperator:
    tag: updateOperator
    name: keyword.operator.decrement.ts.sd
    match: ([-][-])

  IncrementOperator:
    tag: updateOperator
    name: keyword.operator.increment.ts.sd
    match: ([+][+])

  ArithmeticOperator:
    tag: arithmeticOperator
    name: keyword.operator.arithmetic.ts.sd
    match: ([%]|[*]|[\/]|[-]|[+])

  AssignMultiplyOperator:
    begin: (?<=[_$A-Za-z0-9)\]])\s*(?=(\/[*]([^*]|([*][^\/]))*[*]\/\s*)+(?:(/=)|(?:(/)(?![/*]))))
    patterns:
      - { include: "#Comment" }
    end: (?:(/=)|(?:(/)(?![*]([^*]|([*][^\/]))*[*][\/])))
    endCaptures:
      1:
        tag: updateOperator
        name: keyword.operator.assignment.compound.ts.sd
      2:
        tag: arithmeticOperator
        name: keyword.operator.arithmetic.ts.sd

  AssignDivideOperator:
    match: (?<=[_$A-Za-z0-9)\]])\s*(?:(/=)|(?:(/)(?![/*])))
    captures:
      1:
        tag: updateOperator
        name: keyword.operator.assignment.compound.ts.sd
      2:
        tag: arithmeticOperator
        name: keyword.operator.arithmetic.ts.sd

  ColonOperator:
    tag: punctuation
    name: keyword.operator.type.annotation.ts.sd
    match: ([:])

  NumericLiteral:
    patterns:
      - { include: "#HexNumber" }
      - { include: "#BinaryNumber" }
      - { include: "#OctalNumber" }
      - { include: "#DecimalNumber" }

  HexNumber:
    tag: number
    name: constant.numeric.hex.ts.sd
    match: \b(?<![$])0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\b(?![$])
    captures:
      1:
        tag: number
        name: storage.type.numeric.bigint.ts.sd

  BinaryNumber:
    tag: number
    name: constant.numeric.binary.ts.sd
    match: \b(?<![$])0(?:b|B)[01][01_]*(n)?\b(?![$])
    captures:
      1:
        tag: number
        name: storage.type.numeric.bigint.ts.sd

  OctalNumber:
    tag: number
    name: constant.numeric.octal.ts.sd
    match: \b(?<![$])0(?:o|O)?[0-7][0-7_]*(n)?\b(?![$])
    captures:
      1:
        tag: number
        name: storage.type.numeric.bigint.ts.sd

  DecimalNumber:
    tag: number
    name: constant.numeric.decimal.ts.sd
    # match: 1.1E+3|1.E+3|.1E+3|1E+3|1.1|1.|.1|1
    match: ((?<![$])(?:(?:\b[0-9][0-9_]*[.][0-9][0-9_]*[eE][+-]?[0-9][0-9_]*[n]?\b)|(?:\b[0-9][0-9_]*[.][eE][+-]?[0-9][0-9_]*[n]?\b)|(?:\B[.][0-9][0-9_]*[eE][+-]?[0-9][0-9_]*[n]?\b)|(?:\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*[n]?\b)|(?:\b[0-9][0-9_]*[.][0-9][0-9_]*[n]?\b)|(?:\b[0-9][0-9_]*[.][n]?\B)|(?:\B[.][0-9][0-9_]*[n]?\b)|(?:\b[0-9][0-9_]*[n]?\b(?![.])))(?![$]))

  BooleanLiteral:
    patterns:
      - { include: "#BooleanTrue" }
      - { include: "#BooleanFalse" }

  BooleanTrue:
    tag: bool
    name: constant.language.boolean.true.ts.sd
    match: (?<![_$A-Za-z0-9])(?:(?<=[.][.][.])|(?<![.]))true(?![_$A-Za-z0-9])(?:(?=[.][.][.])|(?![.]))

  BooleanFalse:
    tag: bool
    name: constant.language.boolean.false.ts.sd
    match: (?<![_$A-Za-z0-9])(?:(?<=[.][.][.])|(?<![.]))false(?![_$A-Za-z0-9])(?:(?=[.][.][.])|(?![.]))

  NullLiteral:
    tag: "null"
    name: constant.language.null.ts.sd
    match: (?<![_$A-Za-z0-9])(?:(?<=[.][.][.])|(?<![.]))null(?![_$A-Za-z0-9])(?:(?=[.][.][.])|(?![.]))

  UndefinedLiteral:
    tag: "null"
    name: constant.language.undefined.ts.sd
    match: (?<![_$A-Za-z0-9])(?:(?<=[.][.][.])|(?<![.]))undefined(?![_$A-Za-z0-9])(?:(?=[.][.][.])|(?![.]))

  NumericConstantLiteral:
    patterns:
      - { include: "#NaN" }
      - { include: "#Infinity" }

  NaN:
    tag: atom
    name: constant.language.nan.ts.sd
    match: (?<![_$A-Za-z0-9])(?:(?<=[.][.][.])|(?<![.]))NaN(?![_$A-Za-z0-9])(?:(?=[.][.][.])|(?![.]))

  Infinity:
    tag: atom
    name: constant.language.infinity.ts.sd
    match: (?<![_$A-Za-z0-9])(?:(?<=[.][.][.])|(?<![.]))Infinity(?![_$A-Za-z0-9])(?:(?=[.][.][.])|(?![.]))

  ArrayLiteral:
    name: meta.array.literal.ts.sd
    brackets: true
    begin: (\[)
    beginCaptures:
      1:
        tag: brace
        name: meta.brace.square.ts.sd
    patterns:
      - { include: "#Expression" }
      - { include: "#PunctuationComma" }
    end: (\])
    endCaptures:
      1:
        tag: brace
        name: meta.brace.square.ts.sd

  PunctuationComma:
    tag: punctuation
    name: punctuation.separator.comma.ts.sd
    match: ","

  ParenExpression:
    brackets: true
    begin: ([(])
    beginCaptures:
      1:
        tag: paren
        name: meta.brace.round.ts.sd
    patterns:
      - { include: "#Expression" }
    end: ([)])
    endCaptures:
      1:
        tag: paren
        name: meta.brace.round.ts.sd

  Identifiers:
    patterns:
      - { include: "#AccessorIdentifier" }
      - { include: "#NestedAccessorIdentifier" }
      - { include: "#ConstantVariableIdentifier" }
      - { include: "#WritableVariableIdentifier" }

  AccessorIdentifier:
    match: (?:([.])|(\?[.](?!\s*[0-9])))\s*([#]?[A-Z][_$0-9A-Z]*)(?![_$A-Za-z0-9])
    captures:
      1:
        tag: punctuation
        name: punctuation.accessor.ts.sd
      2:
        tag: punctuation
        name: punctuation.accessor.optional.ts.sd
      3:
        tag: variableName
        name: variable.other.constant.property.ts.sd

  NestedAccessorIdentifier:
    match: (?:([.])|(\?[.](?!\s*[0-9])))\s*([#]?[_$A-Za-z][_$A-Za-z0-9]*)
    captures:
      1:
        tag: punctuation
        name: punctuation.accessor.ts.sd
      2:
        tag: punctuation
        name: punctuation.accessor.optional.ts.sd
      3:
        tag: variableName
        name: variable.other.property.ts.sd

  ConstantVariableIdentifier:
    tag: variableName
    name: variable.other.constant.ts.sd
    match: ([A-Z][_$0-9A-Z]*)(?![_$A-Za-z0-9])

  WritableVariableIdentifier:
    tag: variableName
    name: variable.other.readwrite.ts.sd
    match: "[_$A-Za-z][_$A-Za-z0-9]*"

  ExpressionPunctuations:
    patterns:
      - { include: "#PunctuationComma" }
      - { include: "#PunctuationAccessor" }

  PunctuationAccessor:
    match: (?:([.])|(\?[.](?!\s*[0-9])))
    captures:
      1:
        tag: variableName
        name: punctuation.accessor.ts.sd
      2:
        tag: punctuation
        name: punctuation.accessor.optional.ts.sd

  Template:
    patterns:
      - { include: "#TemplateSubstitution" }

  TemplateSubstitution:
    begin: ([_$A-Za-z][_$A-Za-z0-9]*)?([`])
    beginCaptures:
      1:
        tag: tagName
        name: entity.name.function.tagged-template.ts.sd
      2:
        tag: string
        name: punctuation.definition.string.template.begin.ts.sd
    patterns:
      - { include: "#TemplateSubstitutionElement" }
      - { include: "#StringCharacterEscape" }
      - { include: "#StringContent" }
    end: ([`])
    endCaptures:
      1:
        tag: string
        name: punctuation.definition.string.template.end.ts.sd

  TemplateSubstitutionElement:
    brackets: true
    name: meta.template.expression.ts.sd
    begin: ([$]?[{])
    beginCaptures:
      1:
        tag: keyword
        name: punctuation.definition.template-expression.begin.ts.sd
    contentName: meta.embedded.line.ts.sd
    patterns:
      - { include: "#Expression" }
    end: ([}])
    endCaptures:
      1:
        tag: keyword
        name: punctuation.definition.template-expression.end.ts.sd

  StringCharacterEscape:
    tag: character
    name: constant.character.escape.ts
    match: ([\\])(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|u\{[0-9A-Fa-f]+\}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.|$)

  StringContent:
    tag: string
    name: string.template.ts.sd
    match: ((?:(?![$]?[{])[^\n\r`])+)
