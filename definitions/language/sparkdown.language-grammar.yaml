fileTypes: [sd, spark, sparkdown, sdown]
keyEquivalent: ^~S
name: Sparkdown
scopeName: text.source.sparkdown
uuid: E26C862D-2A5E-4F10-B0C3-D6BCB838CB7F

patterns:
  - { include: "#Comment" }
  - { include: "#Image" }
  - { include: "#Audio" }
  - { include: "#PageBreak" }
  - { include: "#Synopsis" }
  - { include: "#FrontMatter" }
  - { include: "#Struct" }
  - { include: "#Variable" }
  - { include: "#Centered" }
  - { include: "#CenteredAngle" }
  - { include: "#Jump" }
  - { include: "#Condition" }
  - { include: "#Logic" }
  - { include: "#Choice" }
  - { include: "#Import" }
  - { include: "#Load" }
  - { include: "#Repeat" }
  - { include: "#Return" }
  - { include: "#Scene" }
  - { include: "#Section" }
  - { include: "#Transition" }
  - { include: "#Dialogue" }
  - { include: "#Lyric" }
  - { include: "#Action" }

repository:
  Comment:
    tag: lineComment
    name: entity.comment.sd
    match: ([/][/][ ]+)(.*)$
    captures:
      1:
        tag: definition(lineComment)
        name: comment.line.double-slash.sd
      2:
        tag: lineComment
        name: comment.line.content.sd

  Image:
    tag: blockComment
    name: entity.image.sd
    match: ^([ \t]*)(\[{2})([^\]]*)(\]{2})([ ]*)($|[/][/][ ]+.*)($\n?)
    captures:
      2:
        tag: definition(blockComment)
        name: comment.block.open.image.sd
      3:
        tag: blockComment
        name: comment.block.content.image.sd
      4:
        tag: definition(blockComment)
        name: comment.block.close.image.sd
      5:
        tag: content
        name: markup.raw.whitespace.sd
      6:
        patterns:
          - { include: "#Comment" }

  Audio:
    tag: blockComment
    name: entity.audio.sd
    match: ^([ \t]*)([(]{2})([^)]*)([)]{2})([ ]*)($|[/][/][ ]+.*)($\n?)
    captures:
      2:
        tag: definition(blockComment)
        name: comment.block.open.audio.sd
      3:
        tag: blockComment
        name: comment.block.content.audio.sd
      4:
        tag: definition(blockComment)
        name: comment.block.close.audio.sd
      5:
        tag: content
        name: markup.raw.whitespace.sd
      6:
        patterns:
          - { include: "#Comment" }

  PageBreak:
    tag: meta
    name: entity.page-break.sd
    match: ^([ \t]*)(===+)($|[/][/][ ]+.*)$
    captures:
      2:
        tag: contentSeparator
        name: entity.separator.sd
      3:
        patterns:
          - { include: "#Comment" }

  Synopsis:
    tag: docComment
    name: entity.synopsis.sd
    match: ^([ \t]*)(?![=]{2,})([=])([ ]*)((?:(?![/][/][ ]+).)*)($|[/][/][ ]+.*)$
    captures:
      2:
        tag: definition(docComment)
        name: comment.line.equal.synopsis.sd
      4:
        tag: docComment
        name: comment.line.content.synopsis.sd
      5:
        patterns:
          - { include: "#Comment" }

  Jump:
    tag: meta
    name: entity.jump.sd
    match: ^([ \t]*)([>])([ ]*)([^\n\r ]+|[{].+[}])?([ ]*)($|[/][/][ ]+.*)$
    captures:
      2:
        tag: keyword
        name: storage.type.jump.sd
      4:
        tag: heading
        name: keyword.control.export.jump.sd
      5:
        tag: content
        name: markup.raw.whitespace.sd
      6:
        patterns:
          - { include: "#Comment" }

  Centered:
    tag: monospace
    name: entity.centered.sd
    match: ^([ \t]*)([|])([ ]+)?((?:(?![ ]+[|]).)*)([ ]*)([|])([ ]*)($|[/][/][ ]+.*)$
    captures:
      2:
        tag: bracket
        name: storage.type.centered.bar-left.sd
      3:
        tag: bracket
      4:
        tag: special(monospace)
        name: keyword.centered.sd
        patterns:
          - { include: "#Comment" }
          - { include: "#Inline" }
      5:
        tag: bracket
      6:
        tag: bracket
        name: storage.type.centered.bar-right.sd
      7:
        tag: content
        name: markup.raw.whitespace.sd
      8:
        patterns:
          - { include: "#Comment" }

  CenteredAngle:
    tag: monospace
    name: entity.centered.sd
    match: ^([ \t]*)([>])([ ]+)?((?:(?![ ]+[<]).)*)([ ]*)([<])([ ]*)($|[/][/][ ]+.*)$
    captures:
      2:
        tag: bracket
        name: storage.type.centered.angle-left.sd
      3:
        tag: bracket
      4:
        tag: special(monospace)
        name: keyword.centered.sd
        patterns:
          - { include: "#Comment" }
          - { include: "#Inline" }
      5:
        tag: bracket
      6:
        tag: bracket
        name: storage.type.centered.angle-right.sd
      7:
        tag: content
        name: markup.raw.whitespace.sd
      8:
        patterns:
          - { include: "#Comment" }

  Condition:
    tag: meta
    name: entity.condition.sd
    match: ^([ \t]*)([*])($|[ ]+)($|if|elseif|else)(?:($|[ ]+)($|(?:[ ]+|`[^\n\r`]*`|"[^\n\r"]*"|'[^\n\r']*'|[^\n\r:])+))?([ ]*)($|[:])([ ]*)($|[/][/][ ]+.*)$
    captures:
      2:
        tag: keyword
        name: storage.type.condition.sd
      4:
        tag: logicOperator
        name: keyword.other.condition.sd
      6:
        patterns:
          - { include: "#Expression" }
      8:
        tag: content
        name: punctuation.separator.colon.sd
      9:
        tag: content
        name: markup.raw.whitespace.sd
      10:
        patterns:
          - { include: "#Comment" }

  Logic:
    tag: meta
    name: entity.logic.sd
    match: ^([ \t]*)([*])($|[ ]+)($|.+)$
    captures:
      2:
        tag: keyword
        name: storage.type.logic.sd
      4:
        patterns:
          - { include: "#Expression" }

  Choice:
    match: ^([ \t]*)([+-])($|[ ]+)(?:([^\n\r>]+))?([ ]*)(?:([>])([ ]*)((?:(?![/][/][ ]+).)*)?)?($|[/][/][ ]+.*)$
    captures:
      2:
        tag: list
        name: storage.type.list.sd
      4:
        patterns:
          - { include: "#InlineString" }
      6:
        tag: keyword
        name: storage.type.jump.sd
      8:
        tag: heading
        name: keyword.control.export.jump.sd
      9:
        patterns:
          - { include: "#Comment" }

  Import:
    tag: meta
    name: entity.import.sd
    match: ^([ \t]*)(import)($|[ ]+)(?:(?:($|[*])($|[ ]+)(?:($|as)($|[ ]+))?)?(?:((?!from)[_a-zA-Z0-9]+)($|[ ]+))?(?:($|from|[_a-zA-Z0-9]+)($|[ ]+))?)?($|["'].*)$
    captures:
      2:
        tag: moduleKeyword
        name: keyword.control.import.sd
      4:
        patterns:
          - { include: "#KeywordAll" }
          - { include: "#VariableName" }
      6:
        patterns:
          - { include: "#KeywordAs" }
          - { include: "#VariableName" }
      8:
        patterns:
          - { include: "#VariableName" }
      10:
        patterns:
          - { include: "#KeywordFrom" }
          - { include: "#VariableName" }
      12:
        patterns:
          - { include: "#String" }

  VariableName:
    tag: variableName
    name: variable.other.readwrite.alias.sd
    match: ([_a-zA-Z]+[_a-zA-Z0-9]*)

  KeywordAll:
    tag: keyword
    name: constant.language.import-export-all.sd
    match: ([*])

  KeywordAs:
    tag: moduleKeyword
    name: keyword.control.as.sd
    match: (as)

  KeywordFrom:
    tag: moduleKeyword
    name: keyword.control.from.sd
    match: (from)

  Load:
    tag: meta
    name: entity.load.sd
    match: ^([ \t]*)(load)($|[ ]+)(?:(?:($|[*])($|[ ]+)(?:($|as)($|[ ]+))?)?(?:((?!from)[_a-zA-Z0-9]+)($|[ ]+))?(?:($|from|[_a-zA-Z0-9]+)($|[ ]+))?)?($|["'].*)$
    captures:
      2:
        tag: moduleKeyword
        name: keyword.control.load.sd
      4:
        patterns:
          - { include: "#KeywordAll" }
          - { include: "#VariableName" }
      6:
        patterns:
          - { include: "#KeywordAs" }
          - { include: "#VariableName" }
      8:
        patterns:
          - { include: "#VariableName" }
      10:
        patterns:
          - { include: "#KeywordFrom" }
          - { include: "#VariableName" }
      12:
        patterns:
          - { include: "#String" }

  Struct:
    tag: meta
    name: entity.struct.sd
    begin: ^([ \t]*)(@)($|[ ]+)($|[_a-zA-Z]+[_a-zA-Z0-9]*)($|[ ]+)($|[_a-zA-Z]+[_a-zA-Z0-9]*)([ ]*)(?:([(])([ ]*)($|[_a-zA-Z]+[_a-zA-Z0-9]*)([ ]*)($|[)]))?([ ]*)([:]?)([ \t]*)($|[/][/][ ]+.*)$
    beginCaptures:
      2:
        tag: definitionKeyword
        name: storage.type.struct.sd
      4:
        tag: typeName
        name: support.type.primitive.struct.sd
      6:
        tag: definition(variableName)
        name: variable.other.constant.struct.sd
      8:
        tag: content
        name: punctuation.definition.struct.sd
      10:
        tag: typeName
        name: entity.name.type.interface.struct.sd
      12:
        tag: content
        name: punctuation.definition.struct.sd
      14:
        tag: content
        name: punctuation.definition.struct.sd
      15:
        tag: content
        name: markup.raw.whitespace.sd
      16:
        patterns:
          - { include: "#Comment" }
    patterns:
      - { include: "#YAML" }
    end: (?=@|^[\n\r\t ]*$)

  Variable:
    tag: meta
    name: entity.variable.sd
    match: ^([ \t]*)([@])([ ]+)($|[_a-zA-Z]+[_a-zA-Z0-9]*(?:\[\])*)($|[ ]+)($|[_a-zA-Z]+[_a-zA-Z0-9]*)($|[ ]*)($|[=])($|[ ]*)($|.+)$
    captures:
      2:
        tag: definitionKeyword
        name: storage.type.variable.sd
      4:
        tag: typeName
        name: support.type.primitive.sd
      6:
        tag: definition(variableName)
        name: variable.other.constant.sd
      8:
        tag: updateOperator
        name: keyword.operator.assignment.sd
      9:
        tag: content
        name: markup.raw.whitespace.sd
      10:
        patterns:
          - { include: "#Expression" }

  Repeat:
    tag: meta
    name: entity.repeat.sd
    match: ^([ \t]*)([\^])([ \t]*)($|[/][/][ ]+.*)$
    captures:
      2:
        tag: keyword
        name: keyword.other.repeat.sd
      3:
        tag: content
        name: markup.raw.whitespace.sd
      4:
        patterns:
          - { include: "#Comment" }

  Return:
    tag: meta
    name: entity.return.sd
    match: ^([ \t]*)([<])([ ]*)(.*)$
    captures:
      2:
        tag: keyword
        name: keyword.other.return.sd
      3:
        tag: content
        name: markup.raw.whitespace.sd
      4:
        patterns:
          - { include: "#Expression" }

  Scene:
    tag: regexp
    name: string.regexp.scene.sd
    match: ^([ \t]*)([.](?![. ])|INT[.](?:$|[ ]+)|EXT[.](?:$|[ ]+)|INT[.]?[/]EXT[.](?:$|[ ]+))($|(?:(?![ ][-]).)*)($|[ ]+)($|[-])($|[ ]+)($|(?:(?![/][/][ ]+).)*)($|[/][/][ ]+.*)$
    captures:
      2:
        patterns:
          - { include: "#ScenePrefix" }
          - { include: "#SceneEnvironment" }
      3:
        tag: regexp
        name: string.regexp.scene.sd
      5:
        tag: regexp
        name: string.regexp.scene.sd
      7:
        tag: regexp
        name: string.regexp.scene.sd
      8:
        patterns:
          - { include: "#Comment" }

  ScenePrefix:
    match: ([.](?![. ]))(.*)
    captures:
      1:
        tag: punctuation
        name: punctuation.scene.sd
      2:
        tag: regexp
        name: string.regexp.scene.sd

  SceneEnvironment:
    match: (INT[.](?:$|[ ]+)|EXT[.](?:$|[ ]+)|INT[.]?[/]EXT[.](?:$|[ ]+))
    captures:
      1:
        tag: regexp
        name: string.regexp.scene.sd

  Section:
    tag: definition(heading)
    name: entity.section.sd
    match: ^([ \t]*)(#+)($|[ ]+)($|[a-zA-Z]+[a-zA-Z0-9_]*)([ ]*)($|[^\n\r:]+)?([:])?([ ]*)($|[a-zA-Z]+[a-zA-Z0-9_]*)?([ \t]*)($|[/][/][ ]+.*)$
    captures:
      2:
        tag: punctuation
        name: keyword.control.export.section.sd
      3:
        tag: punctuation
        name: markup.raw.whitespace.sd
      4:
        tag: special(heading)
        name: keyword.control.export.section.sd
      6:
        patterns:
          - { include: "#Expression" }
      7:
        tag: content
        name: keyword.operator.type.annotation.section.sd
      9:
        tag: typeName
        name: entity.name.type.interface.section.sd

  Transition:
    match: ^([ \t]*)((?:[^ ]+\b[ ]+){0,2}(?:TO[:]|TO BLACK[:.]|FADE OUT[:.]|FADE IN[:.]))([ ]*)($|[/][/][ ]+.*)$
    captures:
      2:
        tag: labelName
        name: keyword.control.flow.transition.sd

  Dialogue:
    name: entity.dialogue.sd
    begin: ^([ \t]*)(?![!]|\[\[)([\p{Lu}]{1,3}[.]?[^\p{Ll}\n\r.!*^()]*)([ ]*)([(][^)]*(?:$|[)]))?([ ]*)(\^)?([ ]*)($|[/][/][ ]+.*)$
    beginCaptures:
      2:
        tag: character
        name: entity.name.type.sd
      4:
        tag: tagName
        name: constant.character.escape.sd
      6:
        tag: processingInstruction
        name: constant.character.escape.sd
      7:
        tag: content
        name: markup.raw.whitespace.sd
      8:
        patterns:
          - { include: "#Comment" }
    patterns:
      - { include: "#Comment" }
      - { include: "#Parenthetical" }
      - { include: "#DialogueImage" }
      - { include: "#DialogueAudio" }
      - { include: "#InlineString" }
    end: (^$\n?)
    endCaptures:
      1:
        tag: content
        name: markup.raw.whitespace.sd

  Parenthetical:
    tag: tagName
    name: constant.character.escape.sd
    match: ^([ \t]*)([(])([^()]*)([)])([ ]*)($|[/][/][ ]+.*)$
    captures:
      2:
        tag: tagName
        name: constant.character.escape.sd
      3:
        tag: tagName
        name: constant.character.escape.sd
      4:
        tag: tagName
        name: constant.character.escape.sd
      5:
        tag: content
        name: markup.raw.whitespace.sd
      6:
        patterns:
          - { include: "#Comment" }

  DialogueImage:
    tag: blockComment
    name: entity.image.dialogue.sd
    match: ^([ \t]*)(\[{2})([^\]]*)(\]{2})([ ]*)($|[/][/][ ]+.*)($\n?)
    captures:
      2:
        tag: definition(blockComment)
        name: comment.block.open.image.dialogue.sd
      3:
        tag: blockComment
        name: comment.block.content.image.dialogue.sd
      4:
        tag: definition(blockComment)
        name: comment.block.close.image.dialogue.sd
      5:
        tag: content
        name: markup.raw.whitespace.dialogue.sd
      6:
        patterns:
          - { include: "#Comment" }

  DialogueAudio:
    tag: blockComment
    name: entity.audio.dialogue.sd
    match: ^([ \t]*)([(]{2})([^)]*)([)]{2})([ ]*)($|[/][/][ ]+.*)($\n?)
    captures:
      2:
        tag: definition(blockComment)
        name: comment.block.open.audio.dialogue.sd
      3:
        tag: blockComment
        name: comment.block.content.audio.dialogue.sd
      4:
        tag: definition(blockComment)
        name: comment.block.close.audio.dialogue.sd
      5:
        tag: content
        name: markup.raw.whitespace.dialogue.sd
      6:
        patterns:
          - { include: "#Comment" }

  Lyric:
    tag: quote
    name: markup.italic string
    match: ^([ \t]*)([~])(.*)$
    captures:
      2:
        tag: punctuation
        name: punctuation.lyric.sd
      3:
        patterns:
          - { include: "#Inline" }

  Action:
    tag: content
    name: meta.paragraph.text.sd
    match: ^([ \t]*)([!])?(.+)$
    captures:
      2:
        tag: punctuation
        name: punctuation.action.sd
      3:
        patterns:
          - { include: "#Inline" }

  # Markdown (inline subset)

  InlineString:
    tag: string
    name: string.inline.sd
    match: ((?:(?![/][/][ ]+).)+)
    captures:
      1:
        patterns:
          - { include: "#Comment" }
          - { include: "#Lyric" }
          - { include: "#Inline" }

  Inline:
    patterns:
      - { include: "#Comment" }
      - { include: "#Underline" }
      - { include: "#Bold" }
      - { include: "#Italic" }
      - { include: "#Raw" }
      - { include: "#Strikethrough" }
      - { include: "#Escape" }

  Escape:
    tag: escape
    name: constant.character.escape.sd
    match: \\[-`*_#+.!(){}\[\]\\>]

  Bold:
    tag: strong
    name: markup.bold.sd
    match: ([*][*])((?![*][*]).+)([*][*])
    captures:
      1:
        tag: bracket
        name: punctuation.definition.bold.sd
      2:
        patterns:
          - { include: "#Escape" }
          - { include: "#Raw" }
          - { include: "#Underline" }
          - { include: "#Italic" }
      3:
        tag: bracket
        name: punctuation.definition.bold.sd

  Italic:
    tag: emphasis
    name: markup.italic.sd
    match: ([*])([^*]+)([*])
    captures:
      1:
        tag: bracket
        name: punctuation.definition.italic.sd
      2:
        patterns:
          - { include: "#Escape" }
          - { include: "#Raw" }
          - { include: "#Underline" }
          - { include: "#Bold" }
      3:
        tag: bracket
        name: punctuation.definition.italic.sd

  Underline:
    tag: link
    name: markup.underline.sd
    match: ([_])([^_]+)([_])
    captures:
      1:
        tag: bracket
        name: punctuation.definition.underline.sd
      2:
        patterns:
          - { include: "#Escape" }
          - { include: "#Raw" }
          - { include: "#Bold" }
          - { include: "#Italic" }
      3:
        tag: bracket
        name: punctuation.definition.underline.sd

  Strikethrough:
    tag: strikethrough
    name: markup.strikethrough.sd
    match: ([~][~])((?![~][~]).+)([~][~])
    captures:
      1:
        tag: bracket
        name: punctuation.definition.strikethrough.sd
      2:
        patterns:
          - { include: "#Escape" }
          - { include: "#Raw" }
          - { include: "#Underline" }
          - { include: "#Bold" }
          - { include: "#Italic" }
      3:
        tag: bracket
        name: punctuation.definition.strikethrough.sd

  Raw:
    tag: monospace
    name: markup.inline.raw.string.sd
    match: ([`])([^`]+)([`])
    captures:
      1:
        name: punctuation.definition.raw.sd
      3:
        name: punctuation.definition.raw.sd

  # FrontMatter

  FrontMatter:
    tag: meta
    name: entity.front-matter.sd
    begin: ^([ \t]*)([-]{3,})([ \t]*)($|[/][/][ ]+.*)$
    beginCaptures:
      2:
        tag: keyword
        name: keyword.other.front-matter.dashes.start.sd
      3:
        tag: content
        name: markup.raw.whitespace.sd
      4:
        patterns:
          - { include: "#Comment" }
    patterns:
      - { include: "#TitleEntry" }
      - { include: "#CreditEntry" }
      - { include: "#AuthorEntry" }
      - { include: "#SourceEntry" }
      - { include: "#NotesEntry" }
      - { include: "#DateEntry" }
      - { include: "#ContactEntry" }
      - { include: "#RevisionEntry" }
      - { include: "#CopyrightEntry" }
      - { include: "#FontEntry" }
      - { include: "#TLEntry" }
      - { include: "#TCEntry" }
      - { include: "#TREntry" }
      - { include: "#CCEntry" }
      - { include: "#BLEntry" }
      - { include: "#BREntry" }
      - { include: "#OtherEntry" }
    end: ^([ \t]*)([-]{3,})([ \t]*)($|[/][/][ ]+.*)$
    endCaptures:
      2:
        tag: keyword
        name: keyword.other.front-matter.dashes.end.sd
      3:
        tag: content
        name: markup.raw.whitespace.sd
      4:
        patterns:
          - { include: "#Comment" }

  TitleEntry:
    begin: ^(title)($|[:])([ ]*)(.*)$
    beginCaptures:
      1:
        tag: keyword
        name: keyword.other.front-matter.title.sd
      2:
        tag: content
        name: punctuation.separator.colon.sd
      4:
        patterns:
          - { include: "#InlineString" }
    patterns:
      - { include: "#FrontMatterArrayEntry" }
      - { include: "#InlineString" }
    end: (?=^[ _a-zA-Z]+[ _a-zA-Z0-9]*[:]|[-]{3,})

  CreditEntry:
    begin: ^(credit)($|[:])([ ]*)(.*)$
    beginCaptures:
      1:
        tag: keyword
        name: keyword.other.front-matter.credit.sd
      2:
        tag: content
        name: punctuation.separator.colon.sd
      4:
        patterns:
          - { include: "#InlineString" }
    patterns:
      - { include: "#FrontMatterArrayEntry" }
      - { include: "#InlineString" }
    end: (?=^[ _a-zA-Z]+[ _a-zA-Z0-9]*[:]|[-]{3,})

  AuthorEntry:
    begin: ^(author)($|[:])([ ]*)(.*)$
    beginCaptures:
      1:
        tag: keyword
        name: keyword.other.front-matter.author.sd
      2:
        tag: content
        name: punctuation.separator.colon.sd
      4:
        patterns:
          - { include: "#InlineString" }
    patterns:
      - { include: "#FrontMatterArrayEntry" }
      - { include: "#InlineString" }
    end: (?=^[ _a-zA-Z]+[ _a-zA-Z0-9]*[:]|[-]{3,})

  SourceEntry:
    begin: ^(source)($|[:])([ ]*)(.*)$
    beginCaptures:
      1:
        tag: keyword
        name: keyword.other.front-matter.source.sd
      2:
        tag: content
        name: punctuation.separator.colon.sd
      4:
        patterns:
          - { include: "#InlineString" }
    patterns:
      - { include: "#FrontMatterArrayEntry" }
      - { include: "#InlineString" }
    end: (?=^[ _a-zA-Z]+[ _a-zA-Z0-9]*[:]|[-]{3,})

  NotesEntry:
    begin: ^(notes)($|[:])([ ]*)(.*)$
    beginCaptures:
      1:
        tag: keyword
        name: keyword.other.front-matter.notes.sd
      2:
        tag: content
        name: punctuation.separator.colon.sd
      4:
        patterns:
          - { include: "#InlineString" }
    patterns:
      - { include: "#FrontMatterArrayEntry" }
      - { include: "#InlineString" }
    end: (?=^[ _a-zA-Z]+[ _a-zA-Z0-9]*[:]|[-]{3,})

  DateEntry:
    begin: ^(date)($|[:])([ ]*)(.*)$
    beginCaptures:
      1:
        tag: keyword
        name: keyword.other.front-matter.date.sd
      2:
        tag: content
        name: punctuation.separator.colon.sd
      4:
        patterns:
          - { include: "#InlineString" }
    patterns:
      - { include: "#FrontMatterArrayEntry" }
      - { include: "#InlineString" }
    end: (?=^[ _a-zA-Z]+[ _a-zA-Z0-9]*[:]|[-]{3,})

  ContactEntry:
    begin: ^(contact)($|[:])([ ]*)(.*)$
    beginCaptures:
      1:
        tag: keyword
        name: keyword.other.front-matter.contract.sd
      2:
        tag: content
        name: punctuation.separator.colon.sd
      4:
        patterns:
          - { include: "#InlineString" }
    patterns:
      - { include: "#FrontMatterArrayEntry" }
      - { include: "#InlineString" }
    end: (?=^[ _a-zA-Z]+[ _a-zA-Z0-9]*[:]|[-]{3,})

  RevisionEntry:
    begin: ^(revision)($|[:])([ ]*)(.*)$
    beginCaptures:
      1:
        tag: keyword
        name: keyword.other.front-matter.revision.sd
      2:
        tag: content
        name: punctuation.separator.colon.sd
      4:
        patterns:
          - { include: "#InlineString" }
    patterns:
      - { include: "#FrontMatterArrayEntry" }
      - { include: "#InlineString" }
    end: (?=^[ _a-zA-Z]+[ _a-zA-Z0-9]*[:]|[-]{3,})

  CopyrightEntry:
    begin: ^(copyright)($|[:])([ ]*)(.*)$
    beginCaptures:
      1:
        tag: keyword
        name: keyword.other.front-matter.copyright.sd
      2:
        tag: content
        name: punctuation.separator.colon.sd
      4:
        patterns:
          - { include: "#InlineString" }
    patterns:
      - { include: "#FrontMatterArrayEntry" }
      - { include: "#InlineString" }
    end: (?=^[ _a-zA-Z]+[ _a-zA-Z0-9]*[:]|[-]{3,})

  FontEntry:
    begin: ^(font)($|[:])([ ]*)(.*)$
    beginCaptures:
      1:
        tag: keyword
        name: keyword.other.front-matter.font.sd
      2:
        tag: content
        name: punctuation.separator.colon.sd
      4:
        patterns:
          - { include: "#InlineString" }
    patterns:
      - { include: "#FrontMatterArrayEntry" }
      - { include: "#InlineString" }
    end: (?=^[ _a-zA-Z]+[ _a-zA-Z0-9]*[:]|[-]{3,})

  TLEntry:
    begin: ^(tl)($|[:])([ ]*)(.*)$
    beginCaptures:
      1:
        tag: keyword
        name: keyword.other.front-matter.tl.sd
      2:
        tag: content
        name: punctuation.separator.colon.sd
      4:
        patterns:
          - { include: "#InlineString" }
    patterns:
      - { include: "#FrontMatterArrayEntry" }
      - { include: "#InlineString" }
    end: (?=^[ _a-zA-Z]+[ _a-zA-Z0-9]*[:]|[-]{3,})

  TCEntry:
    begin: ^(tc)($|[:])([ ]*)(.*)$
    beginCaptures:
      1:
        tag: keyword
        name: keyword.other.front-matter.tc.sd
      2:
        tag: content
        name: punctuation.separator.colon.sd
      4:
        patterns:
          - { include: "#InlineString" }
    patterns:
      - { include: "#FrontMatterArrayEntry" }
      - { include: "#InlineString" }
    end: (?=^[ _a-zA-Z]+[ _a-zA-Z0-9]*[:]|[-]{3,})

  TREntry:
    begin: ^(tr)($|[:])([ ]*)(.*)$
    beginCaptures:
      1:
        tag: keyword
        name: keyword.other.front-matter.tr.sd
      2:
        tag: content
        name: punctuation.separator.colon.sd
      4:
        patterns:
          - { include: "#InlineString" }
    patterns:
      - { include: "#FrontMatterArrayEntry" }
      - { include: "#InlineString" }
    end: (?=^[ _a-zA-Z]+[ _a-zA-Z0-9]*[:]|[-]{3,})

  CCEntry:
    begin: ^(cc)($|[:])([ ]*)(.*)$
    beginCaptures:
      1:
        tag: keyword
        name: keyword.other.front-matter.cc.sd
      2:
        tag: content
        name: punctuation.separator.colon.sd
      4:
        patterns:
          - { include: "#InlineString" }
    patterns:
      - { include: "#FrontMatterArrayEntry" }
      - { include: "#InlineString" }
    end: (?=^[ _a-zA-Z]+[ _a-zA-Z0-9]*[:]|[-]{3,})

  BLEntry:
    begin: ^(bl)($|[:])([ ]*)(.*)$
    beginCaptures:
      1:
        tag: keyword
        name: keyword.other.front-matter.bl.sd
      2:
        tag: content
        name: punctuation.separator.colon.sd
      4:
        patterns:
          - { include: "#InlineString" }
    patterns:
      - { include: "#FrontMatterArrayEntry" }
      - { include: "#InlineString" }
    end: (?=^[ _a-zA-Z]+[ _a-zA-Z0-9]*[:]|[-]{3,})

  BREntry:
    begin: ^(br)($|[:])([ ]*)(.*)$
    beginCaptures:
      1:
        tag: keyword
        name: keyword.other.front-matter.br.sd
      2:
        tag: content
        name: punctuation.separator.colon.sd
      4:
        patterns:
          - { include: "#InlineString" }
    patterns:
      - { include: "#FrontMatterArrayEntry" }
      - { include: "#InlineString" }
    end: (?=^[ _a-zA-Z]+[ _a-zA-Z0-9]*[:]|[-]{3,})

  OtherEntry:
    begin: ^([ _a-zA-Z]+[ _a-zA-Z0-9]*)($|[:])([ ]*)(.*)$
    beginCaptures:
      1:
        tag: keyword
        name: keyword.other.front-matter.other.sd
      2:
        tag: content
        name: punctuation.separator.colon.sd
      4:
        patterns:
          - { include: "#InlineString" }
    patterns:
      - { include: "#FrontMatterArrayEntry" }
      - { include: "#InlineString" }
    end: (?=^[ _a-zA-Z]+[ _a-zA-Z0-9]*[:]|[-]{3,})

  FrontMatterArrayEntry:
    match: ^([ ]{2,}|[\t]+)([-])([ ]+)(.*)$
    captures:
      2:
        tag: content
        name: punctuation.definition.block.sequence.item.sd
      4:
        patterns:
          - { include: "#InlineString" }

  # YAML (stricter subset)

  YAML:
    patterns:
      - { include: "#Comment" }
      - { include: "#BlockScalarIndented" }
      - { include: "#BlockMapIndented" }
      - { include: "#ExpressionIndented" }

  BlockScalarIndented:
    match: ^([ ]{2,}|[\t]+)(?![-])([^\n\r:]+)([:])([\t ]+)([^\n\r]+)
    captures:
      1:
        tag: content
        name: markup.raw.whitespace.indent.sd
      2:
        tag: variableName
        name: variable.other.readwrite.sd
      3:
        tag: content
        name: punctuation.separator.colon.sd
      4:
        tag: content
        name: markup.raw.whitespace.sd
      5:
        patterns:
          - { include: "#Comment" }
          - { include: "#BlockScalar" }
          - { include: "#Expression" }

  BlockMapIndented:
    match: ^([ ]{2,}|[\t]+)(?![-])([^\n\r:]+)([:])([\t ]*)($|[/][/][ ]+.*)$
    captures:
      1:
        tag: content
        name: markup.raw.whitespace.indent.sd
      2:
        tag: variableName
        name: variable.other.readwrite.sd
      3:
        tag: content
        name: punctuation.separator.colon.sd

  ExpressionIndented:
    match: ^([ ]{2,}|[\t]+)(.+)
    captures:
      1:
        tag: content
        name: markup.raw.whitespace.indent.sd
      2:
        patterns:
          - { include: "#Expression" }

  BlockScalar:
    begin: (?:(\|)|(>))([1-9])?([-+])?(.*[\n]?)
    beginCaptures:
      1:
        tag: definitionKeyword
        name: punctuation.definition.block.scalar.literal.sd
      2:
        tag: definitionKeyword
        name: punctuation.definition.block.scalar.folded.sd
      3:
        tag: definitionKeyword
        name: constant.numeric.indentation-indicator.sd
      4:
        tag: definitionKeyword
        name: support.other.chomping-indicator.sd
      5:
        patterns:
          - { include: "#Comment" }
          - { include: "#ExpectedCommentOrNewline" }
    patterns:
      - { include: "#BlockScalarContent" }
    end: (?=^\S)

  BlockScalarContent:
    tag: definitionKeyword
    name: string.unquoted.block.sd
    begin: ^([ ]+)(?![ ])
    end: ^(?!\s*$)

  ExpectedCommentOrNewline:
    tag: invalid
    name: invalid.illegal.expected-comment-or-newline.sd
    match: .+

  # TypeScript (expression subset)

  Expression:
    patterns:
      - { include: "#String" }
      - { include: "#Comment" }
      - { include: "#ExpressionOperators" }
      - { include: "#NumericLiteral" }
      - { include: "#BooleanLiteral" }
      - { include: "#NullLiteral" }
      - { include: "#UndefinedLiteral" }
      - { include: "#NumericConstantLiteral" }
      - { include: "#Whitespace" }
      - { include: "#ArrayLiteral" }
      - { include: "#ParenExpression" }
      - { include: "#Identifiers" }
      - { include: "#ExpressionPunctuations" }

  Whitespace:
    tag: content
    name: markup.raw.whitespace.sd
    match: ([\t ]+)

  String:
    patterns:
      - { include: "#QStringSingle" }
      - { include: "#QStringDouble" }
      - { include: "#Template" }

  QStringDouble:
    tag: string
    name: string.quoted.double.sd
    begin: (["])
    beginCaptures:
      1:
        tag: string
        name: punctuation.definition.string.begin.sd
    patterns:
      - { include: "#Color" }
    end: (["])|([^\\\n]$)
    endCaptures:
      1:
        tag: string
        name: punctuation.definition.string.end.sd
      2:
        tag: invalid
        name: invalid.illegal.newline.sd

  QStringSingle:
    tag: string
    name: string.quoted.single.sd
    begin: (['])
    beginCaptures:
      1:
        tag: string
        name: punctuation.definition.string.begin.sd
    patterns:
      - { include: "#Color" }
    end: (['])|([^\\\n]$)
    endCaptures:
      1:
        tag: string
        name: punctuation.definition.string.end.sd
      2:
        tag: invalid
        name: invalid.illegal.newline.sd

  ExpressionOperators:
    patterns:
      - { include: "#AwaitOperator" }
      - { include: "#YieldOperator" }
      - { include: "#YieldIteratorOperator" }
      - { include: "#DeleteOperator" }
      - { include: "#InOperator" }
      - { include: "#OfOperator" }
      - { include: "#InstanceOfOperator" }
      - { include: "#NewOperator" }
      - { include: "#VoidOperator" }
      - { include: "#AsOperator" }
      - { include: "#SpreadOperator" }
      - { include: "#AssignArithmeticOperator" }
      - { include: "#AssignBitwiseOperator" }
      - { include: "#BitwiseShiftOperator" }
      - { include: "#CompareEqualOperator" }
      - { include: "#CompareRelativeOperator" }
      - { include: "#NegateOperator" }
      - { include: "#LogicalOperator" }
      - { include: "#BitwiseOperator" }
      - { include: "#AssignEqualOperator" }
      - { include: "#DecrementOperator" }
      - { include: "#IncrementOperator" }
      - { include: "#ArithmeticOperator" }
      - { include: "#AssignMultiplyOperator" }
      - { include: "#AssignDivideOperator" }
      - { include: "#ColonOperator" }

  AwaitOperator:
    tag: controlKeyword
    name: keyword.control.flow.sd
    match: (?<![_$a-zA-Z0-9])(?:(?<=[.][.][.])|(?<![.]))(await)(?![_$a-zA-Z0-9])(?:(?=[.][.][.])|(?![.]))

  YieldOperator:
    begin: (?<![_$a-zA-Z0-9])(?:(?<=[.][.][.])|(?<![.]))(yield)(?![_$a-zA-Z0-9])(?:(?=[.][.][.])|(?![.]))(?=\s*\/[*]([^*]|([*][^\/]))*[*]\/\s*[*])
    beginCaptures:
      1:
        tag: controlKeyword
        name: keyword.control.flow.sd
    patterns:
      - { include: "#Comment" }
    end: ([*])
    endCaptures:
      1:
        tag: controlKeyword
        name: keyword.generator.asterisk.sd

  YieldIteratorOperator:
    match: (?<![_$a-zA-Z0-9])(?:(?<=[.][.][.])|(?<![.]))(yield)(?![_$a-zA-Z0-9])(?:(?=[.][.][.])|(?![.]))(?:\s*([*]))?
    captures:
      1:
        tag: controlKeyword
        name: keyword.control.flow.sd
      2:
        tag: controlKeyword
        name: keyword.generator.asterisk.sd

  DeleteOperator:
    tag: operatorKeyword
    name: keyword.operator.expression.delete.sd
    match: (?<![_$a-zA-Z0-9])(?:(?<=[.][.][.])|(?<![.]))delete(?![_$a-zA-Z0-9])(?:(?=[.][.][.])|(?![.]))

  InOperator:
    tag: operatorKeyword
    name: keyword.operator.expression.in.sd
    match: (?<![_$a-zA-Z0-9])(?:(?<=[.][.][.])|(?<![.]))in(?![_$a-zA-Z0-9])(?:(?=[.][.][.])|(?![.]))(?!\()

  OfOperator:
    tag: operatorKeyword
    name: keyword.operator.expression.of.sd
    match: (?<![_$a-zA-Z0-9])(?:(?<=[.][.][.])|(?<![.]))of(?![_$a-zA-Z0-9])(?:(?=[.][.][.])|(?![.]))(?!\()

  InstanceOfOperator:
    tag: operatorKeyword
    name: keyword.operator.expression.instanceof.sd
    match: (?<![_$a-zA-Z0-9])(?:(?<=[.][.][.])|(?<![.]))instanceof(?![_$a-zA-Z0-9])(?:(?=[.][.][.])|(?![.]))

  NewOperator:
    tag: operatorKeyword
    name: keyword.operator.new.sd
    match: (?<![_$a-zA-Z0-9])(?:(?<=[.][.][.])|(?<![.]))new(?![_$a-zA-Z0-9])(?:(?=[.][.][.])|(?![.]))

  VoidOperator:
    tag: operatorKeyword
    name: keyword.operator.expression.void.sd
    match: (?<![_$a-zA-Z0-9])(?:(?<=[.][.][.])|(?<![.]))void(?![_$a-zA-Z0-9])(?:(?=[.][.][.])|(?![.]))

  AsOperator:
    match: (?<![_$a-zA-Z0-9])(?:(?<=[.][.][.])|(?<![.]))(as)\s+(const)(?=\s*($|[;,:})\]]))
    captures:
      1:
        tag: controlKeyword
        name: keyword.control.as.sd
      2:
        tag: controlKeyword
        name: storage.modifier.sd

  SpreadOperator:
    tag: derefOperator
    name: keyword.operator.spread.sd
    match: ([.][.][.])

  AssignArithmeticOperator:
    tag: updateOperator
    name: keyword.operator.assignment.compound.sd
    match: ([*][=]|(?<!\()[/][=]|[%][=]|[+][=]|[-][=])

  AssignBitwiseOperator:
    tag: updateOperator
    name: keyword.operator.assignment.compound.bitwise.sd
    match: ([&][=]|[\^][=]|[<][<][=]|[>][>][=]|[>][>][>][=]|[|][=])

  BitwiseShiftOperator:
    tag: updateOperator
    name: keyword.operator.bitwise.shift.sd
    match: ([<][<]|[>][>][>]|[>][>])

  CompareEqualOperator:
    tag: compareOperator
    name: keyword.operator.comparison.sd
    match: ([=][=][=]|[!][=][=]|[=][=]|[!][=])

  CompareRelativeOperator:
    tag: compareOperator
    name: keyword.operator.relational.sd
    match: ([<][=]|[>][=]|[<][>]|[<]|[>])

  NegateOperator:
    tag: updateOperator
    match: (?<=[_$a-zA-Z0-9])([!])\s*(?:([/][=])|(?:([/])(?![/*])))
    captures:
      1:
        tag: logicOperator
        name: keyword.operator.logical.sd
      2:
        tag: updateOperator
        name: keyword.operator.assignment.compound.sd
      3:
        tag: arithmeticOperator
        name: keyword.operator.arithmetic.sd

  LogicalOperator:
    tag: logicOperator
    name: keyword.operator.logical.sd
    match: ([!]|[&][&]|[|][|]|[?][?])

  BitwiseOperator:
    tag: bitwiseOperator
    name: keyword.operator.bitwise.sd
    match: ([&]|[~]|[\^]|[|])

  AssignEqualOperator:
    tag: updateOperator
    name: keyword.operator.assignment.sd
    match: ([=])

  DecrementOperator:
    tag: updateOperator
    name: keyword.operator.decrement.sd
    match: ([-][-])

  IncrementOperator:
    tag: updateOperator
    name: keyword.operator.increment.sd
    match: ([+][+])

  ArithmeticOperator:
    tag: arithmeticOperator
    name: keyword.operator.arithmetic.sd
    match: ([%]|[*]|[/]|[-]|[+])

  AssignMultiplyOperator:
    begin: (?<=[_$a-zA-Z0-9)\]])\s*(?=(\/[*]([^*]|([*][^\/]))*[*]\/\s*)+(?:(/=)|(?:(/)(?![/*]))))
    patterns:
      - { include: "#Comment" }
    end: (?:(/=)|(?:(/)(?![*]([^*]|([*][^\/]))*[*][/])))
    endCaptures:
      1:
        tag: updateOperator
        name: keyword.operator.assignment.compound.sd
      2:
        tag: arithmeticOperator
        name: keyword.operator.arithmetic.sd

  AssignDivideOperator:
    match: (?<=[_$a-zA-Z0-9)\]])([\s]*)([/][=]|([/])(?![/*]))
    captures:
      2:
        tag: arithmeticOperator
        name: keyword.operator.arithmetic.sd

  ColonOperator:
    tag: content
    name: keyword.operator.type.annotation.sd
    match: ([:])

  NumericLiteral:
    patterns:
      - { include: "#HexNumber" }
      - { include: "#BinaryNumber" }
      - { include: "#OctalNumber" }
      - { include: "#DecimalNumber" }

  HexNumber:
    tag: number
    name: constant.numeric.hex.sd
    match: (\b(?<![$])0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(?:n)?\b(?![$]))
    captures:
      1:
        tag: number
        name: storage.type.numeric.bigint.sd

  BinaryNumber:
    tag: number
    name: constant.numeric.binary.sd
    match: (\b(?<![$])0(?:b|B)[01][01_]*(?:n)?\b(?![$]))
    captures:
      1:
        tag: number
        name: storage.type.numeric.bigint.sd

  OctalNumber:
    tag: number
    name: constant.numeric.octal.sd
    match: (\b(?<![$])0(?:o|O)?[0-7][0-7_]*(?:n)?\b(?![$]))
    captures:
      1:
        tag: number
        name: storage.type.numeric.bigint.sd

  DecimalNumber:
    tag: number
    name: constant.numeric.decimal.sd
    # match: 1.1E+3|1.E+3|.1E+3|1E+3|1.1|1.|.1|1
    match: ((?<![$])(?:(?:\b[0-9][0-9_]*[.][0-9][0-9_]*[eE][+-]?[0-9][0-9_]*[n]?\b)|(?:\b[0-9][0-9_]*[.][eE][+-]?[0-9][0-9_]*[n]?\b)|(?:\B[.][0-9][0-9_]*[eE][+-]?[0-9][0-9_]*[n]?\b)|(?:\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*[n]?\b)|(?:\b[0-9][0-9_]*[.][0-9][0-9_]*[n]?\b)|(?:\b[0-9][0-9_]*[.][n]?\B)|(?:\B[.][0-9][0-9_]*[n]?\b)|(?:\b[0-9][0-9_]*[n]?\b(?![.])))(?![$]))

  BooleanLiteral:
    patterns:
      - { include: "#BooleanTrue" }
      - { include: "#BooleanFalse" }

  BooleanTrue:
    tag: bool
    name: constant.language.boolean.true.sd
    match: (?<![_$a-zA-Z0-9])(?:(?<=[.][.][.])|(?<![.]))true(?![_$a-zA-Z0-9])(?:(?=[.][.][.])|(?![.]))

  BooleanFalse:
    tag: bool
    name: constant.language.boolean.false.sd
    match: (?<![_$a-zA-Z0-9])(?:(?<=[.][.][.])|(?<![.]))false(?![_$a-zA-Z0-9])(?:(?=[.][.][.])|(?![.]))

  NullLiteral:
    tag: "null"
    name: constant.language.null.sd
    match: (?<![_$a-zA-Z0-9])(?:(?<=[.][.][.])|(?<![.]))null(?![_$a-zA-Z0-9])(?:(?=[.][.][.])|(?![.]))

  UndefinedLiteral:
    tag: "null"
    name: constant.language.undefined.sd
    match: (?<![_$a-zA-Z0-9])(?:(?<=[.][.][.])|(?<![.]))undefined(?![_$a-zA-Z0-9])(?:(?=[.][.][.])|(?![.]))

  NumericConstantLiteral:
    patterns:
      - { include: "#NaN" }
      - { include: "#Infinity" }

  NaN:
    tag: atom
    name: constant.language.nan.sd
    match: (?<![_$a-zA-Z0-9])(?:(?<=[.][.][.])|(?<![.]))NaN(?![_$a-zA-Z0-9])(?:(?=[.][.][.])|(?![.]))

  Infinity:
    tag: atom
    name: constant.language.infinity.sd
    match: (?<![_$a-zA-Z0-9])(?:(?<=[.][.][.])|(?<![.]))Infinity(?![_$a-zA-Z0-9])(?:(?=[.][.][.])|(?![.]))

  ArrayLiteral:
    name: meta.array.literal.sd
    brackets: true
    begin: (\[)
    beginCaptures:
      1:
        tag: brace
        name: meta.brace.square.sd
    patterns:
      - { include: "#Expression" }
      - { include: "#PunctuationComma" }
    end: (\])
    endCaptures:
      1:
        tag: brace
        name: meta.brace.square.sd

  PunctuationComma:
    tag: content
    name: punctuation.separator.comma.sd
    match: ","

  ParenExpression:
    brackets: true
    begin: ([(])
    beginCaptures:
      1:
        tag: content
        name: meta.brace.round.sd
    patterns:
      - { include: "#Expression" }
    end: ([)])
    endCaptures:
      1:
        tag: content
        name: meta.brace.round.sd

  Identifiers:
    patterns:
      - { include: "#AccessorIdentifier" }
      - { include: "#WritableVariableIdentifier" }

  AccessorIdentifier:
    match: ([.]|\?[.](?!\s*[0-9]))(\s*)([#]?[a-zA-Z][_$0-9a-zA-Z]*)(?![_$a-zA-Z0-9])
    captures:
      1:
        tag: content
        name: punctuation.accessor.sd
      3:
        tag: variableName
        name: variable.other.constant.property.sd

  WritableVariableIdentifier:
    tag: variableName
    name: variable.other.readwrite.sd
    match: "[_$a-zA-Z][_$a-zA-Z0-9]*"

  ExpressionPunctuations:
    patterns:
      - { include: "#PunctuationComma" }
      - { include: "#PunctuationAccessor" }

  PunctuationAccessor:
    match: (?:([.])|(\?[.](?!\s*[0-9])))
    captures:
      1:
        tag: variableName
        name: punctuation.accessor.sd
      2:
        tag: content
        name: punctuation.accessor.optional.sd

  Template:
    patterns:
      - { include: "#TemplateSubstitution" }

  TemplateSubstitution:
    name: string.template.ts
    begin: ([_$a-zA-Z][_$a-zA-Z0-9]*)?([`])
    beginCaptures:
      1:
        tag: tagName
        name: entity.name.function.tagged-template.sd
      2:
        tag: string
        name: punctuation.definition.string.template.begin.sd
    patterns:
      - { include: "#Color" }
      - { include: "#TemplateSubstitutionElement" }
      - { include: "#StringCharacterEscape" }
      - { include: "#StringContent" }
    end: ([`])
    endCaptures:
      1:
        tag: string
        name: punctuation.definition.string.template.end.sd

  TemplateSubstitutionElement:
    brackets: true
    name: meta.template.expression.sd
    begin: ([$]?[{])
    beginCaptures:
      1:
        tag: keyword
        name: punctuation.definition.template-expression.begin.sd
    contentName: meta.embedded.line.sd
    patterns:
      - { include: "#Expression" }
    end: ([}])
    endCaptures:
      1:
        tag: keyword
        name: punctuation.definition.template-expression.end.sd

  StringCharacterEscape:
    tag: escape
    name: constant.character.escape.ts
    match: ([\\])(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|u\{[0-9A-Fa-f]+\}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.|$)

  StringContent:
    tag: string
    name: string.template.sd
    match: ((?:(?![$]?[{])[^\n\r`])+)

  Color:
    patterns:
      - { include: "#HEXColor" }
      - { include: "#RGBColor" }
      - { include: "#HSLColor" }

  HEXColor:
    tag: string
    name: string.color.hex.sd
    match: (#)((?:[0-9a-fA-F]{2}){2,4})
    color: true

  RGBColor:
    tag: string
    name: string.color.rgb.sd
    match: (rgb)([(][\d]+[\s]+[\d]+[\s]+[\d]+(?:[\s]*[/][\s]*[\d.]+[%]?)?[)])
    color: true

  HSLColor:
    tag: string
    name: string.color.hsl.sd
    match: (hsl)([(][\d]+[\s]+[\d]+[%]?[\s]+[\d]+[%]?(?:[\s]*[/][\s]*[\d.]+[%]?)?[)])
    color: true
