fileTypes: [sparkdown, sd, script, project]
keyEquivalent: ^~S
name: Sparkdown
scopeName: text.source.sparkdown
uuid: E26C862D-2A5E-4F10-B0C3-D6BCB838CB7F
flags: gmu

patterns:
  - { include: "#Comment" }
  - { include: "#BlankLine" }
  - { include: "#ExplicitAction" }
  - { include: "#FrontMatter" }
  - { include: "#Chunk" }
  - { include: "#Section" }
  - { include: "#FlowBreak" }
  - { include: "#Import" }
  - { include: "#Struct" }
  - { include: "#Function" }
  - { include: "#Continue" }
  - { include: "#Return" }
  - { include: "#Do" }
  - { include: "#Set" }
  - { include: "#Delete" }
  - { include: "#If" }
  - { include: "#Elseif" }
  - { include: "#Else" }
  - { include: "#Repeat" }
  - { include: "#Jump" }
  - { include: "#Choice" }
  - { include: "#Image" }
  - { include: "#Audio" }
  - { include: "#Transition" }
  - { include: "#Scene" }
  - { include: "#Centered" }
  - { include: "#Dialogue" }
  - { include: "#ImplicitAction" }
  - { include: "#Unknown" }

repository:
  Comment:
    tag: lineComment
    name: comment.line.sd
    match: ^([ \t]*)([&][&])($|[ \t]*)($|.*$)(\n?)
    captures:
      1:
        tag: content
        name: markup.raw.whitespace.leading.sd
      2:
        tag: definition(lineComment)
        name: punctuation.definition.comment.mark.sd
      3:
        tag: definition(lineComment)
        name: punctuation.definition.comment.separator.sd
      4:
        patterns:
          - { include: "#CommentContent" }
      5:
        patterns:
          - { include: "#Newline" }

  CommentContent:
    tag: definition(lineComment)
    name: punctuation.definition.comment.content.sd
    match: (.+)

  BlankLine:
    tag: content
    name: markup.raw.empty-line.sd
    match: ^([ \t]*$)(\n?)
    captures:
      1:
        tag: content
        name: markup.raw.whitespace.blank.sd
      2:
        patterns:
          - { include: "#Newline" }

  IllegalExpression:
    tag: invalid
    name: invalid.illegal.illegal-expression.sd
    match: (.+?)

  Unknown:
    tag: invalid
    name: invalid.illegal.unknown-statement.sd
    match: (.+$)(\n?)
    captures:
      1:
        tag: content
        name: markup.raw.unknown.sd
      2:
        patterns:
          - { include: "#Newline" }

  FrontMatter:
    tag: meta
    name: meta.front-matter.sd
    begin: ^([-]{3,})($|[ \t]*$)(\n?)
    beginCaptures:
      1:
        tag: keyword
        name: keyword.other.front-matter.dashes.start.sd
      2:
        tag: content
        name: markup.raw.whitespace.trailing.sd
      3:
        patterns:
          - { include: "#Newline" }
    patterns:
      - { include: "#Comment" }
      - { include: "#FrontMatterField" }
    end: ^([-]{3,})($|[ \t]*$)?(\n?)
    endCaptures:
      1:
        tag: keyword
        name: keyword.other.front-matter.dashes.end.sd
      2:
        tag: content
        name: markup.raw.whitespace.trailing.sd
      3:
        patterns:
          - { include: "#Newline" }

  FrontMatterField:
    tag: meta
    name: meta.front-matter.field.sd
    begin: ^([_a-zA-Z][_a-zA-Z0-9]*)($|[:])(.*$\n?)
    beginCaptures:
      1:
        tag: keyword
        name: keyword.other.front-matter.property.sd
      2:
        tag: punctuation
        name: punctuation.separator.colon.sd
      3:
        patterns:
          - { include: "#FrontMatterStringInline" }
    patterns:
      - { include: "#FrontMatterArrayItem" }
      - { include: "#FrontMatterStringBlock" }
    end: (?=^[_a-zA-Z][_a-zA-Z0-9]*[:]|[-]{3,})

  FrontMatterArrayItem:
    tag: meta
    name: meta.front-matter.field.array-item.sd
    match: ^([ ]{2,}|[\t]+)([-])($|[ \t]+)($|.+$)(\n?)
    captures:
      1:
        tag: content
        name: markup.raw.whitespace.indent.sd
      2:
        tag: keyword
        name: keyword.operator.expression.array.sd
      3:
        tag: content
        name: markup.raw.whitespace.separator.sd
      4:
        patterns:
          - { include: "#FrontMatterString" }
      5:
        patterns:
          - { include: "#Newline" }

  FrontMatterStringInline:
    tag: string
    name: string.front-matter.field.string-inline.sd
    match: ($|[ \t]*)($|.+$)(\n?)
    captures:
      1:
        tag: content
        name: markup.raw.whitespace.separator.sd
      2:
        patterns:
          - { include: "#FrontMatterString" }
      3:
        patterns:
          - { include: "#Newline" }

  FrontMatterStringBlock:
    tag: string
    name: string.front-matter.field.string-block.sd
    match: ^($|[ \t]*)(.*$\n?)
    captures:
      1:
        tag: content
        name: markup.raw.whitespace.indent.sd
      2:
        patterns:
          - { include: "#FrontMatterString" }

  FrontMatterString:
    emit: true
    patterns:
      - { include: "#Inline" }

  ChunkSplitter:
    match: ^((?:[@])(?:$|[ \t]+)(?:$|[._a-zA-Z][._a-zA-Z0-9]*)(?:$|[ \t]*$)(?:\n?))

  Chunk:
    tag: definition(annotation)
    name: keyword.control.chunk.sd
    match: ^([@])($|[ \t]+)($|[._a-zA-Z][._a-zA-Z0-9]*)($|[ \t]*$)(\n?)
    captures:
      1:
        tag: keyword
        name: keyword.control.chunk.percent.sd
      2:
        tag: content
        name: markup.raw.whitespace.separator.sd
      3:
        patterns:
          - { include: "#ChunkName" }
      4:
        tag: content
        name: markup.raw.whitespace.trailing.sd
      5:
        patterns:
          - { include: "#Newline" }

  ChunkName:
    tag: special(annotation)
    name: keyword.control.chunk.sd
    match: (.+)

  Section:
    tag: definition(heading)
    name: keyword.control.section.sd
    match: ^([#]+)($|[ \t]+)($|[_a-zA-Z][_a-zA-Z0-9]*)($|[ \t]*$)(\n?)
    captures:
      1:
        patterns:
          - { include: "#SectionLevel" }
      2:
        tag: punctuation
        name: markup.raw.whitespace.separator.sd
      3:
        patterns:
          - { include: "#SectionName" }
      4:
        tag: content
        name: markup.raw.whitespace.trailing.sd
      5:
        patterns:
          - { include: "#Newline" }

  SectionLevel:
    tag: keyword
    name: keyword.control.section.number-sign.sd
    match: (.+)

  SectionName:
    tag: special(heading)
    name: keyword.control.section.sd
    match: (.+)

  FlowBreak:
    tag: meta
    name: meta.break.sd
    match: ^(===+)($|[ \t]*$)(\n?)
    captures:
      1:
        tag: contentSeparator
        name: keyword.control.flow-break.sd
      2:
        tag: content
        name: markup.raw.whitespace.trailing.sd
      3:
        patterns:
          - { include: "#Newline" }

  Import:
    tag: meta
    name: meta.import.sd
    begin: ^([ \t]*)(import)($|[ \t]+)
    beginCaptures:
      1:
        tag: content
        name: markup.raw.whitespace.indent.sd
      2:
        tag: keyword
        name: keyword.control.import.sd
      3:
        tag: content
        name: markup.raw.whitespace.separator.sd
    patterns:
      - { include: "#ImportDeclaration" }
      - { include: "#IllegalExpression" }
    end: ($)

  ImportDeclaration:
    match: ([_a-zA-Z][_a-zA-Z0-9]*(?:\[\]){0,2})($|[ \t]+)($|[_a-zA-Z][_a-zA-Z0-9]*)($|[ \t]*)($|.+$)
    captures:
      1:
        tag: typeName
        name: support.type.sd
      2:
        tag: content
        name: markup.raw.whitespace.separator.sd
      3:
        patterns:
          - { include: "#VariableIdentifier" }
      4:
        tag: content
        name: markup.raw.whitespace.separator.sd
      5:
        patterns:
          - { include: "#ImportAssignment" }
          - { include: "#IllegalExpression" }

  ImportAssignment:
    match: ($|from)($|[ \t]+)($|.*$)
    captures:
      1:
        tag: keyword
        name: keyword.control.from.sd
      2:
        tag: content
        name: markup.raw.whitespace.separator.sd
      3:
        patterns:
          - { include: "#String" }
          - { include: "#IllegalExpression" }

  Struct:
    tag: meta
    name: meta.definition.struct.sd
    begin: ^([ \t]*)(define)($|[ \t]+)($|[_a-zA-Z][_a-zA-Z0-9]*(?:\[\]){0,2})($|[ \t]+)($|[_a-zA-Z][_a-zA-Z0-9]*)($|[ \t]*)($|[:])($|[ \t]*$)(\n?)
    beginCaptures:
      1:
        tag: content
        name: markup.raw.whitespace.indent.sd
      2:
        tag: controlKeyword
        name: keyword.control.definition.object.sd
      3:
        tag: content
        name: markup.raw.whitespace.separator.sd
      4:
        tag: typeName
        name: support.type.sd
      5:
        tag: content
        name: markup.raw.whitespace.separator.sd
      6:
        tag: definition(variableName)
        name: variable.other.constant.sd
      7:
        tag: content
        name: markup.raw.whitespace.separator.sd
      8:
        tag: punctuation
        name: punctuation.separator.colon.sd
      9:
        tag: content
        name: markup.raw.whitespace.trailing.sd
      10:
        patterns:
          - { include: "#Newline" }
    patterns:
      - { include: "#Comment" }
      - { include: "#StructArrayProperty" }
      - { include: "#StructScalarProperty" }
      - { include: "#StructMapProperty" }
      - { include: "#Unknown" }
    end: (?=^(?!\1(?:[ ]{2,}|[\t]+)))

  StructArrayProperty:
    tag: meta
    name: meta.definition.struct.property.array.sd
    begin: ^([ \t]*)([-])($|[ \t]+)
    beginCaptures:
      1:
        tag: content
        name: markup.raw.whitespace.indent.sd
      2:
        tag: keyword
        name: keyword.operator.expression.array.sd
      3:
        tag: content
        name: markup.raw.whitespace.separator.sd
    patterns:
      - { include: "#Expression" }
    end: ($\n?)
    endCaptures:
      1:
        patterns:
          - { include: "#Newline" }

  StructScalarProperty:
    tag: meta
    name: meta.definition.struct.property.scalar.sd
    begin: ^([ \t]*)([_a-zA-Z][_a-zA-Z0-9]*)($|[ \t]*)($|[=])
    beginCaptures:
      1:
        tag: content
        name: markup.raw.whitespace.indent.sd
      2:
        tag: variableName
        name: variable.other.property.sd
      3:
        tag: content
        name: markup.raw.whitespace.separator.sd
      4:
        tag: updateOperator
        name: keyword.operator.assignment.sd
    patterns:
      - { include: "#Expression" }
    end: ($\n?)
    endCaptures:
      1:
        patterns:
          - { include: "#Newline" }

  StructMapProperty:
    tag: meta
    name: meta.definition.struct.property.map.sd
    begin: ^([ \t]*)([_a-zA-Z][_a-zA-Z0-9]*)([:])(.*?(?=[ \t]*$))($|[ \t]*)(\n?)
    beginCaptures:
      1:
        tag: content
        name: markup.raw.whitespace.indent.sd
      2:
        tag: variableName
        name: variable.other.property.sd
      3:
        tag: punctuation
        name: punctuation.separator.colon.sd
      4:
        patterns:
          - { include: "#IllegalExpression" }
      5:
        tag: content
        name: markup.raw.whitespace.trailing.sd
      6:
        patterns:
          - { include: "#Newline" }
    patterns:
      - { include: "#Comment" }
      - { include: "#StructArrayProperty" }
      - { include: "#StructScalarProperty" }
      - { include: "#StructMapProperty" }
      - { include: "#Unknown" }
    end: (?=^(?!\1(?:[ ]{2,}|[\t]+)))

  Function:
    tag: meta
    name: meta.definition.function.sd
    begin: ^([ \t]*)(define)($|[ \t]+)($|[_a-zA-Z][_a-zA-Z0-9]*(?:\[\]){0,2})($|[ \t]+)($|[_a-zA-Z][_a-zA-Z0-9]*)($|[ \t]*)(?=$|[(])
    beginCaptures:
      1:
        tag: content
        name: markup.raw.whitespace.indent.sd
      2:
        tag: keyword
        name: keyword.control.definition.function.sd
      3:
        tag: content
        name: markup.raw.whitespace.separator.sd
      4:
        tag: typeName
        name: support.type.sd
      5:
        tag: content
        name: markup.raw.whitespace.separator.sd
      6:
        tag: function(variableName)
        name: variable.other.constant.sd
      7:
        tag: content
        name: markup.raw.whitespace.trailing.sd
    patterns:
      - { include: "#Parameters" }
      - { include: "#BlockStatement" }
    end: (?=^(?!\1(?:[ ]{2,}|[\t]+)))

  Do:
    tag: meta
    name: meta.do.sd
    begin: ^([ \t]*)(do)($|[ \t]+)
    beginCaptures:
      1:
        tag: content
        name: markup.raw.whitespace.indent.sd
      2:
        tag: keyword
        name: keyword.operator.expression.do.sd
      3:
        tag: content
        name: markup.raw.whitespace.separator.sd
    patterns:
      - { include: "#FunctionCall" }
    end: ($\n?)
    endCaptures:
      1:
        patterns:
          - { include: "#Newline" }

  Parameters:
    brackets: true
    begin: ([(])
    beginCaptures:
      1:
        tag: paren
        name: meta.brace.round.open.sd
    patterns:
      - { include: "#PunctuationComma" }
      - { include: "#Expression" }
    end: ([)])($|[ \t]*)($|[:]?)($|[ \t]*)($|.+)(\n?)
    endCaptures:
      1:
        tag: paren
        name: meta.brace.round.close.sd
      2:
        tag: content
        name: markup.raw.whitespace.separator.sd
      3:
        tag: punctuation
        name: punctuation.separator.colon.sd
      4:
        tag: content
        name: markup.raw.whitespace.trailing.sd
      5:
        patterns:
          - { include: "#IllegalExpression" }
      6:
        patterns:
          - { include: "#Newline" }

  Set:
    tag: meta
    name: meta.set.sd
    begin: ^([ \t]*)(set)($|[ \t]+)(?:([_a-zA-Z][_a-zA-Z0-9]*(?:\[\]){0,2})([ \t]+)(?!$))?($|[_a-zA-Z][\[\]._a-zA-Z0-9]*)($|[ \t]*)($|[=])
    beginCaptures:
      1:
        tag: content
        name: markup.raw.whitespace.indent.sd
      2:
        tag: keyword
        name: keyword.operator.expression.set.sd
      3:
        tag: content
        name: markup.raw.whitespace.separator.sd
      4:
        tag: typeName
        name: support.type.sd
      5:
        tag: content
        name: markup.raw.whitespace.separator.sd
      6:
        patterns:
          - { include: "#ArrayLiteral" }
          - { include: "#ObjectLiteral" }
          - { include: "#PropertyAccessor" }
          - { include: "#VariableIdentifier" }
      7:
        tag: content
        name: markup.raw.whitespace.separator.sd
      8:
        tag: updateOperator
        name: keyword.operator.assignment.sd
    patterns:
      - { include: "#Expression" }
    end: ($\n?)
    endCaptures:
      1:
        patterns:
          - { include: "#Newline" }

  Delete:
    tag: meta
    name: meta.delete.sd
    begin: ^([ \t]*)(delete)($|[ \t]+)($|[_a-zA-Z][_a-zA-Z0-9]*)($|[ \t]*)($|\[)
    beginCaptures:
      1:
        tag: content
        name: markup.raw.whitespace.indent.sd
      2:
        tag: keyword
        name: keyword.operator.expression.delete.sd
      3:
        tag: content
        name: markup.raw.whitespace.separator.sd
      4:
        tag: function(variableName)
        name: entity.name.function.sd
      5:
        tag: content
        name: markup.raw.whitespace.separator.sd
      6:
        tag: brace
        name: meta.brace.square.open.sd
    patterns:
      - { include: "#Expression" }
    end: (\])($|[ \t]*$)(\n?)
    endCaptures:
      1:
        tag: brace
        name: meta.brace.square.close.sd
      2:
        tag: content
        name: markup.raw.whitespace.trailing.sd
      3:
        patterns:
          - { include: "#Newline" }

  If:
    tag: meta
    name: meta.branch.if.sd
    begin: ^([ \t]*)(if)($|[ \t]+)
    beginCaptures:
      1:
        tag: content
        name: markup.raw.whitespace.indent.sd
      2:
        tag: controlKeyword
        name: keyword.control.branch.if.sd
      3:
        tag: content
        name: markup.raw.whitespace.separator.sd
    patterns:
      - { include: "#BlockStatement" }
      - { include: "#Condition" }
    end: (?=^(?!\1(?:[ ]{2,}|[\t]+)))

  Elseif:
    tag: meta
    name: meta.branch.elseif.sd
    begin: ^([ \t]*)(elseif)($|[ \t]+)
    beginCaptures:
      1:
        tag: content
        name: markup.raw.whitespace.indent.sd
      2:
        tag: controlKeyword
        name: keyword.control.branch.elseif.sd
      3:
        tag: content
        name: markup.raw.whitespace.separator.sd
    patterns:
      - { include: "#BlockStatement" }
      - { include: "#Condition" }
    end: (?=^(?!\1(?:[ ]{2,}|[\t]+)))

  Else:
    tag: meta
    name: meta.branch.else.sd
    begin: ^([ \t]*)(else)($|[ \t]*)
    beginCaptures:
      1:
        tag: content
        name: markup.raw.whitespace.indent.sd
      2:
        tag: controlKeyword
        name: keyword.control.branch.else.sd
      3:
        tag: content
        name: markup.raw.whitespace.separator.sd
    patterns:
      - { include: "#BlockStatement" }
    end: (?=^(?!\1(?:[ ]{2,}|[\t]+)))

  Repeat:
    patterns:
      - { include: "#RepeatWhile" }
      - { include: "#RepeatUntil" }
      - { include: "#RepeatFor" }

  RepeatWhile:
    tag: meta
    name: meta.repeat.while.sd
    begin: ^([ \t]*)(repeat)($|[ \t]+)(while)($|[ \t]+)
    beginCaptures:
      1:
        tag: content
        name: markup.raw.whitespace.indent.sd
      2:
        tag: controlKeyword
        name: keyword.control.repeat.sd
      3:
        tag: content
        name: markup.raw.whitespace.separator.sd
      4:
        tag: controlKeyword
        name: keyword.control.repeat.while.sd
      5:
        tag: content
        name: markup.raw.whitespace.separator.sd
    patterns:
      - { include: "#BlockStatement" }
      - { include: "#Condition" }
    end: (?=^(?!\1(?:[ ]{2,}|[\t]+)))

  RepeatUntil:
    tag: meta
    name: meta.repeat.until.sd
    begin: ^([ \t]*)(repeat)($|[ \t]+)(until)($|[ \t]+)
    beginCaptures:
      1:
        tag: content
        name: markup.raw.whitespace.indent.sd
      2:
        tag: controlKeyword
        name: keyword.control.repeat.sd
      3:
        tag: content
        name: markup.raw.whitespace.separator.sd
      4:
        tag: controlKeyword
        name: keyword.control.repeat.until.sd
      5:
        tag: content
        name: markup.raw.whitespace.separator.sd
    patterns:
      - { include: "#BlockStatement" }
      - { include: "#Condition" }
    end: (?=^(?!\1(?:[ ]{2,}|[\t]+)))

  RepeatFor:
    tag: meta
    name: meta.repeat.for.sd
    begin: ^([ \t]*)(repeat)($|[ \t]+)(for)($|[ \t]+)
    beginCaptures:
      1:
        tag: content
        name: markup.raw.whitespace.indent.sd
      2:
        tag: controlKeyword
        name: keyword.control.repeat.sd
      3:
        tag: content
        name: markup.raw.whitespace.separator.sd
      4:
        tag: controlKeyword
        name: keyword.control.repeat.for.sd
      5:
        tag: content
        name: markup.raw.whitespace.separator.sd
    patterns:
      - { include: "#BlockStatement" }
      - { include: "#Condition" }
    end: (?=^(?!\1(?:[ ]{2,}|[\t]+)))

  Condition:
    patterns:
      - { include: "#ParentheticalCondition" }
      - { include: "#NonParentheticalCondition" }

  ParentheticalCondition:
    name: meta.condition.parenthetical.sd
    brackets: true
    begin: ([(])
    beginCaptures:
      1:
        tag: paren
        name: meta.brace.round.open.sd
    patterns:
      - { include: "#Expression" }
    end: ([)])($|[ \t]*)($|[:]?)($|[ \t]*)($|.+)(\n?)
    endCaptures:
      1:
        tag: paren
        name: meta.brace.round.close.sd
      2:
        tag: content
        name: markup.raw.whitespace.separator.sd
      3:
        tag: punctuation
        name: punctuation.separator.colon.sd
      4:
        tag: content
        name: markup.raw.whitespace.trailing.sd
      5:
        patterns:
          - { include: "#IllegalExpression" }
      6:
        patterns:
          - { include: "#Newline" }

  NonParentheticalCondition:
    name: meta.condition.nonparenthetical.sd
    match: (.+?)([:])($|[ \t]*)($|.+)(\n?)|(.+$)(\n?)
    captures:
      1:
        patterns:
          - { include: "#Expression" }
      2:
        tag: punctuation
        name: punctuation.separator.colon.sd
      3:
        tag: content
        name: markup.raw.whitespace.separator.sd
      4:
        patterns:
          - { include: "#IllegalExpression" }
      5:
        patterns:
          - { include: "#Newline" }
      6:
        patterns:
          - { include: "#Expression" }
      7:
        patterns:
          - { include: "#Newline" }

  Continue:
    tag: meta
    name: meta.continue.sd
    match: ^([ \t]*)(continue)($|[ \t]*$)(\n?)
    captures:
      1:
        tag: content
        name: markup.raw.whitespace.indent.sd
      2:
        tag: keyword
        name: keyword.control.flow.return.sd
      3:
        tag: content
        name: markup.raw.whitespace.separator.sd
      4:
        patterns:
          - { include: "#Newline" }

  Return:
    tag: meta
    name: meta.return.sd
    begin: ^([ \t]*)(return)($|[ \t]+)
    beginCaptures:
      1:
        tag: content
        name: markup.raw.whitespace.indent.sd
      2:
        tag: keyword
        name: keyword.control.flow.return.sd
      3:
        tag: content
        name: markup.raw.whitespace.separator.sd
    patterns:
      - { include: "#Expression" }
    end: ($\n?)
    endCaptures:
      1:
        patterns:
          - { include: "#Newline" }

  BlockStatement:
    emit: true
    patterns:
      - { include: "#Comment" }
      - { include: "#Continue" }
      - { include: "#Return" }
      - { include: "#Do" }
      - { include: "#Set" }
      - { include: "#Delete" }
      - { include: "#If" }
      - { include: "#Elseif" }
      - { include: "#Else" }
      - { include: "#Repeat" }
      - { include: "#Jump" }

  Jump:
    tag: meta
    name: meta.jump.sd
    match: ^([ \t]*)((?=[-][>]).+$)(\n?)
    captures:
      1:
        tag: content
        name: markup.raw.whitespace.indent.sd
      2:
        patterns:
          - { include: "#JumpTo" }
      3:
        patterns:
          - { include: "#Newline" }

  JumpTo:
    begin: ([-][>])($|[ \t]+)
    beginCaptures:
      1:
        tag: function(variableName)
        name: entity.name.function.jump.sd
      2:
        tag: content
        name: markup.raw.whitespace.separator.sd
    patterns:
      - { include: "#JumpToSection" }
    end: ($|[ \t]*$)
    endCaptures:
      1:
        tag: content
        name: markup.raw.whitespace.trailing.sd

  JumpToSection:
    tag: heading
    name: keyword.control.jump.name.sd
    match: ([_a-zA-Z][_a-zA-Z0-9]*|[{][^}]*[}]|[<][<][-][-]|[<][<]|[>][>]|[-][-]|[+][+]|\^)

  Choice:
    name: entity.choice.sd
    match: ^([+])($|[ \t]+)($|.*?)($|[-][>].*$)(\n?)
    captures:
      1:
        tag: keyword
        name: keyword.operator.expression.list.sd
      2:
        tag: content
        name: markup.raw.whitespace.separator.sd
      3:
        patterns:
          - { include: "#ChoiceContent" }
      4:
        patterns:
          - { include: "#JumpTo" }
      5:
        patterns:
          - { include: "#Newline" }

  ChoiceContent:
    tag: string
    name: string.choice.sd
    match: (.+)
    captures:
      1:
        patterns:
          - { include: "#DisplayText" }

  Image:
    tag: macroName
    name: meta.image.sd
    match: ^([ \t]*)(\[\[)([^\]]*)(\]\])($|[ \t]*$)(\n?)
    captures:
      1:
        tag: content
        name: markup.raw.whitespace.indent.sd
      2:
        tag: keyword
        name: keyword.operator.expression.begin.image.sd
      3:
        patterns:
          - { include: "#AudioContent" }
      4:
        tag: keyword
        name: keyword.operator.expression.end.image.sd
      5:
        tag: content
        name: markup.raw.whitespace.trailing.sd
      6:
        patterns:
          - { include: "#Newline" }

  InlineImage:
    tag: macroName
    name: meta.image.sd
    match: (\[\[)([^\]]*)(\]\])
    captures:
      1:
        tag: keyword
        name: keyword.operator.expression.begin.image.sd
      2:
        patterns:
          - { include: "#AudioContent" }
      3:
        tag: keyword
        name: keyword.operator.expression.end.image.sd

  ImageContent:
    tag: definition(variableName)
    name: variable.other.constant.image.sd
    match: (.+)

  Audio:
    tag: macroName
    name: meta.audio.sd
    match: ^([ \t]*)([(][(])([^)]*)([)][)])($|[ \t]*$)(\n?)
    captures:
      1:
        tag: content
        name: markup.raw.whitespace.indent.sd
      2:
        tag: keyword
        name: keyword.operator.expression.begin.audio.sd
      3:
        patterns:
          - { include: "#AudioContent" }
      4:
        tag: keyword
        name: keyword.operator.expression.end.audio.sd
      5:
        tag: content
        name: markup.raw.whitespace.trailing.sd
      6:
        patterns:
          - { include: "#Newline" }

  InlineAudio:
    tag: macroName
    name: meta.audio.sd
    match: ([(][(])([^)]*)([)][)])
    captures:
      1:
        tag: keyword
        name: keyword.operator.expression.begin.audio.sd
      2:
        patterns:
          - { include: "#AudioContent" }
      3:
        tag: keyword
        name: keyword.operator.expression.end.audio.sd

  AudioContent:
    tag: definition(variableName)
    name: variable.other.constant.audio.sd
    match: (.+)

  Transition:
    tag: labelName
    name: keyword.control.transition.sd
    match: ^(?:([%])($|[ \t]+)($|.+?)|((?:[^ \p{Ll}]+\b[ \t]+)*(?:(?:[^ \p{Ll}]+\b[ \t]+)+TO[:]|TO BLACK[:.]|FADE OUT[:.]|FADE IN[:.])))($|[ \t]*$)(\n?)
    captures:
      1:
        tag: punctuation
        name: punctuation.transition.mark.sd
      2:
        tag: punctuation
        name: markup.raw.whitespace.separator.sd
      3:
        patterns:
          - { include: "#TransitionContent" }
      4:
        patterns:
          - { include: "#TransitionContent" }
      5:
        tag: content
        name: markup.raw.whitespace.separator.sd
      6:
        patterns:
          - { include: "#Newline" }

  TransitionContent:
    begin: (?=.*$)
    patterns:
      - { include: "#Inline" }
    end: (?=$)

  Scene:
    tag: regexp
    name: string.regexp.scene.sd
    match: ^(?:([$])($|[ \t]+)($|.+?)|((?:INT[.]?[\/]EXT[.]|INT[.]|EXT[.]|CLOSEUP[ \t]*[-])(?:$|[ \t]+)(?:$|.+?)))($|[ \t]*$)(\n?)
    captures:
      1:
        tag: punctuation
        name: punctuation.scene.mark.sd
      2:
        tag: punctuation
        name: markup.raw.whitespace.separator.sd
      3:
        patterns:
          - { include: "#SceneContent" }
      4:
        patterns:
          - { include: "#SceneContent" }
      5:
        tag: content
        name: markup.raw.whitespace.separator.sd
      6:
        patterns:
          - { include: "#Newline" }

  SceneContent:
    begin: (?=.*$)
    patterns:
      - { include: "#Inline" }
    end: (?=$)

  Centered:
    tag: monospace
    name: markup.other.centered.sd
    begin: ^([|])
    beginCaptures:
      1:
        tag: bracket
        name: markup.other.centered.bar-left.sd
    patterns:
      - { include: "#CenteredContent" }
    end: ([|])($|[ \t]*$)?(\n?)
    endCaptures:
      1:
        tag: bracket
        name: markup.other.centered.bar-right.sd
      2:
        tag: bracket
        name: markup.raw.whitespace.trailing.sd
      3:
        patterns:
          - { include: "#Newline" }

  CenteredContent:
    tag: special(monospace)
    begin: (?=.*$)
    patterns:
      - { include: "#Inline" }
    end: (?=[|])

  Dialogue:
    name: entity.dialogue.sd
    begin: ^(?:([*])($|[ \t]+)(.+?)|([\p{Lu}][^\p{Ll}\r\n^%()]*[\p{Lu}?]))($|[ \t]*)([(][^)]*(?:$|[)]))?($|[ \t]*)(\^)?($|[ \t]*$)(\n?)
    beginCaptures:
      1:
        tag: keyword
        name: keyword.dialogue.mark.sd
      2:
        tag: content
        name: markup.raw.whitespace.separator.sd
      3:
        patterns:
          - { include: "#DialogueCharacterName" }
      4:
        patterns:
          - { include: "#DialogueCharacterName" }
      5:
        tag: content
        name: markup.raw.whitespace.separator.sd
      6:
        patterns:
          - { include: "#DialogueCharacterParenthetical" }
      7:
        tag: content
        name: markup.raw.whitespace.separator.sd
      8:
        patterns:
          - { include: "#DialogueCharacterSimultaneous" }
      9:
        tag: content
        name: markup.raw.whitespace.separator.sd
      10:
        patterns:
          - { include: "#Newline" }
    patterns:
      - { include: "#DialogueBox" }
    end: ^$(\n?)
    endCaptures:
      1:
        patterns:
          - { include: "#Newline" }

  DialogueCharacterName:
    tag: typeName
    name: entity.name.type.dialogue.character.name.sd
    match: (.+$)

  DialogueCharacterParenthetical:
    tag: escape
    name: constant.character.escape.dialogue.character.parenthetical.sd
    match: (.+$)

  DialogueCharacterSimultaneous:
    tag: escape
    name: constant.character.escape.dialogue.character.simultaneous.sd
    match: (.+$)

  DialogueBox:
    tag: string
    name: string.dialogue.line.sd
    begin: ^(?=.*$)
    patterns:
      - { include: "#Comment" }
      - { include: "#Choice" }
      - { include: "#Image" }
      - { include: "#Audio" }
      - { include: "#DialogueLineParenthetical" }
      - { include: "#BoxLineContinue" }
      - { include: "#BoxLineComplete" }
    end: (\n)|(?=^$)
    endCaptures:
      1:
        tag: content
        name: markup.raw.whitespace.newline.sd

  DialogueLineParenthetical:
    tag: tagName
    name: constant.character.escape.sd
    match: ^([ \t]*)([(][^()]*[)])($|[ \t]*$)(\n?)
    captures:
      1:
        tag: content
        name: markup.raw.whitespace.indent.sd
      2:
        patterns:
          - { include: "#DialogueLineParentheticalContent" }
      3:
        tag: content
        name: markup.raw.whitespace.trailing.sd
      4:
        patterns:
          - { include: "#Newline" }

  DialogueLineParentheticalContent:
    tag: escape
    name: constant.character.escape.sd
    match: (.+)

  BoxLineContinue:
    match: (.*[ \t]$)(\n?)
    captures:
      1:
        patterns:
          - { include: "#DisplayText" }
      2:
        patterns:
          - { include: "#Newline" }

  BoxLineComplete:
    match: (.*$)
    captures:
      1:
        patterns:
          - { include: "#DisplayText" }

  ExplicitAction:
    tag: content
    name: entity.paragraph.text.action.explicit.sd
    begin: ^([!])($|[ \t]+)(?=.+$)
    beginCaptures:
      1:
        tag: punctuation
        name: keyword.operator.expression.action.explicit.sd
      2:
        tag: punctuation
        name: markup.raw.whitespace.separator.sd
    patterns:
      - { include: "#ActionBox" }
    end: ^$(\n?)
    endCaptures:
      1:
        patterns:
          - { include: "#Newline" }

  ImplicitAction:
    tag: content
    name: entity.paragraph.text.action.implicit.sd
    begin: ^(?=.+$)
    patterns:
      - { include: "#ActionBox" }
    end: ^$(\n?)
    endCaptures:
      1:
        patterns:
          - { include: "#Newline" }

  ActionBox:
    tag: content
    name: markup.raw.action.line.sd
    begin: ^(?=.*$)
    patterns:
      - { include: "#Comment" }
      - { include: "#Choice" }
      - { include: "#Image" }
      - { include: "#Audio" }
      - { include: "#BoxLineContinue" }
      - { include: "#BoxLineComplete" }
    end: (\n)|(?=^$)
    endCaptures:
      1:
        tag: content
        name: markup.raw.whitespace.newline.sd

  DisplayText:
    name: entity.display.sd
    match: (?:([!]?(?:\d+|[_a-zA-Z][_a-zA-Z0-9]*))?([?][:]))?($|.+$)
    captures:
      1:
        tag: definition(variableName)
        name: variable.other.constant.sd
      2:
        tag: keyword
        name: keyword.operator.expression.prerequisite.sd
      3:
        patterns:
          - { include: "#Inline" }

  # Markdown (inline subset)

  Inline:
    patterns:
      - { include: "#Escape" }
      - { include: "#TemplateSubstitutionElement" }
      - { include: "#InlineImage" }
      - { include: "#InlineAudio" }
      - { include: "#Styling" }
      - { include: "#Emphasis" }
      - { include: "#Raw" }
      - { include: "#PlainText" }

  PlainText:
    emit: true
    patterns:
      - { include: "#Pause" }
      - { include: "#Space" }
      - { include: "#Word" }
      - { include: "#EmDash" }
      - { include: "#Newline" }
      - { include: "#Punctuation" }

  Word:
    tag: content
    name: markup.raw.text.sd
    match: ([\p{L}\p{N}\p{Mn}_']+)

  Space:
    tag: content
    name: markup.raw.space.sd
    match: ([ \t])

  EmDash:
    tag: content
    name: markup.raw.punctuation.sd
    match: ([-][-])

  Newline:
    tag: content
    name: markup.raw.whitespace.newline.sd
    match: (\n)

  Punctuation:
    tag: content
    name: markup.raw.punctuation.sd
    match: (.)

  Pause:
    tag: special(content)
    name: markup.raw.whitespace.pause.sd
    match: (?=[ ][ ])[ ]+|[ ]+$

  Escape:
    tag: escape
    name: constant.character.escape.sd
    match: \\[-`*_#+.!(){}\[\]\\>]

  Styling:
    patterns:
      - { include: "#Underline" }
      - { include: "#BoldItalic" }
      - { include: "#Bold" }
      - { include: "#Italic" }

  StylingMark:
    match: ([*_]+)
    captures:
      1:
        tag: bracket
        name: punctuation.definition.styling.sd

  BoldItalic:
    tag: strong
    name: markup.bold.sd
    match: ([*][*]+)([*].+?[*])(\1)
    captures:
      1:
        patterns:
          - { include: "#StylingMark" }
      2:
        patterns:
          - { include: "#Italic" }
      3:
        patterns:
          - { include: "#StylingMark" }

  Bold:
    tag: strong
    name: markup.bold.sd
    match: ([*][*](?![*]))(.+?)(\1)
    captures:
      1:
        patterns:
          - { include: "#StylingMark" }
      2:
        patterns:
          - { include: "#Inline" }
      3:
        patterns:
          - { include: "#StylingMark" }

  Italic:
    tag: emphasis
    name: markup.italic.sd
    match: ([*](?![*]))(.+?)(\1)
    captures:
      1:
        patterns:
          - { include: "#StylingMark" }
      2:
        patterns:
          - { include: "#Inline" }
      3:
        patterns:
          - { include: "#StylingMark" }

  Underline:
    tag: link
    name: markup.underline.sd
    match: ([_]+)(.+?)(\1)
    captures:
      1:
        patterns:
          - { include: "#StylingMark" }
      2:
        patterns:
          - { include: "#Inline" }
      3:
        patterns:
          - { include: "#StylingMark" }

  Emphasis:
    patterns:
      - { include: "#EmphasisCaret" }
      - { include: "#EmphasisTilde" }
      - { include: "#EmphasisEqual" }
      - { include: "#EmphasisForwardSlash" }
      - { include: "#EmphasisBackSlash" }
      - { include: "#EmphasisColon" }

  EmphasisCaret:
    tag: emphasis
    name: markup.emphasis.sd
    match: ([\^]+)([^\^]+)(\1)
    captures:
      1:
        tag: bracket
        name: punctuation.definition.emphasis.sd
      2:
        patterns:
          - { include: "#Inline" }
      3:
        tag: bracket
        name: punctuation.definition.emphasis.sd

  EmphasisTilde:
    tag: emphasis
    name: markup.emphasis.sd
    match: ([~][~]+)((?:(?![~][~][ \t]+).)*)(\1)
    captures:
      1:
        tag: bracket
        name: punctuation.definition.emphasis.sd
      2:
        patterns:
          - { include: "#Inline" }
      3:
        tag: bracket
        name: punctuation.definition.emphasis.sd

  EmphasisEqual:
    tag: emphasis
    name: markup.emphasis.sd
    match: ([=][=]+)((?:(?![=][=][ \t]+).)*)(\1)
    captures:
      1:
        tag: bracket
        name: punctuation.definition.emphasis.sd
      2:
        patterns:
          - { include: "#Inline" }
      3:
        tag: bracket
        name: punctuation.definition.emphasis.sd

  EmphasisForwardSlash:
    tag: emphasis
    name: markup.emphasis.sd
    match: ([/][/]+)((?:(?![/][/][ \t]+).)*)(\1)
    captures:
      1:
        tag: bracket
        name: punctuation.definition.emphasis.sd
      2:
        patterns:
          - { include: "#Inline" }
      3:
        tag: bracket
        name: punctuation.definition.emphasis.sd

  EmphasisBackSlash:
    tag: emphasis
    name: markup.emphasis.sd
    match: ([\\][\\]+)((?:(?![\\][\\][ \t]+).)*)(\1)
    captures:
      1:
        tag: bracket
        name: punctuation.definition.emphasis.sd
      2:
        patterns:
          - { include: "#Inline" }
      3:
        tag: bracket
        name: punctuation.definition.emphasis.sd

  EmphasisColon:
    tag: emphasis
    name: markup.emphasis.sd
    match: ([:][:]+)((?:(?![:][:][ \t]+).)*)(\1)
    captures:
      1:
        tag: bracket
        name: punctuation.definition.emphasis.sd
      2:
        patterns:
          - { include: "#Inline" }
      3:
        tag: bracket
        name: punctuation.definition.emphasis.sd

  Raw:
    tag: monospace
    name: markup.inline.raw.string.sd
    match: ([`])([^`]+)([`])
    captures:
      1:
        tag: punctuation
        name: punctuation.definition.raw.sd
      2:
        patterns:
          - { include: "#PlainText" }
      3:
        tag: punctuation
        name: punctuation.definition.raw.sd

  # TypeScript (expression subset)

  Expression:
    patterns:
      - { include: "#String" }
      - { include: "#ExpressionOperators" }
      - { include: "#NumericLiteral" }
      - { include: "#BooleanLiteral" }
      - { include: "#NullLiteral" }
      - { include: "#UndefinedLiteral" }
      - { include: "#NumericConstantLiteral" }
      - { include: "#Whitespace" }
      - { include: "#ArrayLiteral" }
      - { include: "#ObjectLiteral" }
      - { include: "#ParenExpression" }
      - { include: "#PropertyAccessor" }
      - { include: "#FunctionCall" }
      - { include: "#VariableIdentifier" }
      - { include: "#ExpressionPunctuations" }

  Whitespace:
    tag: content
    name: markup.raw.whitespace.sd
    match: ([ \t]+)

  String:
    patterns:
      - { include: "#QStringSingle" }
      - { include: "#QStringDouble" }
      - { include: "#Template" }

  QStringDouble:
    tag: string
    name: string.quoted.double.sd
    begin: (["])
    beginCaptures:
      1:
        tag: string
        name: punctuation.definition.string.begin.sd
    patterns:
      - { include: "#Color" }
      - { include: "#QStringDoubleContent" }
    end: (["])|($)
    endCaptures:
      1:
        tag: string
        name: punctuation.definition.string.end.sd

  QStringDoubleContent:
    match: ((?:[^"\\]|\\.)*)

  QStringSingle:
    tag: string
    name: string.quoted.single.sd
    begin: (['])
    beginCaptures:
      1:
        tag: string
        name: punctuation.definition.string.begin.sd
    patterns:
      - { include: "#Color" }
      - { include: "#QStringSingleContent" }
    end: (['])|($)
    endCaptures:
      1:
        tag: string
        name: punctuation.definition.string.end.sd

  QStringSingleContent:
    match: ((?:[^'\\]|\\.)*)

  ExpressionOperators:
    patterns:
      - { include: "#AwaitOperator" }
      - { include: "#YieldOperator" }
      - { include: "#YieldIteratorOperator" }
      - { include: "#DeleteOperator" }
      - { include: "#InOperator" }
      - { include: "#OfOperator" }
      - { include: "#InstanceOfOperator" }
      - { include: "#NewOperator" }
      - { include: "#VoidOperator" }
      - { include: "#AsOperator" }
      - { include: "#SpreadOperator" }
      - { include: "#AssignArithmeticOperator" }
      - { include: "#AssignBitwiseOperator" }
      - { include: "#BitwiseShiftOperator" }
      - { include: "#CompareEqualOperator" }
      - { include: "#CompareRelativeOperator" }
      - { include: "#NegateOperator" }
      - { include: "#LogicalOperator" }
      - { include: "#BitwiseOperator" }
      - { include: "#AssignEqualOperator" }
      - { include: "#DecrementOperator" }
      - { include: "#IncrementOperator" }
      - { include: "#ArithmeticOperator" }
      - { include: "#AssignMultiplyOperator" }
      - { include: "#AssignDivideOperator" }

  AwaitOperator:
    tag: controlKeyword
    name: keyword.control.flow.sd
    match: (?<![_a-zA-Z0-9])(?:(?<=[.][.][.])|(?<![.]))(await)(?![_a-zA-Z0-9])(?:(?=[.][.][.])|(?![.]))

  YieldOperator:
    begin: (?<![_a-zA-Z0-9])(?:(?<=[.][.][.])|(?<![.]))(yield)(?![_a-zA-Z0-9])(?:(?=[.][.][.])|(?![.]))(?=\s*\/[*]([^*]|([*][^\/]))*[*]\/\s*[*])
    beginCaptures:
      1:
        tag: controlKeyword
        name: keyword.control.flow.sd
    end: ([*])
    endCaptures:
      1:
        tag: controlKeyword
        name: keyword.generator.asterisk.sd

  YieldIteratorOperator:
    match: (?<![_a-zA-Z0-9])(?:(?<=[.][.][.])|(?<![.]))(yield)(?![_a-zA-Z0-9])(?:(?=[.][.][.])|(?![.]))(?:\s*([*]))?
    captures:
      1:
        tag: controlKeyword
        name: keyword.control.flow.sd
      2:
        tag: controlKeyword
        name: keyword.generator.asterisk.sd

  DeleteOperator:
    tag: operatorKeyword
    name: keyword.operator.expression.delete.sd
    match: (?<![_a-zA-Z0-9])(?:(?<=[.][.][.])|(?<![.]))delete(?![_a-zA-Z0-9])(?:(?=[.][.][.])|(?![.]))

  InOperator:
    tag: operatorKeyword
    name: keyword.operator.expression.in.sd
    match: (?<![_a-zA-Z0-9])(?:(?<=[.][.][.])|(?<![.]))in(?![_a-zA-Z0-9])(?:(?=[.][.][.])|(?![.]))(?!\()

  OfOperator:
    tag: operatorKeyword
    name: keyword.operator.expression.of.sd
    match: (?<![_a-zA-Z0-9])(?:(?<=[.][.][.])|(?<![.]))of(?![_a-zA-Z0-9])(?:(?=[.][.][.])|(?![.]))(?!\()

  InstanceOfOperator:
    tag: operatorKeyword
    name: keyword.operator.expression.instanceof.sd
    match: (?<![_a-zA-Z0-9])(?:(?<=[.][.][.])|(?<![.]))instanceof(?![_a-zA-Z0-9])(?:(?=[.][.][.])|(?![.]))

  NewOperator:
    tag: operatorKeyword
    name: keyword.operator.new.sd
    match: (?<![_a-zA-Z0-9])(?:(?<=[.][.][.])|(?<![.]))new(?![_a-zA-Z0-9])(?:(?=[.][.][.])|(?![.]))

  VoidOperator:
    tag: operatorKeyword
    name: keyword.operator.expression.void.sd
    match: (?<![_a-zA-Z0-9])(?:(?<=[.][.][.])|(?<![.]))void(?![_a-zA-Z0-9])(?:(?=[.][.][.])|(?![.]))

  AsOperator:
    match: (?<![_a-zA-Z0-9])(?:(?<=[.][.][.])|(?<![.]))(as)\s+(const)(?=\s*($|[;,:})\]]))
    captures:
      1:
        tag: controlKeyword
        name: keyword.control.as.sd
      2:
        tag: controlKeyword
        name: storage.modifier.sd

  SpreadOperator:
    tag: derefOperator
    name: keyword.operator.spread.sd
    match: ([.][.][.])

  AssignArithmeticOperator:
    tag: updateOperator
    name: keyword.operator.assignment.compound.sd
    match: ([*][=]|(?<!\()[/][=]|[%][=]|[+][=]|[-][=])

  AssignBitwiseOperator:
    tag: updateOperator
    name: keyword.operator.assignment.compound.bitwise.sd
    match: ([&][=]|[\^][=]|[<][<][=]|[>][>][=]|[>][>][>][=]|[|][=])

  BitwiseShiftOperator:
    tag: updateOperator
    name: keyword.operator.bitwise.shift.sd
    match: ([<][<]|[>][>][>]|[>][>])

  CompareEqualOperator:
    tag: compareOperator
    name: keyword.operator.comparison.sd
    match: ([=][=][=]|[!][=][=]|[=][=]|[!][=])

  CompareRelativeOperator:
    tag: compareOperator
    name: keyword.operator.relational.sd
    match: ([<][=]|[>][=]|[<][>]|[<]|[>])

  NegateOperator:
    tag: updateOperator
    match: (?<=[_a-zA-Z0-9])([!])\s*(?:([/][=])|(?:([/])(?![/*])))
    captures:
      1:
        tag: logicOperator
        name: keyword.operator.logical.sd
      2:
        tag: updateOperator
        name: keyword.operator.assignment.compound.sd
      3:
        tag: arithmeticOperator
        name: keyword.operator.arithmetic.sd

  LogicalOperator:
    tag: logicOperator
    name: keyword.operator.logical.sd
    match: ([!]|[&][&]|[|][|]|[?][?])

  BitwiseOperator:
    tag: bitwiseOperator
    name: keyword.operator.bitwise.sd
    match: ([&]|[~]|[\^]|[|])

  AssignEqualOperator:
    tag: updateOperator
    name: keyword.operator.assignment.sd
    match: ([=])

  DecrementOperator:
    tag: updateOperator
    name: keyword.operator.decrement.sd
    match: ([-][-])

  IncrementOperator:
    tag: updateOperator
    name: keyword.operator.increment.sd
    match: ([+][+])

  ArithmeticOperator:
    tag: arithmeticOperator
    name: keyword.operator.arithmetic.sd
    match: ([%]|[*]|[/]|[-]|[+])

  AssignMultiplyOperator:
    begin: (?<=[_a-zA-Z0-9)\]])\s*(?=(\/[*]([^*]|([*][^\/]))*[*]\/\s*)+(?:(/=)|(?:(/)(?![/*]))))
    end: (?:(/=)|(?:(/)(?![*]([^*]|([*][^\/]))*[*][/])))
    endCaptures:
      1:
        tag: updateOperator
        name: keyword.operator.assignment.compound.sd
      2:
        tag: arithmeticOperator
        name: keyword.operator.arithmetic.sd

  AssignDivideOperator:
    match: (?<=[_a-zA-Z0-9)\]])([\s]*)([/][=]|([/])(?![/*]))
    captures:
      2:
        tag: arithmeticOperator
        name: keyword.operator.arithmetic.sd

  NumericLiteral:
    patterns:
      - { include: "#HexNumber" }
      - { include: "#BinaryNumber" }
      - { include: "#OctalNumber" }
      - { include: "#DecimalNumber" }

  HexNumber:
    tag: number
    name: constant.numeric.hex.sd
    match: (\b(?<![$])0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(?:n)?\b(?![$]))
    captures:
      1:
        tag: number
        name: storage.type.numeric.bigint.sd

  BinaryNumber:
    tag: number
    name: constant.numeric.binary.sd
    match: (\b(?<![$])0(?:b|B)[01][01_]*(?:n)?\b(?![$]))
    captures:
      1:
        tag: number
        name: storage.type.numeric.bigint.sd

  OctalNumber:
    tag: number
    name: constant.numeric.octal.sd
    match: (\b(?<![$])0(?:o|O)?[0-7][0-7_]*(?:n)?\b(?![$]))
    captures:
      1:
        tag: number
        name: storage.type.numeric.bigint.sd

  DecimalNumber:
    tag: number
    name: constant.numeric.decimal.sd
    # match: 1.1E+3|1.E+3|.1E+3|1E+3|1.1|1.|.1|1
    match: ((?<![$])(?:(?:\b[0-9][0-9_]*[.][0-9][0-9_]*[eE][+-]?[0-9][0-9_]*[n]?\b)|(?:\b[0-9][0-9_]*[.][eE][+-]?[0-9][0-9_]*[n]?\b)|(?:\B[.][0-9][0-9_]*[eE][+-]?[0-9][0-9_]*[n]?\b)|(?:\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*[n]?\b)|(?:\b[0-9][0-9_]*[.][0-9][0-9_]*[n]?\b)|(?:\b[0-9][0-9_]*[.][n]?\B)|(?:\B[.][0-9][0-9_]*[n]?\b)|(?:\b[0-9][0-9_]*[n]?\b(?![.])))(?![$]))

  BooleanLiteral:
    patterns:
      - { include: "#BooleanTrue" }
      - { include: "#BooleanFalse" }

  BooleanTrue:
    tag: bool
    name: constant.language.boolean.true.sd
    match: (?<![_a-zA-Z0-9])(?:(?<=[.][.][.])|(?<![.]))true(?![_a-zA-Z0-9])(?:(?=[.][.][.])|(?![.]))

  BooleanFalse:
    tag: bool
    name: constant.language.boolean.false.sd
    match: (?<![_a-zA-Z0-9])(?:(?<=[.][.][.])|(?<![.]))false(?![_a-zA-Z0-9])(?:(?=[.][.][.])|(?![.]))

  NullLiteral:
    tag: "null"
    name: constant.language.null.sd
    match: (?<![_a-zA-Z0-9])(?:(?<=[.][.][.])|(?<![.]))null(?![_a-zA-Z0-9])(?:(?=[.][.][.])|(?![.]))

  UndefinedLiteral:
    tag: "null"
    name: constant.language.undefined.sd
    match: (?<![_a-zA-Z0-9])(?:(?<=[.][.][.])|(?<![.]))undefined(?![_a-zA-Z0-9])(?:(?=[.][.][.])|(?![.]))

  NumericConstantLiteral:
    patterns:
      - { include: "#NaN" }
      - { include: "#Infinity" }

  NaN:
    tag: atom
    name: constant.language.nan.sd
    match: (?<![_a-zA-Z0-9])(?:(?<=[.][.][.])|(?<![.]))NaN(?![_a-zA-Z0-9])(?:(?=[.][.][.])|(?![.]))

  Infinity:
    tag: atom
    name: constant.language.infinity.sd
    match: (?<![_a-zA-Z0-9])(?:(?<=[.][.][.])|(?<![.]))Infinity(?![_a-zA-Z0-9])(?:(?=[.][.][.])|(?![.]))

  ArrayLiteral:
    name: meta.array.literal.sd
    brackets: true
    begin: (\[)
    beginCaptures:
      1:
        tag: brace
        name: meta.brace.square.open.sd
    patterns:
      - { include: "#Expression" }
      - { include: "#PunctuationComma" }
    end: (\])
    endCaptures:
      1:
        tag: brace
        name: meta.brace.square.close.sd

  ObjectLiteral:
    name: meta.object.literal.sd
    brackets: true
    begin: (\{)
    beginCaptures:
      1:
        tag: brace
        name: meta.brace.curly.open.sd
    patterns:
      - { include: "#Expression" }
      - { include: "#PunctuationComma" }
      - { include: "#PunctuationColon" }
    end: (\})
    endCaptures:
      1:
        tag: brace
        name: meta.brace.curly.close.sd

  PunctuationComma:
    tag: punctuation
    name: punctuation.separator.comma.sd
    match: ","

  PunctuationColon:
    tag: punctuation
    name: punctuation.separator.colon.sd
    match: ":"

  ParenExpression:
    brackets: true
    begin: ([(])
    beginCaptures:
      1:
        tag: paren
        name: meta.brace.round.open.sd
    patterns:
      - { include: "#Expression" }
    end: ([)])
    endCaptures:
      1:
        tag: paren
        name: meta.brace.round.close.sd

  PropertyAccessor:
    match: ([.]|\?[.](?!\s*[0-9]))(\s*)([#]?[a-zA-Z][_$0-9a-zA-Z]*)(?![_a-zA-Z0-9])
    captures:
      1:
        tag: content
        name: punctuation.accessor.sd
      3:
        tag: variableName
        name: variable.other.property.sd

  VariableIdentifier:
    tag: variableName
    name: variable.other.constant.sd
    match: ([_a-zA-Z][_a-zA-Z0-9]*)

  ExpressionPunctuations:
    patterns:
      - { include: "#PunctuationComma" }
      - { include: "#PunctuationAccessor" }

  PunctuationAccessor:
    match: (?:([.])|(\?[.](?!\s*[0-9])))
    captures:
      1:
        tag: punctuation
        name: punctuation.accessor.sd
      2:
        tag: punctuation
        name: punctuation.accessor.optional.sd

  Template:
    patterns:
      - { include: "#TemplateSubstitution" }

  TemplateSubstitution:
    name: string.template.ts
    begin: ([_a-zA-Z][_a-zA-Z0-9]*)?([`])
    beginCaptures:
      1:
        tag: tagName
        name: entity.name.function.tagged-template.sd
      2:
        tag: string
        name: punctuation.definition.string.template.begin.sd
    patterns:
      - { include: "#Color" }
      - { include: "#TemplateSubstitutionElement" }
      - { include: "#StringCharacterEscape" }
      - { include: "#TemplateStringContent" }
    end: ([`])
    endCaptures:
      1:
        tag: string
        name: punctuation.definition.string.template.end.sd

  TemplateSubstitutionElement:
    brackets: true
    name: meta.template.expression.sd
    begin: ([$]?[{])
    beginCaptures:
      1:
        tag: keyword
        name: punctuation.definition.template-expression.begin.sd
    contentName: meta.embedded.line.sd
    patterns:
      - { include: "#Expression" }
    end: ([}])
    endCaptures:
      1:
        tag: keyword
        name: punctuation.definition.template-expression.end.sd

  StringCharacterEscape:
    tag: escape
    name: constant.character.escape.ts
    match: ([\\])(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|u\{[0-9A-Fa-f]+\}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.|$)

  TemplateStringContent:
    tag: string
    name: string.template.sd
    match: ((?:(?![$]?[{])[^\n\r`])+)

  FunctionName:
    tag: meta
    name: meta.function-name.sd
    match: ([_a-zA-Z][_a-zA-Z0-9]*)
    captures:
      1:
        tag: function(variableName)
        name: entity.name.function.sd

  FunctionCall:
    tag: meta
    name: meta.function-call.sd
    begin: ([_a-zA-Z][_a-zA-Z0-9]*)(?=[(])
    beginCaptures:
      1:
        tag: function(variableName)
        name: entity.name.function.sd
    patterns:
      - { include: "#Parameters" }
    end: ($\n?)
    endCaptures:
      1:
        patterns:
          - { include: "#Newline" }

  Color:
    patterns:
      - { include: "#HEXColor" }
      - { include: "#RGBColor" }
      - { include: "#HSLColor" }

  HEXColor:
    tag: string
    name: string.color.hex.sd
    match: (#)((?:[0-9a-fA-F]{2}){2,4})
    color: true

  RGBColor:
    tag: string
    name: string.color.rgb.sd
    match: (rgb)([(][\d]+[\s]+[\d]+[\s]+[\d]+(?:[\s]*[/][\s]*[\d.]+[%]?)?[)])
    color: true

  HSLColor:
    tag: string
    name: string.color.hsl.sd
    match: (hsl)([(][\d]+[\s]+[\d]+[%]?[\s]+[\d]+[%]?(?:[\s]*[/][\s]*[\d.]+[%]?)?[)])
    color: true
