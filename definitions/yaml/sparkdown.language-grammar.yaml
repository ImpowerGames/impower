fileTypes: [sparkdown, sd, script, project]
keyEquivalent: ^~S
indentUnit: "  "
name: Sparkdown
scopeName: text.source.sparkdown
uuid: E26C862D-2A5E-4F10-B0C3-D6BCB838CB7F
flags: mu

variables:
  IDENTIFIER_START_CHAR:  '_\p{L}'
  IDENTIFIER_END_CHAR: '0-9_\p{L}'
  IDENTIFIER: '[{{IDENTIFIER_START_CHAR}}][{{IDENTIFIER_END_CHAR}}]*'
  BEFORE_KEYWORD: (?<![{{IDENTIFIER_END_CHAR}}])(?:(?<=\.\.\.)|(?<!\.))
  AFTER_KEYWORD: (?![{{IDENTIFIER_END_CHAR}}])(?:(?=\.\.\.)|(?!\.))
  WS: '[^\S\n\r]'
  # End Of Line
  EOL: '(?:$|{{WS}}*$|{{WS}}*[#].*$|{{WS}}*[/][/].*$)'
  # End Of Keyword
  EOK: '(?:$|{{WS}}+|(?=[#]|[/][/]|[/][*]))'

patterns:
  - { include: "#Newline" }
  - { include: "#Annotation" }
  - { include: "#FrontMatter" }
  - { include: "#Todo" }
  - { include: "#Include" }
  - { include: "#Declaration" }
  - { include: "#Knot" }
  - { include: "#Stitch" }
  - { include: "#Divert" }
  - { include: "#Logic" }
  - { include: "#Display" }
  - { include: "#Unknown" }

repository:

########## Helpers ##########

  FileSeparator:
    match: ^([/]{4,})({{WS}}*)([^/\s]+)({{WS}}*)([/]{4,})({{WS}}*)$

  FileSplitter:
    match: ^((?:[/]{4,})(?:{{WS}}*)(?:[^/\s]+)(?:{{WS}}*)(?:[/]{4,})(?:{{WS}}*))$

########## Annotation ##########

  Annotation:
    patterns:
      - { include: "#Comment" }
      - { include: "#Tag" }

########## Comment ##########

  Comment:
    patterns:
      - { include: "#LineComment" }
      - { include: "#BlockComment" }

  LineComment:
    tag: lineComment
    name: comment.line.sd
    begin: ({{WS}}*)([/][/])
    beginCaptures:
      1: 
        patterns:
          - { include: "#Whitespace" }
      2:
        name: punctuation.definition.comment.mark
    patterns:
      - { include: "#LineCommentContent" }
    end: (?=$)

  LineCommentContent:
    tag: definition(lineComment)
    name: punctuation.definition.comment.content.sd
    match: (.+$)

  BlockComment:
    tag: blockComment
    name: comment.block.sd
    begin: ({{WS}}*)([/][*])
    beginCaptures:
      1: 
        patterns:
          - { include: "#Whitespace" }
      2:
        name: punctuation.definition.comment.mark
    patterns:
      - { include: "#BlockCommentContent" }
    end: ([*][/])
    endCaptures:
      1:
        name: punctuation.definition.comment.mark

  BlockCommentContent:
    tag: definition(lineComment)
    name: punctuation.definition.comment.content.sd
    match: (.+?)(?=[*][/])

########## Tag ##########

  Tag:
    tag: docComment
    name: comment.line.sd entity.tag.sd
    begin: ({{WS}}*)([#])
    beginCaptures:
      1: 
        patterns:
          - { include: "#Whitespace" }
      2: 
        tag: definition(docComment)
        name: punctuation.definition.comment.sd comment.line.sd entity.tag.begin.sd
    patterns:
      - { include: "#Annotation" }
      - { include: "#TagContent" }
    end: (?=$|[#])

  TagContent:
    tag: definition(docComment)
    name: punctuation.definition.comment.content.sd
    match: (.+?)(?=$|[#])

########## Todo ##########

  Todo:
    tag: docComment
    name: comment.line.sd entity.todo.sd
    begin: ({{WS}}*)(TODO|todo)({{EOK}})
    beginCaptures:
      1:
        patterns:
          - { include: "#Whitespace" }
      2:
        tag: definition(docComment)
        name: constant.other entity.todo.begin.sd
      3:
        patterns:
          - { include: "#Whitespace" }
    patterns:
      - { include: "#Annotation" }
      - { include: "#TodoContent" }
    end: (?=$)

  TodoContent:
    tag: definition(docComment)
    name: punctuation.definition.comment.content.sd
    match: (.+$)

########## Include ##########

  Include:
    tag: meta
    name: meta.import.include.sd
    begin: ^({{WS}}*)(INCLUDE)({{EOK}})
    beginCaptures:
      1:
        patterns:
          - { include: "#Indent" }
      2:
        tag: controlKeyword
        name: keyword.control.import.include.sd
      3:
        patterns:
          - { include: "#EndOfKey" }
    patterns:
      - { include: "#Annotation" }
      - { include: "#IncludeContent" }
    end: (?=$)

  IncludeContent:
    tag: string
    name: string.include.sd
    match: (.+$)

########## Declaration: VAR LIST CONST EXTERNAL DEFINE ##########

  Declaration:
    patterns:
      - { include: "#VarDeclaration" }
      - { include: "#ListDeclaration" }
      - { include: "#ConstDeclaration" }
      - { include: "#ExternalDeclaration" }
      - { include: "#DefineDeclaration" }

  VarDeclaration:
    tag: meta
    name: storage.type.var.sd
    begin: ^({{WS}}*)(VAR)({{EOK}})
    beginCaptures:
      1:
        patterns:
          - { include: "#Indent" }
      2:
        tag: controlKeyword
        name: keyword.control.definition.var.sd
      3:
        patterns:
          - { include: "#EndOfKey" }
    patterns:
      - { include: "#Annotation" }
      - { include: "#Assignment" }
    end: (?=$)

  ListDeclaration:
    tag: meta
    name: storage.type.list.sd
    begin: ^({{WS}}*)(LIST)({{EOK}})
    beginCaptures:
      1:
        patterns:
          - { include: "#Indent" }
      2:
        tag: controlKeyword
        name: keyword.control.definition.list.sd
      3:
        patterns:
          - { include: "#EndOfKey" }
    patterns:
      - { include: "#Annotation" }
      - { include: "#Assignment" }
    end: (?=$)

  ConstDeclaration:
    tag: meta
    name: storage.type.const.sd
    begin: ^({{WS}}*)(CONST)({{EOK}})
    beginCaptures:
      1:
        patterns:
          - { include: "#Indent" }
      2:
        tag: controlKeyword
        name: keyword.control.definition.const.sd
      3:
        patterns:
          - { include: "#EndOfKey" }
    patterns:
      - { include: "#Annotation" }
      - { include: "#Assignment" }
    end: (?=$)

  ExternalDeclaration:
    tag: meta
    name: storage.type.external.sd
    begin: ^({{WS}}*)(EXTERNAL)({{EOK}})
    beginCaptures:
      1:
        patterns:
          - { include: "#Indent" }
      2:
        tag: controlKeyword
        name: keyword.control.definition.external.sd
      3:
        patterns:
          - { include: "#EndOfKey" }
    patterns:
      - { include: "#Annotation" }
      - { include: "#ExternalFunctionDeclaration" }
    end: (?=$)

  DefineDeclaration:
    tag: meta
    name: meta.definition.type.sd
    begin: ^({{WS}}*)(DEFINE)($|{{WS}}+)([^:]*?)($|{{WS}}*)($|[:])($|{{WS}}*)($|(?!.+)$)
    beginCaptures:
      1:
        patterns:
          - { include: "#Indent" }
      2:
        tag: controlKeyword
        name: keyword.control.definition.object.sd
      3:
        patterns:
          - { include: "#Whitespace" }
      4:
        patterns:
          - { include: "#TargetAccessPath" }
      5:
        patterns:
          - { include: "#Whitespace" }
      6:
        patterns:
          - { include: "#DeclarationAssignOperator" }
      7:
        patterns:
          - { include: "#Whitespace" }
    patterns:
      - { include: "#Annotation" }
      - { include: "#StructField" }
      - { include: "#Unknown" }
    end: (?=^{{WS}}?(?={{EOL}}))|(?=^(?!\1(?:{{WS}}{2,})))

  Assignment:
    begin: ({{IDENTIFIER}})({{WS}}*)($|[=]|(?={{EOL}}))
    beginCaptures:
      1:
        patterns:
          - { include: "#VariableName" }
      2:
        patterns:
          - { include: "#Whitespace" }
      3:
        patterns:
          - { include: "#AssignEqualOperator" }
    patterns:
      - { include: "#Annotation" }
      - { include: "#Expression" }
    end: (?=$)

  ExternalFunctionDeclaration:
    begin: ({{IDENTIFIER}})({{WS}}*)
    beginCaptures:
      1:
        patterns:
          - { include: "#FunctionName" }
      2:
        patterns:
          - { include: "#Whitespace" }
    patterns:
      - { include: "#Annotation" }
      - { include: "#FunctionParameters" }
    end: (?=$)

  RefModifier:
    tag: modifier
    name: storage.modifier.ref.sd
    match: (ref)

  FunctionParameters:
    brackets: true
    begin: ([(])
    beginCaptures:
      1:
        tag: paren
        name: meta.brace.round.open.sd
    patterns:
      - { include: "#Annotation" }
      - { include: "#Parameter" }
    end: ([)])
    endCaptures:
      1:
        tag: paren
        name: meta.brace.round.close.sd

  Parameter:
    tag: meta
    name: meta.parameter.sd
    begin: (?=.+$)
    patterns:
      - { include: "#Annotation" }
      - { include: "#Expression" }
    end: (?=[)])|([,])
    endCaptures:
      1:
        tag: separator
        name: meta.template.expression.comma.sd

  StructField:
    emit: true
    patterns:
      - { include: "#StructMapItem" }
      - { include: "#StructScalarItem" }
      - { include: "#StructMapProperty" }
      - { include: "#StructScalarProperty" }
      - { include: "#Newline" }
      - { include: "#StructBlankProperty" }

  StructBlankProperty:
    match: (\s+$)
    captures:
      1: 
        patterns:
          - { include: "#Indent" }

  StructMapItem:
    tag: meta
    name: meta.definition.struct.item.map.sd
    begin: ^({{WS}}*)([-])($|{{WS}}+$)
    beginCaptures:
      1:
        patterns:
          - { include: "#Indent" }
      2:
        tag: keyword
        name: keyword.operator.expression.array.sd
      3:
        patterns:
          - { include: "#Whitespace" }
    patterns:
      - { include: "#Annotation" }
      - { include: "#StructMapItem" }
      - { include: "#StructScalarItem" }
      - { include: "#StructMapProperty" }
      - { include: "#StructScalarProperty" }
      - { include: "#Newline" }
      - { include: "#Unknown" }
    end: (?=^(?!\1(?:{{WS}}{2,})))

  StructScalarItem:
    tag: meta
    name: meta.definition.struct.item.scalar.sd
    begin: ^({{WS}}*)([-])($|{{WS}}+)(?=.*\S.*$)
    beginCaptures:
      1:
        patterns:
          - { include: "#Indent" }
      2:
        tag: keyword
        name: keyword.operator.expression.array.sd
      3:
        patterns:
          - { include: "#Whitespace" }
    patterns:
      - { include: "#Annotation" }
      - { include: "#ValueText" }
    end: (?=$)

  StructMapProperty:
    tag: meta
    name: meta.definition.struct.property.map.sd
    begin: ^({{WS}}*)({{IDENTIFIER}}|[0-9])($|{{WS}}*)($|[:])($|{{WS}}*$)
    beginCaptures:
      1:
        patterns:
          - { include: "#Indent" }
      2:
        patterns:
          - { include: "#DeclarationProperty" }
      3:
        patterns:
          - { include: "#Whitespace" }
      4:
        tag: punctuation
        name: punctuation.separator.colon.sd
      5:
        patterns:
          - { include: "#Whitespace" }
    patterns:
      - { include: "#Annotation" }
      - { include: "#StructMapItem" }
      - { include: "#StructScalarItem" }
      - { include: "#StructMapProperty" }
      - { include: "#StructScalarProperty" }
      - { include: "#Newline" }
      - { include: "#StructBlankProperty" }
      - { include: "#Unknown" }
    end: (?=^(?!\1(?:{{WS}}{2,})))

  StructScalarProperty:
    tag: meta
    name: meta.definition.struct.property.scalar.sd
    begin: ^({{WS}}*)({{IDENTIFIER}})($|{{WS}}*)(?:($|[=])($|{{WS}}*)|($|[:])($|{{WS}}*)(?=.*\S.*$))
    beginCaptures:
      1:
        patterns:
          - { include: "#Indent" }
      2:
        patterns:
          - { include: "#DeclarationProperty" }
      3:
        patterns:
          - { include: "#Whitespace" }
      4:
        tag: updateOperator
        name: keyword.operator.assignment.sd
      5:
        patterns:
          - { include: "#Whitespace" }
      6:
        tag: updateOperator
        name: keyword.operator.assignment.sd
      7:
        patterns:
          - { include: "#Whitespace" }
    patterns:
      - { include: "#Annotation" }
      - { include: "#ValueText" }
    end: (?=$)

  FunctionCall:
    begin: ({{IDENTIFIER}})(?=[(])
    beginCaptures:
      1:
        patterns:
          - { include: "#FunctionName" }
    patterns:
      - { include: "#Annotation" }
      - { include: "#FunctionParameters" }
    end: ([;])|(?=$|[^(])
    endCaptures:
      1:
        patterns:
          - { include: "#PunctuationSemicolon" }

  FunctionAccessor:
    begin: ([.]|[?][.])?({{IDENTIFIER}})(?=[(])
    beginCaptures:
      1:
        patterns:
          - { include: "#PunctuationAccessor" }
      2:
        patterns:
          - { include: "#FunctionName" }
    patterns:
      - { include: "#Annotation" }
      - { include: "#FunctionParameters" }
    end: ([;])|(?=$|[^(])
    endCaptures:
      1:
        patterns:
          - { include: "#PunctuationSemicolon" }

  ValueText:
    emit: true
    patterns:
      - { include: "#Expression" }

  TargetAccessPath:
    emit: true
    patterns:
      - { include: "#AccessPath" }
      - { include: "#IllegalExpression" }

  AccessPath:
    begin: (?=[{{IDENTIFIER_START_CHAR}}])
    patterns:
      - { include: "#Annotation" }
      - { include: "#AccessPart" }
    end: (?=$|[^{{IDENTIFIER_START_CHAR}}?!.\[])

  AccessPart:
    emit: true
    patterns:
      - { include: "#ArrayLiteral" }
      - { include: "#FunctionAccessor" }
      - { include: "#PropertyAccessor" }
      - { include: "#NamespaceAccessor" }
      - { include: "#VariableName" }
      - { include: "#PunctuationAccessor" }

  DeclarationType:
    emit: true
    patterns:
      - { include: "#TypeIdentifier" }
      - { include: "#Unknown" }

  DeclarationName:
    emit: true
    patterns:
      - { include: "#VariableName" }
      - { include: "#Unknown" }

  DeclarationProperty:
    emit: true
    patterns:
      - { include: "#PropertyName" }
      - { include: "#Unknown" }

  DeclarationAssignOperator:
    emit: true
    patterns:
      - { include: "#ArrowOperator" }
      - { include: "#AssignEqualOperator" }

########## Label ##########

  Label:
    tag: definition(heading)
    name: keyword.control.section.sd
    match: ([(])({{WS}}*)({{IDENTIFIER}})({{WS}}*)([)])
    captures:
      1:
        tag: paren
        name: meta.brace.round.open.sd
      2:
        patterns:
          - { include: "#Whitespace" }
      3:
        patterns:
          - { include: "#Identifier" }
      4:
        patterns:
          - { include: "#Whitespace" }
      5:
        tag: paren
        name: meta.brace.round.close.sd

########## Chain ##########

  Chain:
    tag: meta
    name: meta.chain.sd
    match: ({{WS}}*)([>])
    captures:
      1:
        patterns:
          - { include: "#Whitespace" }
      2:
        tag: keyword
        name: keyword.other.chain.sd

########## Glue ##########

  Glue:
    tag: meta
    name: meta.glue.sd
    match: ({{WS}}*)([<][>])
    captures:
      1:
        patterns:
          - { include: "#Whitespace" }
      2:
        tag: keyword
        name: keyword.other.glue.sd

########## Choice ##########

  Choice:
    name: entity.choice.sd
    begin: ({{WS}}*)((?:[*]{{EOK}})+|(?:[+]{{EOK}})+)
    beginCaptures:
      1:
        patterns:
          - { include: "#Indent" }
      2:
        tag: keyword
        name: keyword.operator.expression.list.sd
    patterns:
      - { include: "#Annotation" }
      - { include: "#Label" }
      - { include: "#ConditionalBlock" }
      - { include: "#Divert" }
      - { include: "#ChoiceText" }
    end: ({{EOL}})(\r\n|\r|\n)?
    endCaptures:
      1:
        patterns:
          - { include: "#EndOfLine" }
      2:
        patterns:
          - { include: "#Newline" }

  ChoiceText:
    tag: string
    name: string.choice.sd
    match: (.+?)(?=$|[-][>]|[<][>]|[#])
    captures:
      1:
        patterns:
          - { include: "#Annotation" }
          - { include: "#SuppressedText" }
          - { include: "#UnsuppressedText" }

  UnsuppressedText:
    match: (.+?)(?=\[.*?\]|{{EOL}})
    captures:
      1:
        patterns:
          - { include: "#Annotation" }
          - { include: "#DisplayText" }

  SuppressedText:
    match: (\[)(.*?)(\])
    captures:
      1:
        tag: keyword
        name: punctuation.definition.template-expression.begin.choice.suppression.sd
      2:
        patterns:
          - { include: "#Annotation" }
          - { include: "#DisplayText" }
      3:
        tag: keyword
        name: punctuation.definition.template-expression.end.choice.suppression.sd

########## Logic ##########

  Logic:
    tag: meta
    name: meta.logic.sd
    begin: ({{WS}}*)(~)({{EOK}})
    beginCaptures:
      1:
        patterns:
          - { include: "#Indent" }
      2:
        tag: keyword
        name: keyword.other.logic.sd
      3:
        patterns:
          - { include: "#EndOfKey" }
    patterns:
      - { include: "#Annotation" }
      - { include: "#Whitespace" }
      - { include: "#ReturnStatement" }
      - { include: "#TempDeclaration" }
      - { include: "#Expression" }
    end: ({{EOL}})(\r\n|\r|\n)?
    endCaptures:
      1:
        patterns:
          - { include: "#EndOfLine" }
      2:
        patterns:
          - { include: "#Newline" }

  ReturnStatement:
    begin: ({{WS}}*)(return)({{EOK}})
    beginCaptures:
      1:
        patterns:
          - { include: "#Whitespace" }
      2:
        tag: controlKeyword
        name: keyword.control.flow.return.sd
      3:
        patterns:
          - { include: "#EndOfKey" }
    patterns:
      - { include: "#Annotation" }
      - { include: "#Expression" }
    end: (?=$)

  TempDeclaration:
    begin: ({{WS}}*)(temp)({{EOK}})
    beginCaptures:
      1:
        patterns:
          - { include: "#Whitespace" }
      2:
        tag: controlKeyword
        name: keyword.control.definition.temp.sd
      3:
        patterns:
          - { include: "#EndOfKey" }
    patterns:
      - { include: "#Annotation" }
      - { include: "#Expression" }
    end: (?=$)

########## Gather ##########

  Gather:
    begin: ^({{WS}}*)((?:[-]{{EOK}})+)
    beginCaptures:
      1:
        patterns:
          - { include: "#Indent" }
      2:
        tag: keyword
        name: keyword.other.gather.sd
      3:
        patterns:
          - { include: "#EndOfKey" }
    patterns:
      - { include: "#Annotation" }
      - { include: "#Choice" }
      - { include: "#Label" }
      - { include: "#Divert" }
      - { include: "#Todo" }
      - { include: "#Logic" }
      - { include: "#Tag" }
      - { include: "#DisplayText" }
    end: ({{EOL}})(\r\n|\r|\n)?
    endCaptures:
      1:
        patterns:
          - { include: "#EndOfLine" }
      2:
        patterns:
          - { include: "#Newline" }

########## Knot, Stitch, Function ##########

  Knot:
    begin: ^({{WS}}*)([=]{2,})({{EOK}})
    beginCaptures:
      1:
        patterns:
          - { include: "#Indent" }
      2:
        tag: definition(heading)
        name: keyword.control.section.sd
      3:
        patterns:
          - { include: "#EndOfKey" }
    patterns:
      - { include: "#Annotation" }
      - { include: "#FunctionDeclaration" }
      - { include: "#KnotStitchDeclaration" }
    end: ([=]{2,})|(?=$)
    endCaptures:
      1:
        tag: definition(heading)
        name: keyword.control.section.sd

  Stitch:
    begin: ^({{WS}}*)([=])({{EOK}})
    beginCaptures:
      1:
        patterns:
          - { include: "#Indent" }
      2:
        tag: definition(heading)
        name: keyword.control.section.sd
      3:
        patterns:
          - { include: "#EndOfKey" }
    patterns:
      - { include: "#Annotation" }
      - { include: "#KnotStitchDeclaration" }
    end: (?=$)

  KnotStitchDeclaration:
    begin: ({{WS}}*)({{IDENTIFIER}})({{WS}}*)
    beginCaptures:
      1:
        patterns:
          - { include: "#Whitespace" }
      2:
        tag: definition(heading)
        name: keyword.control.section.sd
      3:
        patterns:
          - { include: "#Whitespace" }
    patterns:
      - { include: "#Annotation" }
      - { include: "#FunctionParameters" }
    end: (?=$|[=]|[/][/])

  FunctionDeclaration:
    begin: ({{WS}}*)(function)({{WS}}*)({{IDENTIFIER}})({{WS}}*)
    beginCaptures:
      1:
        patterns:
          - { include: "#Whitespace" }
      2:
        tag: controlKeyword
        name: keyword.control.definition.function.sd
      3:
        patterns:
          - { include: "#Whitespace" }
      4:
        tag: function(variableName)
        name: entity.name.function.sd
      5:
        patterns:
          - { include: "#Whitespace" }
    patterns:
      - { include: "#Annotation" }
      - { include: "#FunctionParameters" }
    end: (?=$|[=])

########## Divert & Thread ##########

  Divert:
    begin: ({{WS}}*)(->|<-)
    beginCaptures:
      1:
        patterns:
          - { include: "#Whitespace" }
      2:
        patterns:
          - { include: "#DivertArrow" }
    patterns:
      - { include: "#Annotation" }
      - { include: "#Whitespace" }
      - { include: "#End" }
      - { include: "#Done" }
      - { include: "#FunctionCall" }
      - { include: "#DivertPath" }
      - { include: "#TunnelArrow" }
    end: (?=$|[}]|[)]|[|]|[-]|[#])

  DivertArrow:
    tag: function(variableName)
    name: entity.name.function.divert.sd
    match: (->|<-)

  End:
    tag: keyword
    name: constant.language.end.sd
    match: (END)

  Done:
    tag: keyword
    name: constant.language.done.sd
    match: (DONE)

  DivertPath:
    tag: heading
    name: keyword.control.divert.path.sd
    match: ([.{{IDENTIFIER_END_CHAR}}]+)

  TunnelArrow:
    tag: function(variableName)
    name: entity.name.function.divert.sd
    match: (->(?:->)?|<-)

########## ConditionalBlock (anything within {}) ##########

  ConditionalBlock:
    brackets: true
    begin: ([{])
    beginCaptures:
      1:
        tag: keyword
        name: punctuation.definition.template-expression.begin.sd
    patterns:
      - { include: "#Annotation" }
      - { include: "#CloseBraceAhead" }
      - { include: "#MultilineAlternative" }
      - { include: "#MultilineBlock" }
      - { include: "#ConditionalSubstitution" }
      - { include: "#Divert" }
      - { include: "#Substitution" }
      - { include: "#FirstAlternativeItem" }
      - { include: "#AlternativeItem" }
      - { include: "#ConditionalBlock" }
      - { include: "#ConditionalText" }
    end: ([}])
    endCaptures:
      1:
        tag: keyword
        name: punctuation.definition.template-expression.end.sd

  Substitution:
    name: keyword.control.sd
    match: (?<=[{])([^{}:|]+)(?=[}])
    captures:
      1:
        patterns:
          - { include: "#Expression" }

  FirstAlternativeItem:
    begin: (?<=[{])({{WS}}*)([&!~])
    beginCaptures:
      1:
        patterns:
          - { include: "#Whitespace" }
      2:
        tag: controlKeyword
        name: keyword.control.alternative.type.sd
    patterns:
      - { include: "#Annotation" }
      - { include: "#PipeAhead" }
      - { include: "#Literal" }
      - { include: "#Divert" }
      - { include: "#Tag" }
      - { include: "#ConditionalSubstitution" }
      - { include: "#ConditionalBlock" }
      - { include: "#ConditionalText" }
    end: (?=[|])

  AlternativeItem:
    begin: ([|])
    beginCaptures:
      1:
        tag: keyword
        name: keyword.other.sd
    patterns:
      - { include: "#Annotation" }
      - { include: "#CloseBraceAhead" }
      - { include: "#PipeAhead" }
      - { include: "#Literal" }
      - { include: "#Divert" }
      - { include: "#ConditionalBlock" }
      - { include: "#ConditionalText" }
    end: (?=[}]|[|])

  ConditionalSubstitution:
    begin: ((?:[^{}|]|[|](?=[|]))+)({{WS}}*)([:])({{WS}}*)(?!{{EOL}})
    beginCaptures:
      1:
        patterns:
          - { include: "#Expression" }
      2:
        patterns:
          - { include: "#Whitespace" }
      3:
        tag: keyword
        name: keyword.colon.sd
      4:
        patterns:
          - { include: "#Whitespace" }
    patterns:
      - { include: "#Annotation" }
      - { include: "#CloseBraceAhead" }
      - { include: "#Divert" }
      - { include: "#InlineElseClause" }
      - { include: "#ConditionalBlock" }
      - { include: "#ConditionalText" }
    end: (?=[}])

  InlineElseClause:
    begin: ([|])
    beginCaptures:
      1:
        tag: keyword
        name: keyword.other.sd
    patterns:
      - { include: "#Annotation" }
      - { include: "#CloseBraceAhead" }
      - { include: "#Divert" }
      - { include: "#ConditionalBlock" }
      - { include: "#ConditionalText" }
    end: (?=[}])

  MultilineBlock:
    begin: ([^{}:]+)({{WS}}*)([:])(?={{EOL}})
    beginCaptures:
      1:
        patterns:
          - { include: "#SequenceKeyword" }
          - { include: "#Expression" }
      2:
        patterns:
          - { include: "#Whitespace" }
      3:
        tag: punctuation
        name: punctuation.separator.colon.sd
    patterns:
      - { include: "#Annotation" }
      - { include: "#CloseBraceAhead" }
      - { include: "#CaseClause" }
      - { include: "#AlternativeClause" }
      - { include: "#Divert" }
      - { include: "#Logic" }
      - { include: "#Choice" }
      - { include: "#Todo" }
      - { include: "#ConditionalBlock" }
      - { include: "#ConditionalText" }
    end: (?=[}])

  MultilineAlternative:
    begin: (?<=[{])({{WS}}*)$
    beginCaptures:
      1:
        patterns:
          - { include: "#Whitespace" }
    patterns:
      - { include: "#Annotation" }
      - { include: "#CloseBraceAhead" }
      - { include: "#CaseClause" }
      - { include: "#AlternativeClause" }
      - { include: "#Divert" }
      - { include: "#Logic" }
      - { include: "#Choice" }
      - { include: "#Todo" }
      - { include: "#ConditionalBlock" }
      - { include: "#ConditionalText" }
    end: (?=[}])

  CaseClause:
    begin: ^({{WS}}*)([-](?![>]))({{WS}})?(?:(else)|([^|{}:]+))({{WS}}*)([:])
    beginCaptures:
      1:
        patterns:
          - { include: "#Indent" }
      2:
        tag: keyword
        name: keyword.switch.clause.sd
      3:
        patterns:
          - { include: "#Whitespace" }
      4:
        tag: controlKeyword
        name: keyword.control.sd
      5:
        patterns:
          - { include: "#Expression" }
      6:
        patterns:
          - { include: "#Whitespace" }
      7:
        tag: punctuation
        name: punctuation.separator.colon.sd
    patterns:
      - { include: "#Annotation" }
      - { include: "#CloseBraceAhead" }
      - { include: "#DashAhead" }
      - { include: "#Divert" }
      - { include: "#Logic" }
      - { include: "#Choice" }
      - { include: "#ConditionalBlock" }
      - { include: "#ConditionalText" }
    end: (?=^|[}]|[-])

  AlternativeClause:
    begin: ^({{WS}}*)([-](?!>))
    beginCaptures:
      1:
        patterns:
          - { include: "#Indent" }
      2:
        tag: keyword
        name: keyword.sequence.clause.sd
    patterns:
      - { include: "#Annotation" }
      - { include: "#CloseBraceAhead" }
      - { include: "#DashAhead" }
      - { include: "#Divert" }
      - { include: "#Logic" }
      - { include: "#Choice" }
      - { include: "#ConditionalBlock" }
      - { include: "#ConditionalText" }
    end: (?=^|[}]|[-])

  SequenceKeyword:
    tag: controlKeyword
    name: keyword.control.sequence.sd
    match: \b(stopping|shuffle|cycle|once)\b

  ConditionalText:
    patterns:
      - { include: "#DisplayText" }

  CloseBraceAhead:
    match: (?=[}])

  PipeAhead:
    match: (?=[|])

  DashAhead:
    match: (?=[-])

########## Expression ##########

  Expression:
    patterns:
      - { include: "#Annotation" }
      - { include: "#RefModifier" }
      - { include: "#FunctionCall" }
      - { include: "#Divert" }
      - { include: "#Operator" }
      - { include: "#Literal" }
      - { include: "#Whitespace" }
      - { include: "#Newline" }
      - { include: "#ParenExpression" }
      - { include: "#AccessPath" }
      - { include: "#PunctuationSemicolon" }
      - { include: "#PunctuationComma" }
      - { include: "#IllegalChar" }

  Indent:
    tag: content
    name: markup.raw.whitespace.indent.sd
    match: ^({{WS}}+)

  Whitespace:
    tag: content
    name: markup.raw.whitespace.sd
    match: ({{WS}}+)

  EndOfKey:
    patterns:
      - { include: "#Annotation" }
      - { include: "#Whitespace" }

  EndOfLine:
    patterns:
      - { include: "#Annotation" }
      - { include: "#Whitespace" }

  Operator:
    emit: true
    patterns:
      - { include: "#SpreadOperator" }
      - { include: "#AssignArithmeticOperator" }
      - { include: "#AssignBitwiseOperator" }
      - { include: "#BitwiseShiftOperator" }
      - { include: "#CompareEqualOperator" }
      - { include: "#CompareRelativeOperator" }
      - { include: "#NegateOperator" }
      - { include: "#LogicalOperator" }
      - { include: "#WordOperator" }
      - { include: "#BitwiseOperator" }
      - { include: "#AssignEqualOperator" }
      - { include: "#DecrementOperator" }
      - { include: "#IncrementOperator" }
      - { include: "#ArithmeticOperator" }
      - { include: "#AssignMultiplyOperator" }
      - { include: "#AssignDivideOperator" }

  SpreadOperator:
    tag: derefOperator
    name: keyword.operator.spread.sd
    match: ([.][.][.])

  AssignArithmeticOperator:
    tag: updateOperator
    name: keyword.operator.assignment.compound.sd
    match: ([*][=]|(?<!\()[/][=]|[%][=]|[+][=]|[-][=])

  AssignBitwiseOperator:
    tag: updateOperator
    name: keyword.operator.assignment.compound.bitwise.sd
    match: ([&][=]|[\^][=]|[<][<][=]|[>][>][=]|[>][>][>][=]|[|][=])

  BitwiseShiftOperator:
    tag: updateOperator
    name: keyword.operator.bitwise.shift.sd
    match: ([<][<]|[>][>][>]|[>][>])

  CompareEqualOperator:
    tag: compareOperator
    name: keyword.operator.comparison.sd
    match: ([=][=][=]|[!][=][=]|[=][=]|[!][=])

  CompareRelativeOperator:
    tag: compareOperator
    name: keyword.operator.relational.sd
    match: ([<][=]|[>][=]|[<][>]|[<]|[>])

  NegateOperator:
    tag: updateOperator
    match: (?<=[{{IDENTIFIER_END_CHAR}}])([!])\s*(?:([/][=])|(?:([/])(?![/*])))
    captures:
      1:
        tag: logicOperator
        name: keyword.operator.logical.sd
      2:
        tag: updateOperator
        name: keyword.operator.assignment.compound.sd
      3:
        tag: arithmeticOperator
        name: keyword.operator.arithmetic.sd

  LogicalOperator:
    tag: logicOperator
    name: keyword.operator.logical.sd
    match: ([!]|[&][&]|[|][|]|[?][?])

  BitwiseOperator:
    tag: bitwiseOperator
    name: keyword.operator.bitwise.sd
    match: ([&]|[~]|[\^]|[|])

  AssignEqualOperator:
    tag: updateOperator
    name: keyword.operator.assignment.sd
    match: ([=])

  DecrementOperator:
    tag: updateOperator
    name: keyword.operator.decrement.sd
    match: ([-][-])

  IncrementOperator:
    tag: updateOperator
    name: keyword.operator.increment.sd
    match: ([+][+])

  ArithmeticOperator:
    tag: arithmeticOperator
    name: keyword.operator.arithmetic.sd
    match: ([%]|[*]|[/]|[-]|[+])

  AssignMultiplyOperator:
    begin: (?<=[{{IDENTIFIER_END_CHAR}})\]])\s*(?=(\/[*]([^*]|([*][^\/]))*[*]\/\s*)+(?:(/=)|(?:(/)(?![/*]))))
    patterns:
      - { include: "#Annotation" }
    end: (?:(/=)|(?:(/)(?![*]([^*]|([*][^\/]))*[*][/])))
    endCaptures:
      1:
        tag: updateOperator
        name: keyword.operator.assignment.compound.sd
      2:
        tag: arithmeticOperator
        name: keyword.operator.arithmetic.sd

  AssignDivideOperator:
    match: (?<=[{{IDENTIFIER_END_CHAR}})\]])([\s]*)([/][=]|([/])(?![/*]))
    captures:
      2:
        tag: arithmeticOperator
        name: keyword.operator.arithmetic.sd

  AssignColonOperator:
    tag: punctuation
    name: punctuation.separator.colon.sd
    match: ([:])

  ArrowOperator:
    tag: punctuation
    name: punctuation.separator.colon.sd
    match: ([=][>])

  WordOperator:
    tag: keyword
    name: keyword.logical.word.sd
    match: \b(not|and|or|has|hasnt|mod)\b

  Literal:
    emit: true
    patterns:
      - { include: "#StringLiteral" }
      - { include: "#NumericLiteral" }
      - { include: "#BooleanLiteral" }
      - { include: "#NullLiteral" }
      - { include: "#UndefinedLiteral" }
      - { include: "#NumericConstantLiteral" }

  StringLiteral:
    emit: true
    patterns:
      - { include: "#SingleQuoteString" }
      - { include: "#DoubleQuoteString" }

  DoubleQuoteString:
    tag: string
    name: string.quoted.double.sd
    begin: (["])
    beginCaptures:
      1:
        tag: string
        name: punctuation.definition.string.begin.sd
    patterns:
      - { include: "#Annotation" }
      - { include: "#Color" }
      - { include: "#DoubleQuoteStringContent" }
    end: (["])|($)
    endCaptures:
      1:
        tag: string
        name: punctuation.definition.string.end.sd

  DoubleQuoteStringContent:
    tag: string
    name: string.quoted.double.content.sd
    match: ((?:[^"\\]|\\.)*)

  SingleQuoteString:
    tag: string
    name: string.quoted.single.sd
    begin: (['])
    beginCaptures:
      1:
        tag: string
        name: punctuation.definition.string.begin.sd
    patterns:
      - { include: "#Annotation" }
      - { include: "#Color" }
      - { include: "#SingleQuoteStringContent" }
    end: (['])|($)
    endCaptures:
      1:
        tag: string
        name: punctuation.definition.string.end.sd

  SingleQuoteStringContent:
    tag: string
    name: string.quoted.double.content.sd
    match: ((?:[^'\\]|\\.)*)

  NumericLiteral:
    patterns:
      - { include: "#HexNumber" }
      - { include: "#BinaryNumber" }
      - { include: "#OctalNumber" }
      - { include: "#DecimalNumber" }

  HexNumber:
    tag: number
    name: constant.numeric.hex.sd
    match: (\b(?<![$])0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(?:n)?\b(?![$]))
    captures:
      1:
        tag: number
        name: storage.type.numeric.bigint.sd

  BinaryNumber:
    tag: number
    name: constant.numeric.binary.sd
    match: (\b(?<![$])0(?:b|B)[01][01_]*(?:n)?\b(?![$]))
    captures:
      1:
        tag: number
        name: storage.type.numeric.bigint.sd

  OctalNumber:
    tag: number
    name: constant.numeric.octal.sd
    match: (\b(?<![$])0(?:o|O)?[0-7][0-7_]*(?:n)?\b(?![$]))
    captures:
      1:
        tag: number
        name: storage.type.numeric.bigint.sd

  DecimalNumber:
    tag: number
    name: constant.numeric.decimal.sd
    # match: 1.1E+3|1.E+3|.1E+3|1E+3|1.1|1.|.1|1
    match: ((?<![$])(?:(?:\b[0-9][0-9_]*[.][0-9][0-9_]*[eE][+-]?[0-9][0-9_]*[n]?\b)|(?:\b[0-9][0-9_]*[.][eE][+-]?[0-9][0-9_]*[n]?\b)|(?:\B[.][0-9][0-9_]*[eE][+-]?[0-9][0-9_]*[n]?\b)|(?:\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*[n]?\b)|(?:\b[0-9][0-9_]*[.][0-9][0-9_]*[n]?\b)|(?:\b[0-9][0-9_]*[.][n]?\B)|(?:\B[.][0-9][0-9_]*[n]?\b)|(?:\b[0-9][0-9_]*[n]?\b(?![.])))(?![$]))

  BooleanLiteral:
    patterns:
      - { include: "#BooleanTrue" }
      - { include: "#BooleanFalse" }

  BooleanTrue:
    tag: bool
    name: constant.language.boolean.true.sd
    match: "{{BEFORE_KEYWORD}}true{{AFTER_KEYWORD}}"

  BooleanFalse:
    tag: bool
    name: constant.language.boolean.false.sd
    match: "{{BEFORE_KEYWORD}}false{{AFTER_KEYWORD}}"

  NullLiteral:
    tag: "null"
    name: constant.language.null.sd
    match: "{{BEFORE_KEYWORD}}null{{AFTER_KEYWORD}}"

  UndefinedLiteral:
    tag: "null"
    name: constant.language.undefined.sd
    match: "{{BEFORE_KEYWORD}}undefined{{AFTER_KEYWORD}}"

  NumericConstantLiteral:
    patterns:
      - { include: "#NaN" }
      - { include: "#Infinity" }

  NaN:
    tag: atom
    name: constant.language.nan.sd
    match: "{{BEFORE_KEYWORD}}NaN{{AFTER_KEYWORD}}"

  Infinity:
    tag: atom
    name: constant.language.infinity.sd
    match: "{{BEFORE_KEYWORD}}Infinity{{AFTER_KEYWORD}}"

  ArrayLiteral:
    name: meta.array.literal.sd
    brackets: true
    begin: (\[)
    beginCaptures:
      1:
        tag: brace
        name: meta.brace.square.open.sd
    patterns:
      - { include: "#Annotation" }
      - { include: "#ArrayItem" }
      - { include: "#Newline" }
    end: (\])
    endCaptures:
      1:
        tag: brace
        name: meta.brace.square.close.sd

  ArrayItem:
    tag: meta
    name: meta.item.sd
    begin: (?=.+$)
    patterns:
      - { include: "#Annotation" }
      - { include: "#Expression" }
    end: (?=\])|([,])
    endCaptures:
      1:
        tag: punctuation
        name: punctuation.separator.comma.sd

  PunctuationComma:
    tag: separator
    name: meta.template.expression.comma.sd
    match: ([,])

  PunctuationSemicolon:
    tag: separator
    name: meta.template.expression.semicolon.sd
    match: ([;])

  PunctuationParenOpen:
    match: ([(])
    tag: paren
    name: meta.brace.round.open.sd

  PunctuationParenClose:
    match: ([)])
    tag: paren
    name: meta.brace.round.close.sd

  ParenExpression:
    brackets: true
    begin: ([(])
    beginCaptures:
      1:
        patterns:
          - { include: "#PunctuationParenOpen" }
    patterns:
      - { include: "#Annotation" }
      - { include: "#Expression" }
    end: ([)])
    endCaptures:
      1:
        patterns:
          - { include: "#PunctuationParenClose" }

  NamespaceAccessor:
    match: ({{IDENTIFIER}})([.]|[?][.])({{IDENTIFIER}})(?![(])
    captures:
      1:
        patterns: 
          - { include: "#TypeIdentifier" }
      2:
        patterns: 
          - { include: "#PunctuationAccessor" }
      3:
        patterns: 
          - { include: "#VariableName" }

  PropertyAccessor:
    match: ([.]|[?][.])({{IDENTIFIER}})(?![(])
    captures:
      1:
        patterns: 
          - { include: "#PunctuationAccessor" }
      2:
        patterns: 
          - { include: "#PropertyName" }

  IllegalPropertyDeclaration:
    tag: invalid
    name: invalid.illegal.property-declaration.sd
    match: ({{IDENTIFIER}})({{WS}}*)([:])(.*?)($|(?=[;}]))

  StructName:
    tag: variableName
    name: variable.other.constant.sd
    match: ({{IDENTIFIER}})(?![(])

  TypeIdentifier:
    tag: typeName
    name: support.type.sd
    match: ({{IDENTIFIER}})

  VariableName:
    tag: variableName
    name: variable.other.constant.sd
    match: ({{IDENTIFIER}})(?![(])

  PropertyName:
    tag: propertyName
    name: variable.other.property.sd
    match: ({{IDENTIFIER}})(?![(])

  FunctionName:
    tag: function(variableName)
    name: entity.name.function.sd
    match: ({{IDENTIFIER}})

  Identifier:
    match: ({{IDENTIFIER}})

  PunctuationAccessor:
    match: (?:([.])|([?][.]))
    captures:
      1:
        tag: punctuation
        name: punctuation.accessor.sd
      2:
        tag: punctuation
        name: punctuation.accessor.optional.sd

  Color:
    emit: true
    patterns:
      - { include: "#HEXColor" }
      - { include: "#RGBColor" }
      - { include: "#HSLColor" }

  HEXColor:
    tag: string
    name: string.color.hex.sd
    match: (#)((?:[0-9a-fA-F]{2}){2,4})
    color: true

  RGBColor:
    tag: string
    name: string.color.rgb.sd
    match: (rgb)([(][\d]+[\s]+[\d]+[\s]+[\d]+(?:[\s]*[/][\s]*[\d.]+[%]?)?[)])
    color: true

  HSLColor:
    tag: string
    name: string.color.hsl.sd
    match: (hsl)([(][\d]+[\s]+[\d]+[%]?[\s]+[\d]+[%]?(?:[\s]*[/][\s]*[\d.]+[%]?)?[)])
    color: true

########## FrontMatter ##########

  FrontMatter:
    tag: meta
    name: meta.front-matter.sd
    begin: ^([-]{3,})($|{{WS}}*$)
    beginCaptures:
      1:
        tag: keyword
        name: keyword.other.front-matter.dashes.start.sd
      2:
        patterns:
          - { include: "#Whitespace" }
    patterns:
      - { include: "#Annotation" }
      - { include: "#FrontMatterField" }
      - { include: "#Newline" }
      - { include: "#Unknown" }
    end: ^([-]{3,})($|{{WS}}*$)?
    endCaptures:
      1:
        tag: keyword
        name: keyword.other.front-matter.dashes.end.sd
      2:
        patterns:
          - { include: "#Whitespace" }

  FrontMatterField:
    tag: meta
    name: meta.front-matter.field.sd
    begin: ^({{IDENTIFIER}})($|{{WS}}*)($|[:])(.*$(?:\r\n|\r|\n)?)
    beginCaptures:
      1:
        patterns:
          - { include: "#FrontMatterFieldKeyword" }
      2:
        patterns:
          - { include: "#Whitespace" }
      3:
        tag: punctuation
        name: punctuation.separator.colon.sd
      4:
        patterns:
          - { include: "#FrontMatterStringInline" }
    patterns:
      - { include: "#Annotation" }
      - { include: "#FrontMatterArrayItem" }
      - { include: "#FrontMatterStringBlock" }
      - { include: "#Newline" }
      - { include: "#Unknown" }
    end: (?=^{{IDENTIFIER}}{{WS}}*[:]|[-]{3,})

  FrontMatterArrayItem:
    match: ^({{WS}}{2,})([-])($|{{WS}}+)(.*$(?:\r\n|\r|\n)?)
    captures:
      1:
        patterns:
          - { include: "#Indent" }
      2:
        tag: keyword
        name: keyword.operator.expression.array.sd
      3:
        patterns:
          - { include: "#Whitespace" }
      4:
        patterns:
          - { include: "#FrontMatterString" }

  FrontMatterStringInline:
    match: ($|{{WS}}*)(.*$(?:\r\n|\r|\n)?)
    captures:
      1:
        patterns:
          - { include: "#Whitespace" }
      2:
        patterns:
          - { include: "#FrontMatterString" }

  FrontMatterStringBlock:
    match: ^($|{{WS}}*)(.*$(?:\r\n|\r|\n)?)
    captures:
      1:
        patterns:
          - { include: "#Indent" }
      2:
        patterns:
          - { include: "#FrontMatterString" }

  FrontMatterString:
    tag: string
    name: string.front-matter.string.sd
    begin: (?=.*$)
    patterns:
      - { include: "#Annotation" }
      - { include: "#InlineText" }
    end: ($(?:\r\n|\r|\n)?)
    endCaptures:
      1:
        patterns:
          - { include: "#Newline" }

  FrontMatterFieldKeyword:
    tag: keyword
    name: keyword.other.front-matter.field.sd
    match: (.+)

########## Display ##########
          
  Display:
    patterns:
      - { include: "#Transition" }
      - { include: "#Scene" }
      - { include: "#Dialogue" }
      - { include: "#Action" }

  DisplayText:
    emit: true
    patterns:
      - { include: "#Escape" }
      - { include: "#InlineImageTag" }
      - { include: "#InlineAudioTag" }
      - { include: "#InlineCommandTag" }
      - { include: "#ConditionalBlock" }
      - { include: "#DisplayString" }

  DisplayString:
    emit: true
    patterns:
      - { include: "#InlineText" }

########## Transition ##########

  Transition:
    tag: labelName
    name: keyword.control.transition.sd
    match: ^({{WS}}*)([%](?:$|{{WS}}+))($|.+$)
    captures:
      1:
        patterns:
          - { include: "#Indent" }
      2:
        tag: punctuation
        name: punctuation.transition.mark.sd
      3:
        patterns:
          - { include: "#Annotation" }
          - { include: "#DisplayText" }

########## Scene ##########

  Scene:
    tag: regexp
    name: string.regexp.scene.sd
    match: ^({{WS}}*)([$](?:$|{{WS}}+))($|.+$)
    captures:
      1:
        patterns:
          - { include: "#Indent" }
      2:
        tag: punctuation
        name: punctuation.scene.mark.sd
      3:
        patterns:
          - { include: "#Annotation" }
          - { include: "#DisplayText" }

  SceneLocationTime:
    match: INT[.]?[\/]EXT[.]|INT[.]|EXT[.]{{WS}}*(.*?){{WS}}+[-]{{WS}}+(.*?){{WS}}*$

########## Dialogue ##########

  Dialogue:
    name: entity.dialogue.sd
    begin: ^({{WS}}*)([@](?:$|{{WS}}+))($|.+$)(\r\n|\r|\n)?
    beginCaptures:
      1:
        patterns:
          - { include: "#Indent" }
      2:
        tag: definition(typeName)
        name: entity.name.type.dialogue.character.name.sd
      3:
        patterns:
          - { include: "#Annotation" }
          - { include: "#DialogueCharacter" }
      4:
        patterns:
          - { include: "#Newline" }
    patterns:
      - { include: "#Annotation" }
      - { include: "#DialogueBox" }
    end: ^{{WS}}?(?={{EOL}})

  DialogueCharacter:
    match: ({{WS}}*)(.*?)({{WS}}*)([(][^)]*(?:$|[)]))?($|{{WS}}*)(\^)?($|{{WS}}*)({{EOL}})
    captures:
      1:
        patterns:
          - { include: "#Whitespace" }
      2:
        patterns:
          - { include: "#DialogueCharacterName" }
      3:
        patterns:
          - { include: "#Whitespace" }
      4:
        patterns:
          - { include: "#DialogueCharacterParenthetical" }
      5:
        patterns:
          - { include: "#Whitespace" }
      6:
        patterns:
          - { include: "#DialogueCharacterSimultaneous" }
      7:
        patterns:
          - { include: "#Whitespace" }
      8:
        patterns:
          - { include: "#EndOfLine" }

  DialogueCharacterName:
    tag: typeName
    name: entity.name.type.dialogue.character.name.sd
    match: (.+$)

  DialogueCharacterParenthetical:
    tag: escape
    name: constant.character.escape.dialogue.character.parenthetical.sd
    match: (.+$)

  DialogueCharacterSimultaneous:
    tag: definition(keyword)
    name: keyword.operator.dialogue.character.simultaneous.sd
    match: (.+$)

  DialogueBox:
    tag: string
    name: string.dialogue.line.sd
    begin: ^(?=.+$)
    patterns:
      - { include: "#Annotation" }
      - { include: "#Choice" }
      - { include: "#Gather" }
      - { include: "#ImageTag" }
      - { include: "#AudioTag" }
      - { include: "#CommandTag" }
      - { include: "#DialogueLineParenthetical" }
      - { include: "#BoxLineContinue" }
      - { include: "#BoxLineComplete" }
    end: (?=^{{WS}}?(?={{EOL}}))|(\r\n|\r|\n)
    endCaptures:
      1:
        patterns:
          - { include: "#Newline" }

  DialogueLineParenthetical:
    match: ^({{WS}}*)([(][^()]*[)])($|{{WS}}*$)(\r\n|\r|\n)?
    captures:
      1:
        patterns:
          - { include: "#Indent" }
      2:
        patterns:
          - { include: "#DialogueLineParentheticalContent" }
      3:
        patterns:
          - { include: "#Whitespace" }
      4:
        patterns:
          - { include: "#Newline" }

  DialogueLineParentheticalContent:
    tag: escape
    name: constant.character.escape.sd
    match: (.+)
    captures:
      1:
        patterns:
          - { include: "#InlineText" }

  BoxLineContinue:
    match: (?:(.*[>]{{EOL}}(?:\r\n|\r|\n)?)|(.*[<][>]{{EOL}})(\r\n|\r|\n)?)
    captures:
      1:
        patterns:
          - { include: "#Annotation" }
          - { include: "#DisplayText" }
      2:
        patterns:
          - { include: "#Annotation" }
          - { include: "#DisplayText" }
      3:
        patterns:
          - { include: "#Newline" }

  BoxLineComplete:
    match: (.*$)
    captures:
      1:
        patterns:
          - { include: "#Annotation" }
          - { include: "#DisplayText" }

########## Action ##########

  Action:
    tag: content
    name: entity.paragraph.text.action.implicit.sd
    begin: ^(?!{{WS}}*$)({{WS}}*)(?=.+$)
    patterns:
      - { include: "#Annotation" }
      - { include: "#ActionBox" }
    end: ^{{WS}}?(?={{EOL}})

  ActionBox:
    tag: content
    name: markup.raw.action.line.sd
    begin: (?=.+$)
    patterns:
      - { include: "#Annotation" }
      - { include: "#Choice" }
      - { include: "#Gather" }
      - { include: "#ImageTag" }
      - { include: "#AudioTag" }
      - { include: "#CommandTag" }
      - { include: "#BoxLineContinue" }
      - { include: "#BoxLineComplete" }
    end: (?=^{{WS}}?(?={{EOL}}))|(\r\n|\r|\n)
    endCaptures:
      1:
        patterns:
          - { include: "#Newline" }

########## Asset Tag ##########

  ImageTag:
    tag: macroName
    name: meta.image.sd
    match: ^({{WS}}*)(\[\[)((?:\\.|[^\]])*?)(\]\])($|{{WS}}*$)(\r\n|\r|\n)?
    captures:
      1:
        patterns:
          - { include: "#Indent" }
      2:
        tag: keyword
        name: keyword.operator.expression.begin.image.sd
      3:
        patterns:
          - { include: "#AssetTagContent" }
      4:
        tag: keyword
        name: keyword.operator.expression.end.image.sd
      5:
        patterns:
          - { include: "#Whitespace" }
      6:
        patterns:
          - { include: "#Newline" }

  InlineImageTag:
    tag: macroName
    name: meta.image.sd
    match: (\[\[)((?:\\.|[^\]])*?)(\]\])
    captures:
      1:
        tag: keyword
        name: keyword.operator.expression.begin.image.sd
      2:
        patterns:
          - { include: "#AssetTagContent" }
      3:
        tag: keyword
        name: keyword.operator.expression.end.image.sd

  AudioTag:
    tag: macroName
    name: meta.audio.sd
    match: ^({{WS}}*)([(][(])((?:\\.|[^)])*?)([)][)])($|{{WS}}*$)(\r\n|\r|\n)?
    captures:
      1:
        patterns:
          - { include: "#Indent" }
      2:
        tag: keyword
        name: keyword.operator.expression.begin.audio.sd
      3:
        patterns:
          - { include: "#AssetTagContent" }
      4:
        tag: keyword
        name: keyword.operator.expression.end.audio.sd
      5:
        patterns:
          - { include: "#Whitespace" }
      6:
        patterns:
          - { include: "#Newline" }

  InlineAudioTag:
    tag: macroName
    name: meta.audio.sd
    match: ([(][(])((?:\\.|[^)])*?)([)][)])
    captures:
      1:
        tag: keyword
        name: keyword.operator.expression.begin.audio.sd
      2:
        patterns:
          - { include: "#AssetTagContent" }
      3:
        tag: keyword
        name: keyword.operator.expression.end.audio.sd

  AssetTagContent:
    match: (?:(\b(?:show|hide|play|stop|fade|write|animate)\b)({{WS}}*)($|{{IDENTIFIER}}\b))?($|{{WS}}*\S*?)($|{{WS}}*\b(?:to|after|with|over|now|loop|noloop|mute|unmute)\b.*)
    captures:
      1:
        patterns:
          - { include: "#AssetTagControl" }
      2:
        patterns:
          - { include: "#AssetTagTargetSeparator" }
      3:
        patterns:
          - { include: "#AssetTagTarget" }
      4:
        patterns:
          - { include: "#AssetTagNames" }
      5:
        patterns:
          - { include: "#AssetTagArguments" }

  AssetTagKeyword:
    tag: keyword
    name: keyword.asset.arguments.keyword.sd
    match: (\b(?:to|after|with|over|now|loop|noloop|mute|unmute)\b)

  AssetTagControl:
    tag: controlKeyword
    name: keyword.control.asset.control.sd
    match: (.+)

  AssetTagTargetSeparator:
    tag: typeName
    name: entity.name.type.asset.target.separator.sd
    match: ({{WS}}+)
    captures:
      1:
        patterns:
          - { include: "#Whitespace" }

  AssetTagTarget:
    tag: typeName
    name: entity.name.type.asset.target.sd
    match: (.+)

  AssetTagNames:
    match: (.+)
    captures:
      1:
        patterns:
          - { include: "#Whitespace" }
          - { include: "#AssetTagName" }
          - { include: "#CombineOperator" }

  AssetTagName:
    tag: variableName
    name: variable.other.constant.asset.name.sd
    match: ({{IDENTIFIER}})

  CombineOperator:
    tag: propertyName
    name: variable.other.property.combine.sd
    match: ([~+-]+)

  AssetTagArguments:
    match: (.+)
    captures:
      1:
        patterns:
          - { include: "#AssetTagArgument" }

  AssetTagArgument:
    tag: meta
    name: meta.argument.sd
    begin: (?=.+$)
    patterns:
      - { include: "#Annotation" }
      - { include: "#AssetTagKeyword" }
      - { include: "#TimeValue" }
      - { include: "#Expression" }
    end: (?=$)|({{WS}})
    endCaptures:
      1:
        tag: separator
        name: meta.template.expression.space.sd

  TimeValue:
    tag: number
    name: constant.numeric.time.sd
    match: ((?:\d*[.])?\d+)(ms|s)
    captures:
      1:
        tag: number
        name: constant.numeric.time.amount.sd
      2:
        tag: number
        name: constant.numeric.time.unit.sd

########## Text Tag ##########

  TextTag:
    tag: macroName
    name: meta.text.sd
    match: ([<])((?:\\.|[^>])*?)([>])
    captures:
      1:
        tag: keyword
        name: keyword.operator.expression.begin.tag.sd
      2:
        patterns:
          - { include: "#TextTagContent" }
      3:
        tag: keyword
        name: keyword.operator.expression.end.tag.sd

  TextTagContent:
    match: ({{WS}}*)([^ :]+)({{WS}}*)(?:([:])({{WS}}*)(.*))?
    captures:
      1:
        patterns:
          - { include: "#Whitespace" }
      2:
        patterns:
          - { include: "#TextTagControl" }
      3:
        patterns:
          - { include: "#Whitespace" }
      4:
        patterns:
          - { include: "#TextTagColon" }
      5:
        patterns:
          - { include: "#Whitespace" }
      6:
        patterns:
          - { include: "#TextTagArguments" }

  TextTagControl:
    match: (.+)
    captures:
      1:
        patterns:
          - { include: "#NumericLiteral" }
          - { include: "#TextTagControlKeyword" }

  TextTagControlKeyword:
    tag: keyword
    name: keyword.style.control.keyword.sd
    match: (.+)

  TextTagColon:
    tag: separator
    name: meta.template.expression.colon.sd
    match: ([:])

  TextTagArguments:
    match: (.+)
    captures:
      1:
        patterns:
          - { include: "#TextTagArgument" }

  TextTagArgument:
    tag: meta
    name: meta.argument.sd
    begin: (?=.+$)
    patterns:
      - { include: "#Annotation" }
      - { include: "#Expression" }
    end: (?=$)|([,])
    endCaptures:
      1:
        tag: separator
        name: meta.template.expression.comma.sd

########## Command Tag ##########

  CommandTag:
    tag: macroName
    name: meta.command.sd
    match: ^({{WS}}*)([{][{])((?:\\.|[^}])*?)([}][}])($|{{WS}}*$)(\r\n|\r|\n)?
    captures:
      1:
        patterns:
          - { include: "#Indent" }
      2:
        tag: keyword
        name: keyword.operator.expression.begin.tag.sd
      3:
        patterns:
          - { include: "#CommandTagControl" }
      4:
        tag: keyword
        name: keyword.operator.expression.end.tag.sd
      5:
        patterns:
          - { include: "#Whitespace" }
      6:
        patterns:
          - { include: "#Newline" }

  InlineCommandTag:
    tag: macroName
    name: meta.command.sd
    match: ([{][{])((?:\\.|[^}])*?)([}][}])
    captures:
      1:
        tag: keyword
        name: keyword.operator.expression.begin.tag.sd
      2:
        patterns:
          - { include: "#CommandTagControl" }
      3:
        tag: keyword
        name: keyword.operator.expression.end.tag.sd

  CommandTagControl:
    tag: controlKeyword
    name: keyword.control.asset.control.sd
    match: (.+)
    captures:
      1:
        patterns:
          - { include: "#Expression" }

########## Text ##########

  InlineText:
    patterns:
      - { include: "#Escape" }
      - { include: "#Newline" }
      - { include: "#Styling" }
      - { include: "#Emphasis" }
      - { include: "#PlainText" }

  Escape:
    match: (\\)(.)
    captures:
      1:
        tag: definition(escape)
        name: constant.character.escape.sd
      2:
        tag: content
        name: markup.raw.text.sd

  Newline:
    tag: content
    name: markup.raw.whitespace.newline.sd
    match: (\r\n|\r|\n)

  Styling:
    patterns:
      - { include: "#Chain" }
      - { include: "#Glue" }
      - { include: "#TextTag" }
      - { include: "#Underline" }
      - { include: "#BoldItalic" }
      - { include: "#Bold" }
      - { include: "#Italic" }
      - { include: "#Centered" }

  StylingMark:
    match: ([*_|]+)
    captures:
      1:
        tag: bracket
        name: punctuation.definition.styling.sd

  BoldItalic:
    tag: strong
    name: markup.bold.sd
    match: ([*][*]+)([*].*?(?:[*]|$))(\1|$)
    captures:
      1:
        patterns:
          - { include: "#StylingMark" }
      2:
        patterns:
          - { include: "#Italic" }
      3:
        patterns:
          - { include: "#StylingMark" }

  Bold:
    tag: strong
    name: markup.bold.sd
    match: ([*][*](?![*]))(.*?)(\1|$)
    captures:
      1:
        patterns:
          - { include: "#StylingMark" }
      2:
        patterns:
          - { include: "#InlineText" }
      3:
        patterns:
          - { include: "#StylingMark" }

  Italic:
    tag: emphasis
    name: markup.italic.sd
    match: ([*](?![*]))(.*?)(\1|$)
    captures:
      1:
        patterns:
          - { include: "#StylingMark" }
      2:
        patterns:
          - { include: "#InlineText" }
      3:
        patterns:
          - { include: "#StylingMark" }

  Underline:
    tag: link
    name: markup.underline.sd
    match: ([_]+)(.*?)(\1|$)
    captures:
      1:
        patterns:
          - { include: "#StylingMark" }
      2:
        patterns:
          - { include: "#InlineText" }
      3:
        patterns:
          - { include: "#StylingMark" }

  Centered:
    tag: monospace
    name: markup.other.centered.sd
    match: ([\^]+)(.*?)(\1|$)
    captures:
      1:
        patterns:
          - { include: "#StylingMark" }
      2:
        patterns:
          - { include: "#InlineText" }
      3:
        patterns:
          - { include: "#StylingMark" }

  Emphasis:
    patterns:
      - { include: "#EmphasisTilde" }
      - { include: "#EmphasisColon" }

  EmphasisTilde:
    tag: emphasis
    name: markup.emphasis.sd
    match: ([~][~]+)((?:(?!\1).*?)+)(\1|$)
    captures:
      1:
        tag: bracket
        name: punctuation.definition.emphasis.sd
      2:
        patterns:
          - { include: "#InlineText" }
      3:
        tag: bracket
        name: punctuation.definition.emphasis.sd

  EmphasisColon:
    tag: emphasis
    name: markup.emphasis.sd
    match: ([:][:]+)((?:(?!\1).*?)+)(\1|$)
    captures:
      1:
        tag: bracket
        name: punctuation.definition.emphasis.sd
      2:
        patterns:
          - { include: "#InlineText" }
      3:
        tag: bracket
        name: punctuation.definition.emphasis.sd

  PlainText:
    patterns:
      - { include: "#Space" }
      - { include: "#Word" }
      - { include: "#EmDash" }
      - { include: "#Punctuation" }

  Space:
    tag: content
    name: markup.raw.space.sd
    match: ([ ])

  Word:
    tag: content
    name: markup.raw.text.sd
    match: ([\p{L}\p{N}\p{Mn}']+)

  EmDash:
    tag: content
    name: markup.raw.punctuation.sd
    match: ([-][-])

  Punctuation:
    tag: content
    name: markup.raw.punctuation.sd
    match: (.)

########## Errors ##########

  IllegalExpression:
    tag: invalid
    name: invalid.illegal.illegal-expression.sd
    match: (.+)
    captures:
      1:
        tag: content
        name: markup.raw.unknown.sd

  IllegalChar:
    tag: invalid
    name: invalid.illegal.illegal-char.sd
    match: (.)
    captures:
      1:
        tag: content
        name: markup.raw.unknown.sd

  Unknown:
    tag: invalid
    name: invalid.illegal.unknown-statement.sd
    match: (.+$)
    captures:
      1:
        tag: content
        name: markup.raw.unknown.sd
