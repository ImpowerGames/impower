fileTypes: ["sd"]
keyEquivalent: ^~S
indentUnit: "  "
name: Sparkdown
scopeName: text.source.sparkdown
uuid: E26C862D-2A5E-4F10-B0C3-D6BCB838CB7F
flags: mu

variables:
  IDENTIFIER_START_CHAR: '_\p{L}'
  IDENTIFIER_END_CHAR: '0-9_\p{L}'
  IDENTIFIER: "[{{IDENTIFIER_START_CHAR}}][{{IDENTIFIER_END_CHAR}}]*"
  PROPERTY_IDENTIFIER: '(?:["].*?["]|\[.*?\]|\(.*?\)|[^.:=\r\n])+?'
  BEFORE_KEYWORD: (?<![{{IDENTIFIER_END_CHAR}}])(?:(?<=\.\.\.)|(?<!\.))
  AFTER_KEYWORD: (?![{{IDENTIFIER_END_CHAR}}])(?:(?=\.\.\.)|(?!\.))
  TAG_START: (?:[#]+(?:$|{{WS}}+))
  BREAK: (?:{{WS}}+[>])
  # Word
  WORD: (?:[\p{L}\p{N}\p{Mn}']+)
  # Whitespace
  WS: '[^\S\n\r]'
  # End Of Line
  EOL: "(?:$|{{WS}}*$|{{WS}}*{{TAG_START}}.*$|{{WS}}*[/][/].*$)"
  # End Of Keyword
  EOK: "(?:$|{{WS}}+|(?={{TAG_START}}|[/][/]|[/][*]))"
  IMAGE_CONTROL_KEYWORDS: ["set", "show", "hide", "animate"]
  IMAGE_CLAUSE_KEYWORDS: ["after", "over", "with", "wait", "nowait"]
  AUDIO_CONTROL_KEYWORDS:
    ["start", "stop", "play", "modulate", "queue", "await"]
  AUDIO_CLAUSE_KEYWORDS:
    ["after", "over", "fadeto", "loop", "noloop", "mute", "unmute", "now"]

patterns:
  - { include: "#EndOfLine" }
  - { include: "#Newline" }
  - { include: "#Annotation" }
  - { include: "#FrontMatter" }
  - { include: "#Todo" }
  - { include: "#Include" }
  - { include: "#Declaration" }
  - { include: "#Knot" }
  - { include: "#Stitch" }
  - { include: "#Divert" }
  - { include: "#Logic" }
  - { include: "#Choice" }
  - { include: "#Gather" }
  - { include: "#Write" }
  - { include: "#Dialogue" }
  - { include: "#Transition" }
  - { include: "#Scene" }
  - { include: "#AssetLine" }
  - { include: "#Action" }
  - { include: "#Whitespace" }

repository:
  ########## Helpers ##########

  FileSeparator:
    match: ^([/]{4,})({{WS}}*)([^/\s]+)({{WS}}*)([/]{4,})({{WS}}*)$

  FileSplitter:
    match: ^((?:[/]{4,})(?:{{WS}}*)(?:[^/\s]+)(?:{{WS}}*)(?:[/]{4,})(?:{{WS}}*))$

  ########## Annotation ##########

  Annotation:
    patterns:
      - { include: "#Comment" }
      - { include: "#Tag" }

  ########## Comment ##########

  Comment:
    patterns:
      - { include: "#LineComment" }
      - { include: "#BlockComment" }

  LineComment:
    tag: lineComment
    name: comment.line.sd
    match: ({{WS}}*)([/][/])(.*?)$(\r\n|\r|\n)?
    captures:
      1:
        patterns:
          - { include: "#Whitespace" }
      2:
        name: punctuation.definition.comment.mark
      3:
        patterns:
          - { include: "#LineCommentContent" }
      4:
        patterns:
          - { include: "#Newline" }

  LineCommentContent:
    tag: definition(lineComment)
    name: punctuation.definition.comment.content.sd
    match: (.+$)

  BlockComment:
    tag: blockComment
    name: comment.block.sd
    begin: ({{WS}}*)([/][*])
    beginCaptures:
      1:
        patterns:
          - { include: "#Whitespace" }
      2:
        name: punctuation.definition.comment.mark
    patterns:
      - { include: "#Newline" }
      - { include: "#BlockCommentContent" }
    end: ([*][/])
    endCaptures:
      1:
        name: punctuation.definition.comment.mark

  BlockCommentContent:
    tag: definition(lineComment)
    name: punctuation.definition.comment.content.sd
    match: (.+?)(?=$|[*][/])

  ########## Tag ##########

  Tag:
    tag: docComment
    name: comment.line.sd entity.tag.sd
    match: ({{WS}}*)({{TAG_START}})(.*?)(?:(?={{TAG_START}})|$)
    captures:
      1:
        patterns:
          - { include: "#Separator" }
      2:
        tag: definition(docComment)
        name: punctuation.definition.comment.sd comment.line.sd entity.tag.begin.sd
      3:
        patterns:
          - { include: "#TagContent" }

  TagContent:
    tag: definition(docComment)
    name: punctuation.definition.comment.content.sd
    match: (.+?)(?=$|{{TAG_START}})

  ########## Todo ##########

  Todo:
    tag: docComment
    name: comment.line.sd entity.todo.sd
    begin: ({{WS}}*)(TODO|todo)({{EOK}})
    beginCaptures:
      1:
        patterns:
          - { include: "#Indent" }
      2:
        tag: definition(docComment)
        name: constant.other entity.todo.begin.sd
      3:
        patterns:
          - { include: "#Separator" }
    patterns:
      - { include: "#Annotation" }
      - { include: "#TodoContent" }
    end: (?=$)

  TodoContent:
    tag: definition(docComment)
    name: punctuation.definition.comment.content.sd
    match: (.+$)

  ########## Include ##########

  Include:
    tag: meta
    name: meta.import.include.sd
    begin: ^({{WS}}*)(INCLUDE|include)({{EOK}})
    beginCaptures:
      1:
        patterns:
          - { include: "#Indent" }
      2:
        tag: controlKeyword
        name: keyword.control.import.include.sd
      3:
        patterns:
          - { include: "#Separator" }
    patterns:
      - { include: "#Annotation" }
      - { include: "#IncludeContent" }
    end: (?=$)

  IncludeContent:
    tag: string
    name: string.include.sd
    match: (.+?)(?={{EOL}})

  ########## Declaration: VAR LIST CONST EXTERNAL DEFINE ##########

  Declaration:
    patterns:
      - { include: "#VarDeclaration" }
      - { include: "#ListDeclaration" }
      - { include: "#ConstDeclaration" }
      - { include: "#ExternalDeclaration" }
      - { include: "#DefineDeclaration" }

  VarDeclaration:
    tag: meta
    name: storage.type.var.sd
    begin: ^({{WS}}*)(VAR|var)({{EOK}})
    beginCaptures:
      1:
        patterns:
          - { include: "#Indent" }
      2:
        tag: controlKeyword
        name: keyword.control.definition.var.sd
      3:
        patterns:
          - { include: "#Separator" }
    patterns:
      - { include: "#Annotation" }
      - { include: "#VariableAssignment" }
    end: (?=$)

  ListDeclaration:
    tag: meta
    name: storage.type.list.sd
    begin: ^({{WS}}*)(LIST|list)({{EOK}})
    beginCaptures:
      1:
        patterns:
          - { include: "#Indent" }
      2:
        tag: controlKeyword
        name: keyword.control.definition.list.sd
      3:
        patterns:
          - { include: "#Separator" }
    patterns:
      - { include: "#Annotation" }
      - { include: "#ListTypeAssignment" }
    end: (?=$)

  ConstDeclaration:
    tag: meta
    name: storage.type.const.sd
    begin: ^({{WS}}*)(CONST|const)({{EOK}})
    beginCaptures:
      1:
        patterns:
          - { include: "#Indent" }
      2:
        tag: controlKeyword
        name: keyword.control.definition.const.sd
      3:
        patterns:
          - { include: "#Separator" }
    patterns:
      - { include: "#Annotation" }
      - { include: "#VariableAssignment" }
    end: (?=$)

  ExternalDeclaration:
    tag: meta
    name: storage.type.external.sd
    begin: ^({{WS}}*)(EXTERNAL|external)({{EOK}})
    beginCaptures:
      1:
        patterns:
          - { include: "#Indent" }
      2:
        tag: controlKeyword
        name: keyword.control.definition.external.sd
      3:
        patterns:
          - { include: "#Separator" }
    patterns:
      - { include: "#Annotation" }
      - { include: "#ExternalFunctionDeclaration" }
    end: (?=$)

  DefineDeclaration:
    tag: meta
    name: meta.definition.type.sd
    begin: ^({{WS}}*)(DEFINE|define)({{EOK}})(.*?)$
    beginCaptures:
      1:
        patterns:
          - { include: "#Indent" }
      2:
        patterns:
          - { include: "#DefineKeyword" }
      3:
        patterns:
          - { include: "#Separator" }
      4:
        patterns:
          - { include: "#DefineAssignment" }
    patterns:
      - { include: "#Annotation" }
      - { include: "#Newline" }
      - { include: "#StructField" }
      - { include: "#Unknown" }
    end: (?=^(?!\1{{WS}}))

  DefineAssignment:
    match: (?:({{IDENTIFIER}})({{WS}}+)(?={{IDENTIFIER}}))?(.*?)({{WS}}*)($|[:])
    captures:
      1:
        patterns:
          - { include: "#DefineModifierName" }
      2:
        patterns:
          - { include: "#Separator" }
      3:
        patterns:
          - { include: "#DefineIdentifier" }
      4:
        patterns:
          - { include: "#ExtraWhitespace" }
      5:
        patterns:
          - { include: "#DeclarationAssignOperator" }

  DefineIdentifier:
    match: ({{IDENTIFIER}})(?:([.])($|{{IDENTIFIER}})?)?(.*?)
    captures:
      1:
        patterns:
          - { include: "#DefineTypeName" }
      2:
        patterns:
          - { include: "#DefinePunctuationAccessor" }
      3:
        patterns:
          - { include: "#DefineVariableName" }
      4:
        patterns:
          - { include: "#AccessPart" }

  DefineKeyword:
    tag: controlKeyword
    name: keyword.control.definition.object.sd
    match: (.+)

  DefineModifierName:
    tag: keyword
    name: storage.modifier.sd
    match: (.+)

  DefineTypeName:
    tag: typeName
    name: support.type.sd
    match: (.+)

  DefinePunctuationAccessor:
    match: ([.])
    tag: separator
    name: meta.template.expression.accessor.sd

  DefineVariableName:
    tag: variableName
    name: variable.other.constant.sd
    match: (.+)

  ListTypeAssignment:
    begin: ({{IDENTIFIER}})({{WS}}*)($|[=]|(?={{EOL}}))
    beginCaptures:
      1:
        patterns:
          - { include: "#ListTypeDeclarationName" }
      2:
        patterns:
          - { include: "#Separator" }
      3:
        patterns:
          - { include: "#AssignEqualOperator" }
    patterns:
      - { include: "#Annotation" }
      - { include: "#Expression" }
    end: (?=$)

  VariableAssignment:
    begin: ({{IDENTIFIER}})({{WS}}*)($|[=]|(?={{EOL}}))
    beginCaptures:
      1:
        patterns:
          - { include: "#VariableDeclarationName" }
      2:
        patterns:
          - { include: "#Separator" }
      3:
        patterns:
          - { include: "#AssignEqualOperator" }
    patterns:
      - { include: "#Annotation" }
      - { include: "#Expression" }
    end: (?=$)

  ExternalFunctionDeclaration:
    begin: ({{IDENTIFIER}})({{WS}}*)
    beginCaptures:
      1:
        patterns:
          - { include: "#FunctionName" }
      2:
        patterns:
          - { include: "#ExtraWhitespace" }
    patterns:
      - { include: "#Annotation" }
      - { include: "#FunctionParameters" }
    end: (?=$)

  RefModifier:
    tag: modifier
    name: storage.modifier.ref.sd
    match: (ref)

  FunctionParameters:
    brackets: true
    begin: ([(])({{WS}}*)
    beginCaptures:
      1:
        tag: keyword
        name: punctuation.definition.template-expression.begin.sd
      2:
        patterns:
          - { include: "#ExtraWhitespace" }
    patterns:
      - { include: "#Annotation" }
      - { include: "#Separator" }
      - { include: "#PunctuationComma" }
      - { include: "#Parameter" }
    end: ({{WS}}*)([)])
    endCaptures:
      1:
        patterns:
          - { include: "#ExtraWhitespace" }
      2:
        tag: keyword
        name: punctuation.definition.template-expression.end.sd

  Parameter:
    tag: meta
    name: meta.parameter.sd
    begin: (?=.+$)
    patterns:
      - { include: "#Annotation" }
      - { include: "#Expression" }
    end: (?=(?:{{WS}}*)(?:[)]|[,]))

  StructField:
    emit: true
    patterns:
      - { include: "#StructBlankProperty" }
      - { include: "#StructObjectItem" }
      - { include: "#StructScalarItem" }
      - { include: "#StructObjectProperty" }
      - { include: "#StructScalarProperty" }

  StructBlankProperty:
    match: ^({{WS}}+$)
    captures:
      1:
        patterns:
          - { include: "#Indent" }

  StructObjectItem:
    patterns:
      - { include: "#StructObjectItemBlock" }
      - { include: "#StructObjectItemWithInlineScalarProperty" }
      - { include: "#StructObjectItemWithInlineObjectProperty" }

  StructObjectItemBlock:
    tag: meta
    name: meta.definition.struct.item.object.sd
    begin: ^({{WS}}*)([-])($|{{WS}}+)$
    beginCaptures:
      1:
        patterns:
          - { include: "#Indent" }
      2:
        tag: keyword
        name: keyword.operator.expression.array.sd
      3:
        patterns:
          - { include: "#Separator" }
    patterns:
      - { include: "#Annotation" }
      - { include: "#Newline" }
      - { include: "#StructField" }
      - { include: "#Unknown" }
    end: (?=^(?!\1{{WS}}))

  StructObjectItemWithInlineScalarProperty:
    tag: meta
    name: meta.definition.struct.item.object.sd
    begin: ^({{WS}}*)([-])({{WS}}+)({{PROPERTY_IDENTIFIER}})({{WS}}*)([=])($|{{WS}}*)($|.*)$
    beginCaptures:
      1:
        patterns:
          - { include: "#Indent" }
      2:
        tag: keyword
        name: keyword.operator.expression.array.sd
      3:
        patterns:
          - { include: "#Separator" }
      4:
        patterns:
          - { include: "#DeclarationScalarPropertyName" }
      5:
        patterns:
          - { include: "#Separator" }
      6:
        patterns:
          - { include: "#SetEqualOperator" }
      7:
        patterns:
          - { include: "#Separator" }
      8:
        patterns:
          - { include: "#StructFieldValue" }
    patterns:
      - { include: "#Annotation" }
      - { include: "#Newline" }
      - { include: "#StructField" }
      - { include: "#Unknown" }
    end: (?=^(?!\1{{WS}}))

  StructObjectItemWithInlineObjectProperty:
    tag: meta
    name: meta.definition.struct.item.object.sd
    begin: ^({{WS}}*)([-])({{WS}}+)({{PROPERTY_IDENTIFIER}})({{WS}}*)([:])($|{{WS}}*$)
    beginCaptures:
      1:
        patterns:
          - { include: "#Indent" }
      2:
        tag: keyword
        name: keyword.operator.expression.array.sd
      3:
        patterns:
          - { include: "#Separator" }
      4:
        patterns:
          - { include: "#DeclarationObjectPropertyName" }
      5:
        patterns:
          - { include: "#ExtraWhitespace" }
      6:
        tag: separator
        name: meta.template.expression.colon.sd
      7:
        patterns:
          - { include: "#ExtraWhitespace" }
    patterns:
      - { include: "#Annotation" }
      - { include: "#Newline" }
      - { include: "#StructField" }
      - { include: "#Unknown" }
    end: (?=^(?!\1{{WS}}))

  StructScalarItem:
    tag: meta
    name: meta.definition.struct.item.scalar.sd
    begin: ^({{WS}}*)([-])($|{{WS}}+)(?=.*\S.*$)
    beginCaptures:
      1:
        patterns:
          - { include: "#Indent" }
      2:
        patterns:
          - { include: "#ArrayItemMark" }
      3:
        patterns:
          - { include: "#Separator" }
    patterns:
      - { include: "#Annotation" }
      - { include: "#StructFieldValue" }
    end: (?=$)

  StructObjectProperty:
    tag: meta
    name: meta.definition.struct.property.object.sd
    begin: ^({{WS}}*)({{PROPERTY_IDENTIFIER}})($|{{WS}}*)($|[:])($|{{WS}}*$)
    beginCaptures:
      1:
        patterns:
          - { include: "#Indent" }
      2:
        patterns:
          - { include: "#DeclarationObjectPropertyName" }
      3:
        patterns:
          - { include: "#ExtraWhitespace" }
      4:
        tag: separator
        name: meta.template.expression.colon.sd
      5:
        patterns:
          - { include: "#ExtraWhitespace" }
    patterns:
      - { include: "#Annotation" }
      - { include: "#Newline" }
      - { include: "#StructField" }
      - { include: "#Unknown" }
    end: (?=^(?!\1{{WS}}))

  StructScalarProperty:
    tag: meta
    name: meta.definition.struct.property.scalar.sd
    begin: ^({{WS}}*)({{PROPERTY_IDENTIFIER}})({{WS}}*)([=])($|{{WS}}*)
    beginCaptures:
      1:
        patterns:
          - { include: "#Indent" }
      2:
        patterns:
          - { include: "#DeclarationScalarPropertyName" }
      3:
        patterns:
          - { include: "#Separator" }
      4:
        patterns:
          - { include: "#SetEqualOperator" }
      5:
        patterns:
          - { include: "#Separator" }
    patterns:
      - { include: "#Annotation" }
      - { include: "#StructFieldValue" }
    end: (?=$)

  AfterDashScalarProperty:
    tag: meta
    name: meta.definition.struct.property.scalar.sd
    begin: ({{PROPERTY_IDENTIFIER}})({{WS}}*)([=])($|{{WS}}*)
    beginCaptures:
      1:
        patterns:
          - { include: "#Indent" }
      2:
        patterns:
          - { include: "#DeclarationScalarPropertyName" }
      3:
        patterns:
          - { include: "#Separator" }
      4:
        patterns:
          - { include: "#SetEqualOperator" }
      5:
        patterns:
          - { include: "#Separator" }
    patterns:
      - { include: "#Annotation" }
      - { include: "#StructFieldValue" }
    end: (?=$)

  FunctionCall:
    begin: ({{IDENTIFIER}})(?=[(])
    beginCaptures:
      1:
        patterns:
          - { include: "#FunctionName" }
    patterns:
      - { include: "#Annotation" }
      - { include: "#FunctionParameters" }
    end: ([;])|(?=$|[^(])
    endCaptures:
      1:
        patterns:
          - { include: "#PunctuationSemicolon" }

  FunctionAccessor:
    begin: ([.])?({{IDENTIFIER}})(?=[(])
    beginCaptures:
      1:
        patterns:
          - { include: "#PunctuationAccessor" }
      2:
        patterns:
          - { include: "#FunctionName" }
    patterns:
      - { include: "#Annotation" }
      - { include: "#FunctionParameters" }
    end: ([;])|(?=$|[^(])
    endCaptures:
      1:
        patterns:
          - { include: "#PunctuationSemicolon" }

  ArrayItemMark:
    tag: keyword
    name: keyword.operator.expression.array.sd
    match: (.+)

  SetEqualOperator:
    tag: updateOperator
    name: keyword.operator.assignment.sd
    match: (.+)

  StructFieldValue:
    emit: true
    patterns:
      - { include: "#Expression" }

  TargetAccessPath:
    emit: true
    patterns:
      - { include: "#AccessPath" }
      - { include: "#IllegalExpression" }

  AccessPath:
    begin: (?=[{{IDENTIFIER_START_CHAR}}])
    patterns:
      - { include: "#Annotation" }
      - { include: "#AccessPart" }
    end: (?=$|[^{{IDENTIFIER_START_CHAR}}?!.\[])

  AccessPart:
    emit: true
    patterns:
      - { include: "#ArrayLiteral" }
      - { include: "#FunctionAccessor" }
      - { include: "#PropertyAccessor" }
      - { include: "#NamespaceAccessor" }
      - { include: "#VariableName" }
      - { include: "#PunctuationAccessor" }

  ListTypeDeclarationName:
    emit: true
    patterns:
      - { include: "#TypeName" }
      - { include: "#Unknown" }

  VariableDeclarationName:
    emit: true
    patterns:
      - { include: "#VariableName" }
      - { include: "#Unknown" }

  DeclarationObjectPropertyName:
    emit: true
    patterns:
      - { include: "#PropertySelector" }

  DeclarationScalarPropertyName:
    tag: propertyName
    name: variable.other.property.sd
    match: (.+)

  PropertySelector:
    patterns:
      - { include: "#PropertySelectorHasFunctionCondition" }
      - { include: "#PropertySelectorGeneralFunctionCondition" }
      - { include: "#PropertySelectorSimpleCondition" }
      - { include: "#PropertySelectorUniversalCondition" }
      - { include: "#PropertySelectorOperator" }
      - { include: "#PropertySelectorClassName" }
      - { include: "#PropertySelectorAttribute" }
      - { include: "#Separator" }
      - { include: "#Unknown" }

  PropertySelectorHasFunctionCondition:
    name: source.css
    begin: ([@])(has)([(])
    beginCaptures:
      1:
        tag: attributeName
        name: entity.other.attribute-name.pseudo-class.prefix.sd
      2:
        patterns:
          - { include: "#PropertySelectorFunctionConditionName" }
      3:
        tag: paren
        name: meta.brace.round.open.sd
    patterns:
      - { include: "#PropertySelector" }
      - { include: "#Unknown" }
    end: ([)])
    endCaptures:
      1:
        tag: paren
        name: meta.brace.round.close.sd

  PropertySelectorGeneralFunctionCondition:
    name: source.css
    begin: ([@])({{IDENTIFIER}})?([(])
    beginCaptures:
      1:
        tag: attributeName
        name: entity.other.attribute-name.pseudo-class.prefix.sd
      2:
        patterns:
          - { include: "#PropertySelectorFunctionConditionName" }
      3:
        tag: paren
        name: meta.brace.round.open.sd
    patterns:
      - { include: "#PropertySelectorConstant" }
      - { include: "#Unknown" }
    end: ([)])
    endCaptures:
      1:
        tag: paren
        name: meta.brace.round.close.sd

  PropertySelectorSimpleCondition:
    name: source.css
    match: ([@])({{IDENTIFIER}})
    captures:
      1:
        tag: attributeName
        name: entity.other.attribute-name.pseudo-class.prefix.sd
      2:
        patterns:
          - { include: "#PropertySelectorSimpleConditionName" }

  PropertySelectorUniversalCondition:
    name: source.css
    match: ([@])
    captures:
      1:
        tag: attributeName
        name: entity.other.attribute-name.pseudo-class.prefix.sd

  PropertySelectorOperator:
    tag: keyword
    name: keyword.other.selector.sd
    match: ([>]|[+]|[~]|[*]|[&]|[#])

  PropertySelectorConstant:
    tag: keyword
    name: keyword.other.selector.constant.sd
    match: ({{IDENTIFIER}})

  PropertySelectorClassName:
    tag: propertyName
    name: variable.other.property.sd
    match: ({{IDENTIFIER}})

  PropertySelectorAttribute:
    tag: propertyName
    name: variable.other.property.sd
    match: (\[)(.*?)(\])

  PropertySelectorFunctionConditionName:
    tag: attributeName
    name: entity.other.attribute-name.pseudo-class.name.sd
    match: ({{IDENTIFIER}})

  PropertySelectorSimpleConditionName:
    tag: attributeName
    name: entity.other.attribute-name.pseudo-class.name.sd
    match: ({{IDENTIFIER}})

  DeclarationAssignOperator:
    emit: true
    patterns:
      - { include: "#ArrowOperator" }
      - { include: "#AssignEqualOperator" }

  ########## Label ##########

  Label:
    tag: definition(heading)
    name: keyword.control.section.sd
    match: ([(])({{WS}}*)({{IDENTIFIER}})({{WS}}*)([)])
    captures:
      1:
        tag: paren
        name: meta.brace.round.open.sd
      2:
        patterns:
          - { include: "#ExtraWhitespace" }
      3:
        patterns:
          - { include: "#LabelDeclarationName" }
      4:
        patterns:
          - { include: "#ExtraWhitespace" }
      5:
        tag: paren
        name: meta.brace.round.close.sd

  LabelDeclarationName:
    tag: definition(heading)
    name: keyword.control.section.sd
    match: (.+)

  ########## Break ##########

  Break:
    tag: special(content)
    name: meta.break.sd
    match: ({{BREAK}})
    captures:
      1:
        tag: keyword
        name: keyword.other.break.sd

  ########## Chain ##########

  Chain:
    tag: special(meta)
    name: meta.chain.sd
    match: ({{WS}}*)([\\])(?:({{WS}}+)$|({{WS}}*))
    captures:
      1:
        patterns:
          - { include: "#Whitespace" }
      2:
        tag: keyword
        name: keyword.other.chain.sd
      3:
        patterns:
          - { include: "#ExtraWhitespace" }
      4:
        patterns:
          - { include: "#Separator" }

  ########## Glue ##########

  Glue:
    tag: meta
    name: meta.glue.sd
    match: ({{WS}}*)([<][>])
    captures:
      1:
        patterns:
          - { include: "#Whitespace" }
      2:
        tag: keyword
        name: keyword.other.glue.sd

  ########## Choice ##########

  Choice:
    name: entity.choice.sd
    begin: ^({{WS}}*)((?:[*]{{EOK}})+|(?:[+]{{EOK}})+)((?:[(])(?:{{WS}}*)(?:{{IDENTIFIER}})(?:{{WS}}*)(?:[)]))?
    beginCaptures:
      1:
        patterns:
          - { include: "#Indent" }
      2:
        patterns:
          - { include: "#ChoiceMark" }
      3:
        patterns:
          - { include: "#Label" }
    patterns:
      - { include: "#Annotation" }
      - { include: "#ConditionalBlock" }
      - { include: "#Newline" }
      - { include: "#ChoiceWithSuppressedText" }
      - { include: "#ChoiceWithNoSuppressedText" }
    end: (?=$|[-][>])

  ChoiceMark:
    tag: keyword
    name: keyword.operator.expression.list.sd
    match: (.+)

  ChoiceWithSuppressedText:
    match: ({{WS}}*)(.*?)(\[)(.*?)(\])(.*?)(?:({{WS}}*)$|({{WS}}*)(?=[-][>]))
    captures:
      1:
        patterns:
          - { include: "#Separator" }
      2:
        patterns:
          - { include: "#ChoiceTextContent" }
      3:
        tag: keyword
        name: punctuation.definition.template-expression.begin.choice.suppression.sd
      4:
        patterns:
          - { include: "#ChoiceTextContent" }
      5:
        tag: keyword
        name: punctuation.definition.template-expression.end.choice.suppression.sd
      6:
        patterns:
          - { include: "#DisplayText" }
      7:
        patterns:
          - { include: "#ExtraWhitespace" }
      8:
        patterns:
          - { include: "#Separator" }

  ChoiceWithNoSuppressedText:
    match: (.*?)(?:({{WS}}*)$|({{WS}}*)(?=[-][>]))
    captures:
      1:
        patterns:
          - { include: "#ChoiceTextContent" }
      2:
        patterns:
          - { include: "#ExtraWhitespace" }
      3:
        patterns:
          - { include: "#Separator" }

  ChoiceTextContent:
    tag: string
    name: string.choice.sd
    match: (.+)
    captures:
      1:
        patterns:
          - { include: "#Annotation" }
          - { include: "#ConditionalBlock" }
          - { include: "#DisplayText" }

  ########## Logic ##########

  Logic:
    tag: meta
    name: meta.logic.sd
    begin: ({{WS}}*)(~)({{EOK}})
    beginCaptures:
      1:
        patterns:
          - { include: "#Indent" }
      2:
        patterns:
          - { include: "#LogicMark" }
      3:
        patterns:
          - { include: "#Separator" }
    patterns:
      - { include: "#Annotation" }
      - { include: "#Separator" }
      - { include: "#ReturnStatement" }
      - { include: "#TempDeclaration" }
      - { include: "#Expression" }
    end: ({{EOL}})(\r\n|\r|\n)?
    endCaptures:
      1:
        patterns:
          - { include: "#EndOfLine" }
      2:
        patterns:
          - { include: "#Newline" }

  LogicMark:
    tag: keyword
    name: keyword.other.logic.sd
    match: (.+)

  ReturnStatement:
    begin: ({{WS}}*)(return)({{EOK}})
    beginCaptures:
      1:
        patterns:
          - { include: "#Separator" }
      2:
        tag: controlKeyword
        name: keyword.control.flow.return.sd
      3:
        patterns:
          - { include: "#Separator" }
    patterns:
      - { include: "#Annotation" }
      - { include: "#Expression" }
    end: (?=$)

  TempDeclaration:
    begin: ({{WS}}*)(temp)({{EOK}})
    beginCaptures:
      1:
        patterns:
          - { include: "#Separator" }
      2:
        tag: controlKeyword
        name: keyword.control.definition.temp.sd
      3:
        patterns:
          - { include: "#Separator" }
    patterns:
      - { include: "#Annotation" }
      - { include: "#VariableAssignment" }
    end: (?=$)

  ########## Gather ##########

  Gather:
    begin: ^({{WS}}*)((?:[-]{{EOK}})+)({{WS}}*)([(][^()]*[)])?
    beginCaptures:
      1:
        patterns:
          - { include: "#Indent" }
      2:
        patterns:
          - { include: "#GatherMark" }
      3:
        patterns:
          - { include: "#ExtraWhitespace" }
      4:
        patterns:
          - { include: "#Label" }
    patterns:
      - { include: "#Annotation" }
      - { include: "#Choice" }
      - { include: "#Divert" }
      - { include: "#Todo" }
      - { include: "#Logic" }
      - { include: "#Tag" }
      - { include: "#Write" }
      - { include: "#Dialogue" }
      - { include: "#Transition" }
      - { include: "#Scene" }
      - { include: "#Action" }
    end: ({{EOL}})(\r\n|\r|\n)?
    endCaptures:
      1:
        patterns:
          - { include: "#EndOfLine" }
      2:
        patterns:
          - { include: "#Newline" }

  GatherMark:
    tag: keyword
    name: keyword.other.gather.sd
    match: (.+)

  ########## Knot, Stitch, Function ##########

  Knot:
    begin: ^({{WS}}*)([=]{2,}{{EOK}})
    beginCaptures:
      1:
        patterns:
          - { include: "#Indent" }
      2:
        patterns:
          - { include: "#KnotBeginMark" }
    patterns:
      - { include: "#FunctionDeclaration" }
      - { include: "#KnotDeclaration" }
    end: ({{WS}}*[=]{2,})|(?=$)
    endCaptures:
      1:
        patterns:
          - { include: "#KnotEndMark" }

  KnotDeclaration:
    begin: ({{IDENTIFIER}})
    beginCaptures:
      1:
        patterns:
          - { include: "#KnotDeclarationName" }
    patterns:
      - { include: "#FunctionParameters" }
    end: (?=$|[=]|[/][/]|{{WS}}*(?![(]))

  KnotBeginMark:
    tag: definition(heading)
    name: keyword.control.section.sd
    match: (.+)

  KnotEndMark:
    tag: definition(heading)
    name: keyword.control.section.sd
    match: (.+)

  KnotDeclarationName:
    tag: definition(heading)
    name: keyword.control.section.sd
    match: (.+)

  Stitch:
    begin: ^({{WS}}*)([=])({{EOK}})
    beginCaptures:
      1:
        patterns:
          - { include: "#Indent" }
      2:
        tag: definition(heading)
        name: keyword.control.section.sd
      3:
        patterns:
          - { include: "#Separator" }
    patterns:
      - { include: "#Annotation" }
      - { include: "#StitchDeclaration" }
    end: ([=]+)|(?=$)
    endCaptures:
      1:
        patterns:
          - { include: "#InvalidValue" }

  StitchDeclaration:
    begin: ({{WS}}*)({{IDENTIFIER}})
    beginCaptures:
      1:
        patterns:
          - { include: "#ExtraWhitespace" }
      2:
        patterns:
          - { include: "#StitchDeclarationName" }
    patterns:
      - { include: "#Annotation" }
      - { include: "#FunctionParameters" }
    end: (?=$|[=]|[/][/])

  StitchDeclarationName:
    tag: definition(heading)
    name: keyword.control.section.sd
    match: (.+)

  FunctionDeclaration:
    begin: (function)({{WS}}*)({{IDENTIFIER}})
    beginCaptures:
      1:
        tag: controlKeyword
        name: keyword.control.definition.function.sd
      2:
        patterns:
          - { include: "#Separator" }
      3:
        patterns:
          - { include: "#FunctionDeclarationName" }
    patterns:
      - { include: "#Annotation" }
      - { include: "#FunctionParameters" }
    end: (?=$|{{WS}}*[=]{2,})

  FunctionDeclarationName:
    tag: function(variableName)
    name: entity.name.function.sd
    match: (.+)

  ########## Divert & Thread ##########

  Divert:
    begin: ({{WS}}*)(->|<-)({{WS}}*)
    beginCaptures:
      1:
        patterns:
          - { include: "#Indent" }
      2:
        patterns:
          - { include: "#DivertArrow" }
      3:
        patterns:
          - { include: "#Separator" }
    patterns:
      - { include: "#Annotation" }
      - { include: "#ExtraWhitespace" }
      - { include: "#End" }
      - { include: "#Done" }
      - { include: "#FunctionCall" }
      - { include: "#DivertPath" }
      - { include: "#TunnelArrow" }
    end: (?=$|[}]|[)]|[|]|[-]|{{TAG_START}})

  DivertArrow:
    tag: function(variableName)
    name: entity.name.function.divert.sd
    match: (->|<-)

  End:
    tag: keyword
    name: constant.language.end.sd
    match: \b(END)\b

  Done:
    tag: keyword
    name: constant.language.done.sd
    match: \b(DONE)\b

  DivertPath:
    tag: heading
    name: keyword.control.divert.path.sd
    begin: (?=[{{IDENTIFIER_START_CHAR}}0-9^.])
    patterns:
      - { include: "#Annotation" }
      - { include: "#DivertPart" }
    end: (?=$|[^{{IDENTIFIER_START_CHAR}}0-9^.])

  DivertPart:
    emit: true
    patterns:
      - { include: "#PunctuationAccessor" }
      - { include: "#DivertPartNumber" }
      - { include: "#DivertPartOperator" }
      - { include: "#DivertPartName" }

  DivertPartNumber:
    tag: heading
    name: keyword.control.divert.path.sd
    match: ([0-9]+)

  DivertPartOperator:
    tag: heading
    name: keyword.control.divert.path.sd
    match: (^)

  DivertPartName:
    tag: heading
    name: keyword.control.divert.path.sd
    match: ({{IDENTIFIER}})

  TunnelArrow:
    tag: function(variableName)
    name: entity.name.function.divert.sd
    match: (->(?:->)?|<-)

  ########## ConditionalBlock (anything within {}) ##########

  ConditionalBlock:
    brackets: true
    begin: ([{])({{WS}}*)
    beginCaptures:
      1:
        patterns:
          - { include: "#ConditionalBlockOpenBrace" }
      2:
        patterns:
          - { include: "#ExtraWhitespace" }
    patterns:
      - { include: "#Annotation" }
      - { include: "#CloseBraceAhead" }
      - { include: "#MultilineAlternative" }
      - { include: "#MultilineBlock" }
      - { include: "#ConditionalSubstitution" }
      - { include: "#Divert" }
      - { include: "#Substitution" }
      - { include: "#FirstAlternativeItem" }
      - { include: "#AlternativeItem" }
      - { include: "#ConditionalBlock" }
      - { include: "#InlineConditionalText" }
    end: ({{WS}}*)([}])(?:({{WS}}*)(?=\S))?
    endCaptures:
      1:
        patterns:
          - { include: "#ExtraWhitespace" }
      2:
        patterns:
          - { include: "#ConditionalBlockCloseBrace" }
      3:
        patterns:
          - { include: "#Separator" }

  ConditionalBlockOpenBrace:
    tag: keyword
    name: punctuation.definition.template-expression.begin.sd
    match: ([{])

  ConditionalBlockCloseBrace:
    tag: keyword
    name: punctuation.definition.template-expression.end.sd
    match: ([}])

  Substitution:
    name: keyword.control.sd
    match: (?<=[{]{{WS}}*)({{WS}}*)([^{}:|]+)((?<!{{WS}}){{WS}}*)(?=[}])
    captures:
      1:
        patterns:
          - { include: "#ExtraWhitespace" }
      2:
        patterns:
          - { include: "#Expression" }
      3:
        patterns:
          - { include: "#ExtraWhitespace" }

  FirstAlternativeItem:
    begin: (?<=[{]{{WS}}*)({{WS}}*)([&!~])
    beginCaptures:
      1:
        patterns:
          - { include: "#ExtraWhitespace" }
      2:
        tag: controlKeyword
        name: keyword.control.alternative.type.sd
    patterns:
      - { include: "#Annotation" }
      - { include: "#PipeAhead" }
      - { include: "#Literal" }
      - { include: "#Divert" }
      - { include: "#Tag" }
      - { include: "#ConditionalSubstitution" }
      - { include: "#ConditionalBlock" }
      - { include: "#InlineConditionalText" }
    end: (?=[|])

  AlternativeItem:
    begin: ([|])
    beginCaptures:
      1:
        tag: keyword
        name: keyword.other.sd
    patterns:
      - { include: "#Annotation" }
      - { include: "#CloseBraceAhead" }
      - { include: "#PipeAhead" }
      - { include: "#Literal" }
      - { include: "#Divert" }
      - { include: "#ConditionalBlock" }
      - { include: "#InlineConditionalText" }
    end: (?=[}]|[|])

  ConditionalSubstitution:
    begin: ((?:[^{}|]|[|](?=[|]))+)((?<!{{WS}}){{WS}}*)([:])({{WS}}*)(?!{{EOL}})
    beginCaptures:
      1:
        patterns:
          - { include: "#Expression" }
      2:
        patterns:
          - { include: "#ExtraWhitespace" }
      3:
        tag: keyword
        name: keyword.colon.sd
      4:
        patterns:
          - { include: "#Whitespace" }
    patterns:
      - { include: "#Annotation" }
      - { include: "#CloseBraceAhead" }
      - { include: "#Divert" }
      - { include: "#InlineElseClause" }
      - { include: "#ConditionalBlock" }
      - { include: "#InlineConditionalText" }
    end: ({{WS}}*)(?=[}])
    endCaptures:
      1:
        patterns:
          - { include: "#ExtraWhitespace" }

  InlineElseClause:
    begin: ([|])
    beginCaptures:
      1:
        tag: keyword
        name: keyword.other.sd
    patterns:
      - { include: "#Annotation" }
      - { include: "#CloseBraceAhead" }
      - { include: "#Divert" }
      - { include: "#ConditionalBlock" }
      - { include: "#InlineConditionalText" }
    end: (?=[}])

  MultilineBlock:
    begin: ([^{}:]+)((?<!{{WS}}){{WS}}*)([:])(?={{EOL}})
    beginCaptures:
      1:
        patterns:
          - { include: "#SequenceKeyword" }
          - { include: "#Expression" }
      2:
        patterns:
          - { include: "#ExtraWhitespace" }
      3:
        tag: separator
        name: meta.template.expression.colon.sd
    patterns:
      - { include: "#Annotation" }
      - { include: "#Newline" }
      - { include: "#MultilineCloseBraceAhead" }
      - { include: "#MultilineCaseClause" }
      - { include: "#MultilineAlternativeClause" }
      - { include: "#Divert" }
      - { include: "#Logic" }
      - { include: "#Choice" }
      - { include: "#Todo" }
      - { include: "#ConditionalBlock" }
      - { include: "#MultilineConditionalText" }
    end: (?=[}])

  MultilineAlternative:
    begin: (?<=[{]{{WS}}*)({{WS}}*)(?={{EOL}})
    beginCaptures:
      1:
        patterns:
          - { include: "#ExtraWhitespace" }
    patterns:
      - { include: "#Annotation" }
      - { include: "#Newline" }
      - { include: "#MultilineCloseBraceAhead" }
      - { include: "#MultilineCaseClause" }
      - { include: "#MultilineAlternativeClause" }
      - { include: "#Divert" }
      - { include: "#Logic" }
      - { include: "#Choice" }
      - { include: "#Todo" }
      - { include: "#ConditionalBlock" }
      - { include: "#MultilineConditionalText" }
    end: (?=[}])

  MultilineCaseClause:
    begin: ^({{WS}}*)([-])({{EOK}})(?:(else)|([^|{}:]+))({{WS}}*)([:])({{WS}}*)
    beginCaptures:
      1:
        patterns:
          - { include: "#Indent" }
      2:
        patterns:
          - { include: "#MultilineCaseMark" }
      3:
        patterns:
          - { include: "#Separator" }
      4:
        tag: controlKeyword
        name: keyword.control.sd
      5:
        patterns:
          - { include: "#Expression" }
      6:
        patterns:
          - { include: "#ExtraWhitespace" }
      7:
        tag: separator
        name: meta.template.expression.colon.sd
      8:
        patterns:
          - { include: "#Separator" }
    patterns:
      - { include: "#Annotation" }
      - { include: "#Newline" }
      - { include: "#MultilineCloseBraceAhead" }
      - { include: "#MultilineDashAhead" }
      - { include: "#Divert" }
      - { include: "#Logic" }
      - { include: "#Choice" }
      - { include: "#ConditionalBlock" }
      - { include: "#MultilineConditionalText" }
    end: (?=^|[}]|[-]{{EOK}})

  MultilineAlternativeClause:
    begin: ^({{WS}}*)([-])({{EOK}})
    beginCaptures:
      1:
        patterns:
          - { include: "#Indent" }
      2:
        patterns:
          - { include: "#MultilineAlternativeMark" }
      3:
        patterns:
          - { include: "#Separator" }
    patterns:
      - { include: "#Annotation" }
      - { include: "#Newline" }
      - { include: "#MultilineCloseBraceAhead" }
      - { include: "#MultilineDashAhead" }
      - { include: "#Divert" }
      - { include: "#Logic" }
      - { include: "#Choice" }
      - { include: "#ConditionalBlock" }
      - { include: "#MultilineConditionalText" }
    end: (?=^|[}]|[-]{{EOK}})

  SequenceKeyword:
    tag: controlKeyword
    name: keyword.control.sequence.sd
    match: \b(stopping|shuffle|cycle|once)\b

  InlineConditionalText:
    patterns:
      - { include: "#DisplayText" }

  MultilineConditionalText:
    begin: (?={{WS}}*\S)
    patterns:
      - { include: "#Annotation" }
      - { include: "#Newline" }
      - { include: "#MultilineCloseBraceAhead" }
      - { include: "#Dialogue" }
      - { include: "#Transition" }
      - { include: "#Scene" }
      - { include: "#Action" }
      - { include: "#DisplayText" }
    end: (?=$|{{WS}}*[}])

  MultilineCaseMark:
    tag: keyword
    name: keyword.switch.clause.sd
    match: ([-])

  MultilineAlternativeMark:
    tag: keyword
    name: keyword.sequence.clause.sd
    match: ([-])

  PipeAhead:
    match: (?=[|])

  CloseBraceAhead:
    match: (?=[}])

  MultilineCloseBraceAhead:
    match: ^({{WS}}*)(?=[}])
    captures:
      1:
        patterns:
          - { include: "#Indent" }

  MultilineDashAhead:
    match: ^({{WS}}*)(?=[-]{{EOK}})
    captures:
      1:
        patterns:
          - { include: "#Indent" }

  ########## Expression ##########

  Expression:
    patterns:
      - { include: "#Annotation" }
      - { include: "#RefModifier" }
      - { include: "#FunctionCall" }
      - { include: "#Divert" }
      - { include: "#Operator" }
      - { include: "#Literal" }
      - { include: "#Separator" }
      - { include: "#Newline" }
      - { include: "#ParenExpression" }
      - { include: "#AccessPath" }
      - { include: "#PunctuationSemicolon" }
      - { include: "#PunctuationComma" }
      - { include: "#IllegalChar" }

  Indent:
    tag: content
    name: markup.raw.whitespace.indent.sd
    match: ^({{WS}}+)

  TrailingWhitespace:
    tag: special(content)
    name: markup.raw.whitespace.trailing.sd
    match: (?<!^)({{WS}}+)$

  ExtraWhitespace:
    tag: content
    name: markup.raw.whitespace.sd
    match: ({{WS}}+)

  Whitespace:
    tag: content
    name: markup.raw.whitespace.sd
    match: ({{WS}}+)

  Separator:
    tag: content
    name: markup.raw.whitespace.sd
    match: ({{WS}}+)

  OptionalSeparator:
    tag: definition(content)
    name: markup.raw.whitespace.sd
    match: ({{WS}}*)

  EndOfLine:
    patterns:
      - { include: "#Annotation" }
      - { include: "#TrailingWhitespace" }

  Operator:
    patterns:
      - { include: "#SpreadOperator" }
      - { include: "#AssignArithmeticOperator" }
      - { include: "#AssignBitwiseOperator" }
      - { include: "#BitwiseShiftOperator" }
      - { include: "#CompareEqualOperator" }
      - { include: "#CompareRelativeOperator" }
      - { include: "#NegateOperator" }
      - { include: "#LogicalOperator" }
      - { include: "#WordOperator" }
      - { include: "#BitwiseOperator" }
      - { include: "#AssignEqualOperator" }
      - { include: "#DecrementOperator" }
      - { include: "#IncrementOperator" }
      - { include: "#ArithmeticOperator" }
      - { include: "#AssignMultiplyOperator" }
      - { include: "#AssignDivideOperator" }

  SpreadOperator:
    tag: derefOperator
    name: keyword.operator.spread.sd
    match: ([.][.][.])

  AssignArithmeticOperator:
    tag: updateOperator
    name: keyword.operator.assignment.compound.sd
    match: ([*][=]|(?<!\()[/][=]|[%][=]|[+][=]|[-][=])

  AssignBitwiseOperator:
    tag: updateOperator
    name: keyword.operator.assignment.compound.bitwise.sd
    match: ([&][=]|[\^][=]|[<][<][=]|[>][>][=]|[>][>][>][=]|[|][=])

  BitwiseShiftOperator:
    tag: updateOperator
    name: keyword.operator.bitwise.shift.sd
    match: ([<][<]|[>][>][>]|[>][>])

  CompareEqualOperator:
    tag: compareOperator
    name: keyword.operator.comparison.sd
    match: ([=][=][=]|[!][=][=]|[=][=]|[!][=])

  CompareRelativeOperator:
    tag: compareOperator
    name: keyword.operator.relational.sd
    match: ([<][=]|[>][=]|[<][>]|[<]|[>])

  NegateOperator:
    tag: updateOperator
    match: (?<=[{{IDENTIFIER_END_CHAR}}])([!])\s*(?:([/][=])|(?:([/])(?![/*])))
    captures:
      1:
        tag: logicOperator
        name: keyword.operator.logical.sd
      2:
        tag: updateOperator
        name: keyword.operator.assignment.compound.sd
      3:
        tag: arithmeticOperator
        name: keyword.operator.arithmetic.sd

  LogicalOperator:
    tag: logicOperator
    name: keyword.operator.logical.sd
    match: ([!]|[&][&]|[|][|]|[?][?])

  BitwiseOperator:
    tag: bitwiseOperator
    name: keyword.operator.bitwise.sd
    match: ([&]|[~]|[\^]|[|])

  AssignEqualOperator:
    tag: updateOperator
    name: keyword.operator.assignment.sd
    match: ([=])

  DecrementOperator:
    tag: updateOperator
    name: keyword.operator.decrement.sd
    match: ([-][-])

  IncrementOperator:
    tag: updateOperator
    name: keyword.operator.increment.sd
    match: ([+][+])

  ArithmeticOperator:
    tag: arithmeticOperator
    name: keyword.operator.arithmetic.sd
    match: ([%]|[*]|[/]|[-]|[+])

  AssignMultiplyOperator:
    begin: (?<=[{{IDENTIFIER_END_CHAR}})\]])\s*(?=(\/[*]([^*]|([*][^\/]))*[*]\/\s*)+(?:(/=)|(?:(/)(?![/*]))))
    patterns:
      - { include: "#Annotation" }
    end: (?:(/=)|(?:(/)(?![*]([^*]|([*][^\/]))*[*][/])))
    endCaptures:
      1:
        tag: updateOperator
        name: keyword.operator.assignment.compound.sd
      2:
        tag: arithmeticOperator
        name: keyword.operator.arithmetic.sd

  AssignDivideOperator:
    match: (?<=[{{IDENTIFIER_END_CHAR}})\]])([\s]*)([/][=]|([/])(?![/*]))
    captures:
      2:
        tag: arithmeticOperator
        name: keyword.operator.arithmetic.sd

  AssignColonOperator:
    tag: punctuation
    name: punctuation.separator.colon.sd
    match: ([:])

  ArrowOperator:
    tag: punctuation
    name: punctuation.separator.colon.sd
    match: ([=][>])

  WordOperator:
    tag: keyword
    name: keyword.logical.word.sd
    match: \b(not|and|or|has|hasnt|mod)\b

  Literal:
    patterns:
      - { include: "#StringLiteral" }
      - { include: "#NumericLiteral" }
      - { include: "#BooleanLiteral" }
      - { include: "#NullLiteral" }
      - { include: "#UndefinedLiteral" }
      - { include: "#NumericConstantLiteral" }

  StringLiteral:
    patterns:
      - { include: "#DoubleQuoteString" }

  DoubleQuoteString:
    tag: string
    name: string.quoted.double.sd
    begin: (["])
    beginCaptures:
      1:
        tag: string
        name: punctuation.definition.string.begin.sd
    patterns:
      - { include: "#StringEscape" }
      - { include: "#Annotation" }
      - { include: "#Color" }
      - { include: "#StringCharacter" }
    end: (["])|($)
    endCaptures:
      1:
        tag: string
        name: punctuation.definition.string.end.sd

  StringEscape:
    match: (\\)(.)
    captures:
      1:
        tag: definition(escape)
        name: constant.character.escape.sd
      2:
        tag: escape
        name: constant.character.escape.sd

  StringCharacter:
    tag: string
    name: string.content.character.sd
    match: (.)

  NumericLiteral:
    patterns:
      - { include: "#HexNumber" }
      - { include: "#BinaryNumber" }
      - { include: "#OctalNumber" }
      - { include: "#DecimalNumber" }

  HexNumber:
    tag: number
    name: constant.numeric.hex.sd
    match: (\b(?<![$])0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(?:n)?\b(?![$]))
    captures:
      1:
        tag: number
        name: storage.type.numeric.bigint.sd

  BinaryNumber:
    tag: number
    name: constant.numeric.binary.sd
    match: (\b(?<![$])0(?:b|B)[01][01_]*(?:n)?\b(?![$]))
    captures:
      1:
        tag: number
        name: storage.type.numeric.bigint.sd

  OctalNumber:
    tag: number
    name: constant.numeric.octal.sd
    match: (\b(?<![$])0(?:o|O)?[0-7][0-7_]*(?:n)?\b(?![$]))
    captures:
      1:
        tag: number
        name: storage.type.numeric.bigint.sd

  DecimalNumber:
    tag: number
    name: constant.numeric.decimal.sd
    # match: 1.1E+3|1.E+3|.1E+3|1E+3|1.1|1.|.1|1
    match: ((?<![$])(?:(?:\b[0-9][0-9_]*[.][0-9][0-9_]*[eE][+-]?[0-9][0-9_]*[n]?\b)|(?:\b[0-9][0-9_]*[.][eE][+-]?[0-9][0-9_]*[n]?\b)|(?:\B[.][0-9][0-9_]*[eE][+-]?[0-9][0-9_]*[n]?\b)|(?:\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*[n]?\b)|(?:\b[0-9][0-9_]*[.][0-9][0-9_]*[n]?\b)|(?:\b[0-9][0-9_]*[.][n]?\B)|(?:\B[.][0-9][0-9_]*[n]?\b)|(?:\b[0-9][0-9_]*[n]?\b(?![.])))(?![$]))

  BooleanLiteral:
    patterns:
      - { include: "#BooleanTrue" }
      - { include: "#BooleanFalse" }

  BooleanTrue:
    tag: bool
    name: constant.language.boolean.true.sd
    match: "{{BEFORE_KEYWORD}}true{{AFTER_KEYWORD}}"

  BooleanFalse:
    tag: bool
    name: constant.language.boolean.false.sd
    match: "{{BEFORE_KEYWORD}}false{{AFTER_KEYWORD}}"

  NullLiteral:
    tag: "null"
    name: constant.language.null.sd
    match: "{{BEFORE_KEYWORD}}null{{AFTER_KEYWORD}}"

  UndefinedLiteral:
    tag: "null"
    name: constant.language.undefined.sd
    match: "{{BEFORE_KEYWORD}}undefined{{AFTER_KEYWORD}}"

  NumericConstantLiteral:
    patterns:
      - { include: "#NaN" }
      - { include: "#Infinity" }

  NaN:
    tag: atom
    name: constant.language.nan.sd
    match: "{{BEFORE_KEYWORD}}NaN{{AFTER_KEYWORD}}"

  Infinity:
    tag: atom
    name: constant.language.infinity.sd
    match: "{{BEFORE_KEYWORD}}Infinity{{AFTER_KEYWORD}}"

  ArrayLiteral:
    name: meta.array.literal.sd
    brackets: true
    begin: (\[)
    beginCaptures:
      1:
        tag: brace
        name: meta.brace.square.open.sd
    patterns:
      - { include: "#Annotation" }
      - { include: "#ArrayItem" }
      - { include: "#Newline" }
    end: (\])
    endCaptures:
      1:
        tag: brace
        name: meta.brace.square.close.sd

  ArrayItem:
    tag: meta
    name: meta.item.sd
    begin: (?=.+$)
    patterns:
      - { include: "#Annotation" }
      - { include: "#Expression" }
    end: (?=\])|([,])
    endCaptures:
      1:
        tag: separator
        name: meta.template.expression.comma.sd

  PunctuationComma:
    tag: separator
    name: meta.template.expression.comma.sd
    match: ([,])

  PunctuationSemicolon:
    tag: separator
    name: meta.template.expression.semicolon.sd
    match: ([;])

  PunctuationParenOpen:
    match: ([(])
    tag: paren
    name: meta.brace.round.open.sd

  PunctuationParenClose:
    match: ([)])
    tag: paren
    name: meta.brace.round.close.sd

  ParenExpression:
    brackets: true
    begin: ([(])
    beginCaptures:
      1:
        patterns:
          - { include: "#PunctuationParenOpen" }
    patterns:
      - { include: "#Annotation" }
      - { include: "#Expression" }
    end: ([)])
    endCaptures:
      1:
        patterns:
          - { include: "#PunctuationParenClose" }

  NamespaceAccessor:
    match: ({{IDENTIFIER}})([.])($|{{IDENTIFIER}})(?![(])
    captures:
      1:
        patterns:
          - { include: "#TypeName" }
      2:
        patterns:
          - { include: "#PunctuationAccessor" }
      3:
        patterns:
          - { include: "#VariableName" }

  VariableAccessor:
    match: ([.])({{IDENTIFIER}})(?![(])
    captures:
      1:
        patterns:
          - { include: "#PunctuationAccessor" }
      2:
        patterns:
          - { include: "#VariableName" }

  PropertyAccessor:
    match: ([.])({{IDENTIFIER}})(?![(])
    captures:
      1:
        patterns:
          - { include: "#PunctuationAccessor" }
      2:
        patterns:
          - { include: "#PropertyName" }

  IllegalPropertyDeclaration:
    tag: invalid
    name: invalid.illegal.property-declaration.sd
    match: ({{IDENTIFIER}})({{WS}}*)([:])(.*?)($|(?=[;}]))

  TypeName:
    tag: typeName
    name: support.type.sd
    match: ({{IDENTIFIER}})

  VariableName:
    tag: variableName
    name: variable.other.constant.sd
    match: ({{IDENTIFIER}})(?![(])

  PropertyName:
    tag: propertyName
    name: variable.other.property.sd
    match: ({{IDENTIFIER}})(?![(])

  FunctionName:
    tag: function(variableName)
    name: entity.name.function.sd
    match: ({{IDENTIFIER}})

  Identifier:
    match: ({{IDENTIFIER}})

  PunctuationAccessor:
    match: ([.])
    tag: separator
    name: meta.template.expression.accessor.sd

  Color:
    emit: true
    patterns:
      - { include: "#HEXColor" }
      - { include: "#RGBColor" }
      - { include: "#HSLColor" }

  HEXColor:
    tag: string
    name: string.color.hex.sd
    match: (#)((?:[0-9a-fA-F]{2}){2,4})
    color: true

  RGBColor:
    tag: string
    name: string.color.rgb.sd
    match: (rgb)([(][\d]+[\s]+[\d]+[\s]+[\d]+(?:[\s]*[/][\s]*[\d.]+[%]?)?[)])
    color: true

  HSLColor:
    tag: string
    name: string.color.hsl.sd
    match: (hsl)([(][\d]+[\s]+[\d]+[%]?[\s]+[\d]+[%]?(?:[\s]*[/][\s]*[\d.]+[%]?)?[)])
    color: true

  ########## FrontMatter ##########

  FrontMatter:
    tag: meta
    name: meta.front-matter.sd
    begin: ^([-]{3,})($|{{WS}}*$)
    beginCaptures:
      1:
        tag: keyword
        name: keyword.other.front-matter.dashes.start.sd
      2:
        patterns:
          - { include: "#ExtraWhitespace" }
    patterns:
      - { include: "#Comment" }
      - { include: "#FrontMatterField" }
      - { include: "#Newline" }
      - { include: "#Unknown" }
    end: ^([-]{3,})($|{{WS}}*$)?
    endCaptures:
      1:
        tag: keyword
        name: keyword.other.front-matter.dashes.end.sd
      2:
        patterns:
          - { include: "#ExtraWhitespace" }

  FrontMatterField:
    tag: meta
    name: meta.front-matter.field.sd
    begin: ^(?!{{WS}}+)([^:\r\n]+)({{WS}}*)($|[:])($|.*$(?:\r\n|\r|\n)?)
    beginCaptures:
      1:
        patterns:
          - { include: "#FrontMatterFieldKeyword" }
      2:
        patterns:
          - { include: "#ExtraWhitespace" }
      3:
        tag: separator
        name: meta.template.expression.colon.sd
      4:
        patterns:
          - { include: "#FrontMatterStringInline" }
    patterns:
      - { include: "#Comment" }
      - { include: "#FrontMatterStringBlock" }
      - { include: "#Newline" }
      - { include: "#Unknown" }
    end: (?=^(?!{{WS}}+)[^:\r\n]+{{WS}}*(?:$|[:])|[-]{3,})

  FrontMatterFieldKeyword:
    tag: keyword
    name: keyword.other.front-matter.field.sd
    match: (.+)

  FrontMatterStringInline:
    match: ({{WS}}*)($|.+$(?:\r\n|\r|\n)?)
    captures:
      1:
        patterns:
          - { include: "#Separator" }
      2:
        patterns:
          - { include: "#FrontMatterString" }

  FrontMatterStringBlock:
    match: ^({{WS}}+)(.*$(?:\r\n|\r|\n)?)
    captures:
      1:
        patterns:
          - { include: "#Indent" }
      2:
        patterns:
          - { include: "#FrontMatterString" }

  FrontMatterString:
    tag: string
    name: string.front-matter.string.sd
    begin: (?=.*$)
    patterns:
      - { include: "#Comment" }
      - { include: "#InlineText" }
    end: ($(?:\r\n|\r|\n)?)
    endCaptures:
      1:
        patterns:
          - { include: "#Newline" }

  ########## Write ##########

  Write:
    patterns:
      - { include: "#BlockWrite" }
      - { include: "#InlineWrite" }

  InlineWrite:
    tag: string
    name: string.write.sd
    begin: ({{WS}}*)([>])($|{{WS}}+)($|.*?)($|{{WS}}*)($|[:])($|{{WS}}*)
    beginCaptures:
      1:
        patterns:
          - { include: "#Indent" }
      2:
        patterns:
          - { include: "#WriteMark" }
      3:
        patterns:
          - { include: "#Separator" }
      4:
        patterns:
          - { include: "#Annotation" }
          - { include: "#WriteTarget" }
      5:
        patterns:
          - { include: "#ExtraWhitespace" }
      6:
        tag: definition(separator)
        name: meta.template.expression.colon.sd
      7:
        patterns:
          - { include: "#Separator" }
    patterns:
      - { include: "#Annotation" }
      - { include: "#Newline" }
      - { include: "#LineBreak" }
      - { include: "#LineChain" }
      - { include: "#AssetLine" }
      - { include: "#ParentheticalLine" }
      - { include: "#LineEnd" }
    end: (?=^{{WS}}*$)|(?=\r\n|\r|\n)

  BlockWrite:
    tag: string
    name: string.write.sd
    begin: ({{WS}}*)([>])($|{{WS}}+)($|[^:\r\n]+?)(?={{EOL}})
    beginCaptures:
      1:
        patterns:
          - { include: "#Indent" }
      2:
        patterns:
          - { include: "#WriteMark" }
      3:
        patterns:
          - { include: "#Separator" }
      4:
        patterns:
          - { include: "#Annotation" }
          - { include: "#WriteTarget" }
    patterns:
      - { include: "#Annotation" }
      - { include: "#Newline" }
      - { include: "#BlockLineBreak" }
      - { include: "#BlockLineContinue" }
    end: (?=^(?!\1))|(?=^\s*$)

  WriteMark:
    tag: definition(typeName)
    name: entity.name.type.write.target.name.sd
    match: (.+)

  WriteTarget:
    tag: typeName
    name: entity.name.type.write.target.name.sd
    match: (.+)

  ########## Dialogue ##########

  Dialogue:
    patterns:
      - { include: "#BlockDialogue" }
      - { include: "#InlineDialogue" }

  InlineDialogue:
    tag: string
    name: string.dialogue.sd
    begin: ({{WS}}*)([@])($|{{WS}}+)($|.*?)($|{{WS}}*)($|[:])($|{{WS}}*)
    beginCaptures:
      1:
        patterns:
          - { include: "#Indent" }
      2:
        patterns:
          - { include: "#DialogueMark" }
      3:
        patterns:
          - { include: "#Separator" }
      4:
        patterns:
          - { include: "#Annotation" }
          - { include: "#DialogueCharacter" }
      5:
        patterns:
          - { include: "#ExtraWhitespace" }
      6:
        tag: definition(separator)
        name: meta.template.expression.colon.sd
      7:
        patterns:
          - { include: "#Separator" }
    patterns:
      - { include: "#Annotation" }
      - { include: "#Newline" }
      - { include: "#LineBreak" }
      - { include: "#LineChain" }
      - { include: "#AssetLine" }
      - { include: "#ParentheticalLine" }
      - { include: "#LineEnd" }
    end: (?=^{{WS}}*$)|(?=\r\n|\r|\n)

  BlockDialogue:
    tag: string
    name: string.dialogue.sd
    begin: ({{WS}}*)([@])($|{{WS}}+)($|[^:\r\n]+?)(?={{EOL}})
    beginCaptures:
      1:
        patterns:
          - { include: "#Indent" }
      2:
        patterns:
          - { include: "#DialogueMark" }
      3:
        patterns:
          - { include: "#Separator" }
      4:
        patterns:
          - { include: "#Annotation" }
          - { include: "#DialogueCharacter" }
    patterns:
      - { include: "#Annotation" }
      - { include: "#Newline" }
      - { include: "#BlockLineBreak" }
      - { include: "#BlockLineContinue" }
    end: (?=^(?!\1))|(?=^\s*$)

  DialogueMark:
    tag: definition(typeName)
    name: entity.name.type.dialogue.character.name.sd
    match: (.+)

  DialogueCharacter:
    match: ({{WS}}*)(.*?)({{WS}}*)({{WS}}[(][^()]*?[)])?($|{{WS}}*)({{WS}}\[.*?\])?({{EOL}})
    captures:
      1:
        patterns:
          - { include: "#ExtraWhitespace" }
      2:
        patterns:
          - { include: "#DialogueCharacterName" }
      3:
        patterns:
          - { include: "#ExtraWhitespace" }
      4:
        patterns:
          - { include: "#DialogueCharacterParenthetical" }
      5:
        patterns:
          - { include: "#ExtraWhitespace" }
      6:
        patterns:
          - { include: "#DialogueCharacterPosition" }
      7:
        patterns:
          - { include: "#EndOfLine" }

  DialogueCharacterName:
    tag: typeName
    name: entity.name.type.dialogue.character.name.sd
    match: (.+$)
    captures:
      1:
        patterns:
          - { include: "#DisplayText" }

  DialogueCharacterParenthetical:
    tag: escape
    name: constant.character.escape.dialogue.character.parenthetical.sd
    match: ({{WS}})([(])({{WS}}*)([^()]*?)({{WS}}*)([)])({{WS}}*)
    captures:
      1:
        patterns:
          - { include: "#Whitespace" }
      2:
        tag: paren
        name: meta.brace.round.open.sd
      3:
        patterns:
          - { include: "#ExtraWhitespace" }
      4:
        patterns:
          - { include: "#DisplayText" }
      5:
        patterns:
          - { include: "#ExtraWhitespace" }
      6:
        tag: paren
        name: meta.brace.round.close.sd
      7:
        patterns:
          - { include: "#ExtraWhitespace" }

  DialogueCharacterPosition:
    tag: definition(escape)
    name: constant.character.escape.dialogue.character.position.sd
    match: ({{WS}})(\[)({{WS}}*)(.*?)({{WS}}*)(\])
    captures:
      1:
        patterns:
          - { include: "#Whitespace" }
      2:
        tag: bracket
        name: punctuation.definition.position.sd
      3:
        patterns:
          - { include: "#ExtraWhitespace" }
      4:
        patterns:
          - { include: "#DialogueCharacterPositionContent" }
      5:
        patterns:
          - { include: "#ExtraWhitespace" }
      6:
        tag: bracket
        name: punctuation.definition.position.sd

  DialogueCharacterPositionContent:
    match: (.+$)

  ########## Transition ##########

  Transition:
    tag: labelName
    name: keyword.control.transition.sd
    begin: ({{WS}}*)([%])($|{{WS}}+)
    beginCaptures:
      1:
        patterns:
          - { include: "#Indent" }
      2:
        patterns:
          - { include: "#TransitionMark" }
      3:
        patterns:
          - { include: "#Separator" }
    patterns:
      - { include: "#Annotation" }
      - { include: "#Newline" }
      - { include: "#LineBreak" }
      - { include: "#LineChain" }
      - { include: "#LineEnd" }
    end: (?=^{{WS}}*$)|(?=\r\n|\r|\n)

  TransitionMark:
    tag: definition(punctuation)
    name: punctuation.transition.mark.sd
    match: (.+)

  ########## Scene ##########

  Scene:
    tag: regexp
    name: string.regexp.scene.sd
    begin: ({{WS}}*)([$])($|{{WS}}+)
    beginCaptures:
      1:
        patterns:
          - { include: "#Indent" }
      2:
        patterns:
          - { include: "#SceneMark" }
      3:
        patterns:
          - { include: "#Separator" }
    patterns:
      - { include: "#Annotation" }
      - { include: "#Newline" }
      - { include: "#LineBreak" }
      - { include: "#LineChain" }
      - { include: "#LineEnd" }
    end: (?=^{{WS}}*$)|(?=\r\n|\r|\n)

  SceneMark:
    tag: definition(punctuation)
    name: punctuation.scene.mark.sd
    match: (.+)

  SceneLocationTime:
    match: INT[.]?[\/]EXT[.]|INT[.]|EXT[.]{{WS}}*(.*?){{WS}}+[-]{{WS}}+(.*?){{WS}}*$

  ########## Action ##########

  Action:
    begin: ({{WS}}*)(?:([<][>])|([!])($|{{WS}}+))?(?=\S)
    beginCaptures:
      1:
        patterns:
          - { include: "#Indent" }
      2:
        patterns:
          - { include: "#Glue" }
      3:
        patterns:
          - { include: "#ActionMark" }
      4:
        patterns:
          - { include: "#Separator" }
    patterns:
      - { include: "#Annotation" }
      - { include: "#Newline" }
      - { include: "#LineBreak" }
      - { include: "#LineChain" }
      - { include: "#AssetLine" }
      - { include: "#ParentheticalLine" }
      - { include: "#LineEnd" }
      - { include: "#ExtraWhitespace" }
    end: (?=^{{WS}}*$)|(?=\r\n|\r|\n)|(?=[#])

  ActionMark:
    tag: definition(content)
    name: markup.raw.text.sd
    match: (.+)

  ########## Parenthetical ##########

  ParentheticalLine:
    match: ({{WS}}*)((?:[=].*?[=]|[<].*?[>]|{{WS}}*)*)({{WS}}*)([(][^()]*?[)])({{WS}}*)($|{{EOL}}|(?={{BREAK}})|[\\](?:{{WS}}))
    captures:
      1:
        patterns:
          - { include: "#Indent" }
      2:
        patterns:
          - { include: "#FlowMarker" }
          - { include: "#TextCommand" }
          - { include: "#ExtraWhitespace" }
      3:
        patterns:
          - { include: "#ExtraWhitespace" }
      4:
        patterns:
          - { include: "#ParentheticalLineContent" }
      5:
        patterns:
          - { include: "#ExtraWhitespace" }
      6:
        patterns:
          - { include: "#EndOfLine" }
          - { include: "#Chain" }

  ParentheticalLineContent:
    tag: escape
    name: constant.character.escape.sd
    match: ({{WS}}*)([(])({{WS}}*)([^()]*?)({{WS}}*)([)])({{WS}}*)
    captures:
      1:
        patterns:
          - { include: "#ExtraWhitespace" }
      2:
        tag: paren
        name: meta.brace.round.open.sd
      3:
        patterns:
          - { include: "#ExtraWhitespace" }
      4:
        patterns:
          - { include: "#DisplayText" }
      5:
        patterns:
          - { include: "#ExtraWhitespace" }
      6:
        tag: paren
        name: meta.brace.round.close.sd
      7:
        patterns:
          - { include: "#ExtraWhitespace" }

  ########## Text ##########

  BlockLineBreak:
    match: ({{WS}}*)(.*?)({{BREAK}})({{WS}}*)({{EOL}})
    captures:
      1:
        patterns:
          - { include: "#Indent" }
      2:
        patterns:
          - { include: "#AssetLine" }
          - { include: "#ParentheticalLine" }
          - { include: "#DisplayLine" }
      3:
        patterns:
          - { include: "#Break" }
      4:
        patterns:
          - { include: "#ExtraWhitespace" }
      5:
        patterns:
          - { include: "#EndOfLine" }

  BlockLineContinue:
    begin: ({{WS}}*)(?=\S)
    beginCaptures:
      1:
        patterns:
          - { include: "#Indent" }
    patterns:
      - { include: "#AssetLine" }
      - { include: "#ParentheticalLine" }
      - { include: "#DisplayLine" }
    end: ({{WS}}*)(?={{EOL}})
    endCaptures:
      1:
        patterns:
          - { include: "#Whitespace" }

  LineChain:
    match: ({{WS}}*)(.*?)([\\](?:$|{{WS}}+))({{EOL}})(\r\n|\r|\n)?
    captures:
      1:
        patterns:
          - { include: "#Indent" }
      2:
        patterns:
          - { include: "#DisplayLine" }
      3:
        patterns:
          - { include: "#Chain" }
      4:
        patterns:
          - { include: "#EndOfLine" }
      5:
        patterns:
          - { include: "#Newline" }

  LineBreak:
    match: ({{WS}}*)(.*?)({{BREAK}})({{WS}}*)({{EOL}})
    captures:
      1:
        patterns:
          - { include: "#Indent" }
      2:
        patterns:
          - { include: "#DisplayLine" }
      3:
        patterns:
          - { include: "#Break" }
      4:
        patterns:
          - { include: "#ExtraWhitespace" }
      5:
        patterns:
          - { include: "#EndOfLine" }

  LineEnd:
    begin: ({{WS}}*)(?=\S+)
    beginCaptures:
      1:
        patterns:
          - { include: "#Indent" }
    patterns:
      - { include: "#DisplayLine" }
    end: (?={{EOL}})

  DisplayLine:
    patterns:
      - { include: "#Annotation" }
      - { include: "#Escape" }
      - { include: "#ConditionalBlock" }
      - { include: "#ParentheticalLine" }
      - { include: "#Chain" }
      - { include: "#Glue" }
      - { include: "#TextChunk" }

  TextChunk:
    begin: (?=.+)
    patterns:
      - { include: "#DisplayText" }
    end: (?=$|{{WS}}*[\\](?:$|{{WS}})|[<][>]|{{EOL}})

  DisplayText:
    patterns:
      - { include: "#Annotation" }
      - { include: "#Escape" }
      - { include: "#ImageCommand" }
      - { include: "#AudioCommand" }
      - { include: "#InlineTextAndLogic" }

  ########## FlowMarker ##########

  FlowMarker:
    tag: macroName
    name: meta.source.sd
    match: ([=])(.*?)([=])({{WS}}*)
    captures:
      1:
        tag: keyword
        name: keyword.operator.expression.begin.source.sd
      2:
        patterns:
          - { include: "#UUID" }
      3:
        tag: keyword
        name: keyword.operator.expression.end.source.sd
      4:
        patterns:
          - { include: "#Separator" }

  UUID:
    tag: keyword
    name: keyword.source.identifier.sd
    match: ([=])(.*?)([=])

  ########## Commands ##########

  ImageLine:
    match: ^({{WS}}*)(?=\S)((?:\[\[(?:\\.|[^\]])*?\]\]|{{WS}}+)+)({{EOL}})
    captures:
      1:
        patterns:
          - { include: "#Indent" }
      2:
        patterns:
          - { include: "#ImageCommand" }
          - { include: "#ExtraWhitespace" }
      3:
        patterns:
          - { include: "#EndOfLine" }

  AudioLine:
    match: ^({{WS}}*)(?=\S)((?:[(][(](?:\\.|[^)])*?[)][)]|{{WS}}+)+)({{EOL}})
    captures:
      1:
        patterns:
          - { include: "#Indent" }
      2:
        patterns:
          - { include: "#AudioCommand" }
          - { include: "#ExtraWhitespace" }
      3:
        patterns:
          - { include: "#EndOfLine" }

  ImageAndAudioLine:
    match: ^({{WS}}*)(?=\S)((?:\[\[(?:\\.|[^\]])*?\]\]|[(][(](?:\\.|[^)])*?[)][)]|{{WS}}+)+)({{EOL}})
    captures:
      1:
        patterns:
          - { include: "#Indent" }
      2:
        patterns:
          - { include: "#ImageCommand" }
          - { include: "#AudioCommand" }
          - { include: "#ExtraWhitespace" }
      3:
        patterns:
          - { include: "#EndOfLine" }

  AssetLine:
    patterns:
      - { include: "#ImageLine" }
      - { include: "#AudioLine" }
      - { include: "#ImageAndAudioLine" }

  ImageCommand:
    tag: macroName
    name: meta.image.sd
    match: (\[\[)({{WS}}*)((?:\\.|[^\]])*?)({{WS}}*)(\]\])({{WS}}*)
    captures:
      1:
        tag: keyword
        name: keyword.operator.expression.begin.image.sd
      2:
        patterns:
          - { include: "#ExtraWhitespace" }
      3:
        patterns:
          - { include: "#AssetCommandContent" }
      4:
        patterns:
          - { include: "#ExtraWhitespace" }
      5:
        tag: keyword
        name: keyword.operator.expression.end.image.sd
      6:
        patterns:
          - { include: "#Separator" }

  AudioCommand:
    tag: macroName
    name: meta.audio.sd
    match: ([(][(])({{WS}}*)((?:\\.|[^)])*?)({{WS}}*)([)][)])({{WS}}*)
    captures:
      1:
        tag: keyword
        name: keyword.operator.expression.begin.audio.sd
      2:
        patterns:
          - { include: "#ExtraWhitespace" }
      3:
        patterns:
          - { include: "#AssetCommandContent" }
      4:
        patterns:
          - { include: "#ExtraWhitespace" }
      5:
        tag: keyword
        name: keyword.operator.expression.end.audio.sd
      6:
        patterns:
          - { include: "#Separator" }

  AssetCommandContent:
    match: ({{WS}}*)(.*?)($|(?:{{IMAGE_CLAUSE_KEYWORDS}}|{{AUDIO_CLAUSE_KEYWORDS}})(?=$|{{WS}}).*)
    captures:
      1:
        patterns:
          - { include: "#ExtraWhitespace" }
      2:
        patterns:
          - { include: "#Separator" }
          - { include: "#AssetCommandInstruction" }
      3:
        patterns:
          - { include: "#Annotation" }
          - { include: "#Separator" }
          - { include: "#AssetCommandClauseKeyword" }
          - { include: "#ConditionalBlock" }
          - { include: "#TimeValue" }
          - { include: "#NumberValue" }
          - { include: "#NameValue" }

  AssetCommandInstruction:
    match: (?:({{IMAGE_CONTROL_KEYWORDS}}|{{AUDIO_CONTROL_KEYWORDS}})({{WS}}*)($|\S+))?({{WS}}*)($|\S+)?({{WS}}*)(.*)
    captures:
      1:
        patterns:
          - { include: "#AssetCommandControl" }
      2:
        patterns:
          - { include: "#Separator" }
      3:
        patterns:
          - { include: "#AssetCommandTarget" }
      4:
        patterns:
          - { include: "#Separator" }
      5:
        patterns:
          - { include: "#AssetCommandAddOperator" }
          - { include: "#AssetCommandName" }
          - { include: "#IllegalChar" }
      6:
        patterns:
          - { include: "#Separator" }
      7:
        patterns:
          - { include: "#InvalidValue" }

  AssetCommandControl:
    tag: controlKeyword
    name: keyword.control.asset.control.sd
    match: (.+)

  AssetCommandTarget:
    tag: typeName
    name: entity.name.type.asset.target.sd
    match: (.+)

  AssetCommandClauseKeyword:
    tag: keyword
    name: keyword.asset.clause.keyword.sd
    match: ({{IMAGE_CLAUSE_KEYWORDS}}|{{AUDIO_CLAUSE_KEYWORDS}})

  AssetCommandName:
    match: (.+?)(?=$|[+])
    captures:
      1:
        patterns:
          - { include: "#ExtraWhitespace" }
          - { include: "#StringLiteral" }
          - { include: "#AssetCommandKeywordNone" }
          - { include: "#AssetCommandFileName" }
          - { include: "#AssetCommandFilter" }
          - { include: "#IllegalChar" }

  AssetCommandKeywordNone:
    tag: keyword
    name: keyword.asset.keyword.none.sd
    match: (none)

  AssetCommandFileName:
    tag: variableName
    name: variable.other.constant.asset.file.sd
    match: ({{IDENTIFIER}})

  AssetCommandAddOperator:
    tag: propertyName
    name: variable.other.property.add.sd
    match: ([+])

  AssetCommandFilter:
    match: ([~])($|[^~\s]+)?
    captures:
      1:
        patterns:
          - { include: "#AssetCommandFilterOperator" }
      2:
        patterns:
          - { include: "#AssetCommandFilterName" }

  AssetCommandFilterOperator:
    tag: propertyName
    name: variable.other.property.filter.sd
    match: ([~])

  AssetCommandFilterName:
    tag: variableName
    name: variable.other.constant.asset.filter.sd
    match: ([^~\s]+)

  WhitespaceAssetCommandClause:
    tag: content
    name: markup.raw.whitespace.sd
    match: ({{WS}}+)

  TimeValue:
    tag: number
    name: constant.numeric.time.sd
    match: ((?:\d*[.])?\d+)(ms|s)(?=$|{{WS}})
    captures:
      1:
        tag: number
        name: constant.numeric.time.amount.sd
      2:
        tag: number
        name: constant.numeric.time.unit.sd

  NumberValue:
    tag: number
    name: constant.numeric.number.sd
    match: ((?:\d*[.])?\d+)(?=$|{{WS}})

  NameValue:
    tag: variableName
    name: variable.other.constant.sd
    match: ({{IDENTIFIER}})(?=$|{{WS}})

  InvalidValue:
    tag: content
    name: markup.raw.text.sd
    match: (\S+)

  TextCommand:
    tag: macroName
    name: meta.text.sd
    match: ([<](?!{{WS}}))((?:\\.|[^>])*?)([>])
    captures:
      1:
        tag: keyword
        name: keyword.operator.expression.begin.tag.sd
      2:
        patterns:
          - { include: "#TextCommandContent" }
      3:
        tag: keyword
        name: keyword.operator.expression.end.tag.sd

  TextCommandContent:
    match: ({{WS}}*)([^ :]+)({{WS}}*)(?:([:])({{WS}}*)(.*))?
    captures:
      1:
        patterns:
          - { include: "#ExtraWhitespace" }
      2:
        patterns:
          - { include: "#TextCommandControl" }
      3:
        patterns:
          - { include: "#ExtraWhitespace" }
      4:
        patterns:
          - { include: "#TextCommandColon" }
      5:
        patterns:
          - { include: "#ExtraWhitespace" }
      6:
        patterns:
          - { include: "#TextCommandArguments" }

  TextCommandControl:
    match: (.+)
    captures:
      1:
        patterns:
          - { include: "#NumericLiteral" }
          - { include: "#TextCommandControlKeyword" }

  TextCommandControlKeyword:
    tag: keyword
    name: keyword.style.control.keyword.sd
    match: (.+)

  TextCommandColon:
    tag: separator
    name: meta.template.expression.colon.sd
    match: ([:])

  TextCommandArguments:
    match: (.+)
    captures:
      1:
        patterns:
          - { include: "#TextCommandArgument" }

  TextCommandArgument:
    tag: meta
    name: meta.argument.sd
    begin: (?=.+$)
    patterns:
      - { include: "#Annotation" }
      - { include: "#Expression" }
    end: (?=$)|([,])
    endCaptures:
      1:
        tag: separator
        name: meta.template.expression.comma.sd

  ########## Text ##########

  InlineTextAndLogic:
    patterns:
      - { include: "#Escape" }
      - { include: "#Divert" }
      - { include: "#ConditionalBlock" }
      - { include: "#InlineText" }

  InlineText:
    patterns:
      - { include: "#Escape" }
      - { include: "#Raw" }
      - { include: "#Styling" }
      - { include: "#Emphasis" }
      - { include: "#PlainText" }

  Escape:
    match: (?:^(\\)({{WS}})|(?<!^)(\\)({{WS}})|(\\)(\S))
    captures:
      1:
        tag: definition(escape)
        name: constant.character.escape.sd
      2:
        tag: content
        name: markup.raw.text.sd
      3:
        tag: definition(escape)
        name: constant.character.escape.sd
      4:
        tag: content
        name: markup.raw.text.sd
      5:
        tag: definition(escape)
        name: constant.character.escape.sd
      6:
        tag: content
        name: markup.raw.text.sd

  Newline:
    tag: content
    name: markup.raw.whitespace.newline.sd
    match: (\r\n|\r|\n)

  Styling:
    patterns:
      - { include: "#Glue" }
      - { include: "#FlowMarker" }
      - { include: "#TextCommand" }
      - { include: "#Underline" }
      - { include: "#BoldItalic" }
      - { include: "#Bold" }
      - { include: "#Italic" }
      - { include: "#Centered" }

  StylingMark:
    match: (.+)
    captures:
      1:
        tag: definition(content)
        name: markup.raw.text.sd

  Raw:
    tag: content
    name: markup.inline.raw.string.sd
    match: ([`]+)(.*?)(\1|(?={{EOL}}))
    captures:
      1:
        patterns:
          - { include: "#StylingMark" }
      2:
        patterns:
          - { include: "#PlainText" }
      3:
        patterns:
          - { include: "#StylingMark" }

  BoldItalic:
    tag: strong
    name: markup.other.bold.sd
    match: ([*][*]+)([*].*?(?:[*]|$))(\1|(?={{EOL}}))
    captures:
      1:
        patterns:
          - { include: "#StylingMark" }
      2:
        patterns:
          - { include: "#Italic" }
      3:
        patterns:
          - { include: "#StylingMark" }

  Bold:
    tag: strong
    name: markup.other.bold.sd
    match: ([*][*](?![*]))(.*?)(\1|(?={{EOL}}))
    captures:
      1:
        patterns:
          - { include: "#StylingMark" }
      2:
        patterns:
          - { include: "#InlineTextAndLogic" }
      3:
        patterns:
          - { include: "#StylingMark" }

  Italic:
    tag: emphasis
    name: markup.other.italic.sd
    match: ([*](?![*]))(.*?)(\1|(?={{EOL}}))
    captures:
      1:
        patterns:
          - { include: "#StylingMark" }
      2:
        patterns:
          - { include: "#InlineTextAndLogic" }
      3:
        patterns:
          - { include: "#StylingMark" }

  Underline:
    tag: link
    name: markup.other.underline.sd
    match: ([_]+)(.*?)(\1|(?={{EOL}}))
    captures:
      1:
        patterns:
          - { include: "#StylingMark" }
      2:
        patterns:
          - { include: "#InlineTextAndLogic" }
      3:
        patterns:
          - { include: "#StylingMark" }

  Centered:
    tag: monospace
    name: constant.character.escape.centered.sd
    match: ([\^]+)(.*?)(\1|(?={{EOL}}))
    captures:
      1:
        patterns:
          - { include: "#StylingMark" }
      2:
        patterns:
          - { include: "#InlineTextAndLogic" }
      3:
        patterns:
          - { include: "#StylingMark" }

  Emphasis:
    patterns:
      - { include: "#EmphasisTilde" }
      - { include: "#EmphasisColon" }

  EmphasisTilde:
    tag: quote
    name: markup.emphasis.tilde.sd
    match: ([~][~]+)((?:(?!\1).*?)+)(\1|(?={{EOL}}))
    captures:
      1:
        patterns:
          - { include: "#StylingMark" }
      2:
        patterns:
          - { include: "#InlineTextAndLogic" }
      3:
        patterns:
          - { include: "#StylingMark" }

  EmphasisColon:
    tag: quote
    name: markup.emphasis.colon.sd
    match: ([:][:]+)((?:(?!\1).*?)+)(\1|(?={{EOL}}))
    captures:
      1:
        patterns:
          - { include: "#StylingMark" }
      2:
        patterns:
          - { include: "#InlineTextAndLogic" }
      3:
        patterns:
          - { include: "#StylingMark" }

  PlainText:
    patterns:
      - { include: "#Newline" }
      - { include: "#Space" }
      - { include: "#Word" }
      - { include: "#EmDash" }
      - { include: "#IndentingColon" }
      - { include: "#Punctuation" }

  Space:
    tag: content
    name: markup.raw.space.sd
    match: ([ ])

  Word:
    tag: content
    name: markup.raw.text.sd
    match: ({{WORD}})

  EmDash:
    tag: content
    name: markup.raw.punctuation.sd
    match: ([-][-])

  IndentingColon:
    tag: content
    name: markup.raw.text.sd
    match: ([:])(?={{EOL}})

  Punctuation:
    tag: content
    name: markup.raw.punctuation.sd
    match: (.)

  ########## Errors ##########

  IllegalExpression:
    tag: invalid
    name: invalid.illegal.illegal-expression.sd
    match: (.+)

  IllegalChar:
    tag: invalid
    name: invalid.illegal.illegal-char.sd
    match: (.)

  Unknown:
    tag: invalid
    name: invalid.illegal.unknown-statement.sd
    match: (.+$)
