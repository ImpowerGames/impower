fileTypes: [sparkdown, sd, script, project]
keyEquivalent: ^~S
name: Sparkdown
scopeName: text.source.sparkdown
uuid: E26C862D-2A5E-4F10-B0C3-D6BCB838CB7F
flags: gmu

patterns:
  - { include: "#Comment" }
  - { include: "#ExplicitAction" }
  - { include: "#FrontMatter" }
  - { include: "#Chunk" }
  - { include: "#Section" }
  - { include: "#FlowBreak" }
  - { include: "#Import" }
  - { include: "#Do" }
  - { include: "#Set" }
  - { include: "#Delete" }
  - { include: "#Function" }
  - { include: "#Define" }
  - { include: "#Conditional" }
  - { include: "#Repeat" }
  - { include: "#Jump" }
  - { include: "#Choice" }
  - { include: "#Transition" }
  - { include: "#Scene" }
  - { include: "#Dialogue" }
  - { include: "#Image" }
  - { include: "#Audio" }
  - { include: "#Centered" }
  - { include: "#BlankLine" }
  - { include: "#ImplicitAction" }
  - { include: "#Unknown" }

repository:
  Comment:
    tag: lineComment
    name: comment.line.sd
    match: ^([ \t]*)([%])($|[ \t]*)($|.*$)(\n?)
    captures:
      1:
        tag: content
        name: markup.raw.whitespace.leading.sd
      2:
        tag: definition(lineComment)
        name: punctuation.definition.comment.sd
      3:
        tag: definition(lineComment)
        name: punctuation.definition.comment.sd
      4:
        tag: content
        name: markup.raw.whitespace.newline.sd

  BlankLine:
    tag: content
    name: markup.raw.empty-line.sd
    match: ^([ \t]*$)(\n?)
    captures:
      1:
        tag: content
        name: markup.raw.whitespace.blank.sd
      2:
        tag: content
        name: markup.raw.whitespace.newline.sd

  IllegalExpression:
    tag: invalid
    name: invalid.illegal.illegal-expression.sd
    match: (.+?)

  Unknown:
    tag: invalid
    name: invalid.illegal.unknown-statement.sd
    match: (.+$)(\n?)

  End:
    match: ([ \t]*)(\b(?:end)\b)([ \t]*)
    captures:
      1:
        tag: content
        name: markup.raw.whitespace.indent.sd
      2:
        tag: controlKeyword
        name: keyword.control.end.sd
      3:
        tag: content
        name: markup.raw.whitespace.trailing.sd

  EndAhead:
    match: (?=[ \t]*\b(?:end)\b[ \t]*)

  FrontMatter:
    tag: meta
    name: meta.front-matter.sd
    begin: ^([-]{3,})($|[ \t]*$)(\n?)
    beginCaptures:
      1:
        tag: keyword
        name: keyword.other.front-matter.dashes.start.sd
      2:
        tag: content
        name: markup.raw.whitespace.trailing.sd
      3:
        tag: content
        name: markup.raw.whitespace.newline.sd
    patterns:
      - { include: "#Comment" }
      - { include: "#FrontMatterArrayItem" }
      - { include: "#FrontMatterEntry" }
    end: ^([-]{3,})($|[ \t]*$)(\n?)
    endCaptures:
      1:
        tag: keyword
        name: keyword.other.front-matter.dashes.end.sd
      2:
        tag: content
        name: markup.raw.whitespace.trailing.sd
      3:
        tag: content
        name: markup.raw.whitespace.newline.sd

  FrontMatterEntry:
    begin: ^([_$a-zA-Z][_$a-zA-Z0-9]*)($|[:])
    beginCaptures:
      1:
        tag: keyword
        name: keyword.other.front-matter.title.sd
      2:
        tag: punctuation
        name: punctuation.separator.colon.sd
    patterns:
      - { include: "#FrontMatterArrayItem" }
      - { include: "#FrontMatterString" }
    end: (?=^[_$a-zA-Z][_$a-zA-Z0-9]*[:]|[-]{3,})

  FrontMatterArrayItem:
    match: ^([ ]{2,}|[\t]+)([-])($|[ \t]+)($|.+$)(\n?)
    captures:
      1:
        tag: content
        name: markup.raw.whitespace.indent.sd
      2:
        tag: keyword
        name: keyword.operator.expression.array.sd
      3:
        tag: content
        name: markup.raw.whitespace.separator.sd
      4:
        patterns:
          - { include: "#FrontMatterString" }
      5:
        tag: content
        name: markup.raw.whitespace.newline.sd

  FrontMatterString:
    tag: string
    name: string.inline.sd
    match: ([ \t]*)(.+$)(\n?)
    captures:
      1:
        tag: content
        name: markup.raw.whitespace.indent.sd
      2:
        patterns:
          - { include: "#Inline" }
      3:
        tag: content
        name: markup.raw.whitespace.newline.sd

  ChunkSplitter:
    match: ^((?:[@])(?:$|[ \t]+)(?:$|[._a-zA-Z][._a-zA-Z0-9]*)(?:$|[ \t]*$)(?:\n?))

  Chunk:
    tag: definition(annotation)
    name: keyword.control.chunk.sd
    match: ^([@])($|[ \t]+)($|[._a-zA-Z][._a-zA-Z0-9]*)($|[ \t]*$)(\n?)
    captures:
      1:
        tag: keyword
        name: keyword.control.chunk.percent.sd
      2:
        tag: content
        name: markup.raw.whitespace.separator.sd
      3:
        tag: special(annotation)
        name: keyword.control.chunk.sd
      4:
        tag: content
        name: markup.raw.whitespace.trailing.sd
      5:
        tag: content
        name: markup.raw.whitespace.newline.sd

  Section:
    tag: definition(heading)
    name: keyword.control.section.sd
    match: ^(#+)($|[ \t]+)($|[_a-zA-Z][_a-zA-Z0-9]*)($|[ \t]*$)(\n?)
    captures:
      1:
        tag: keyword
        name: keyword.control.section.number-sign.sd
      2:
        tag: punctuation
        name: markup.raw.whitespace.separator.sd
      3:
        tag: special(heading)
        name: keyword.control.section.sd
      4:
        tag: content
        name: markup.raw.whitespace.trailing.sd
      5:
        tag: content
        name: markup.raw.whitespace.newline.sd

  FlowBreak:
    tag: meta
    name: meta.break.sd
    match: ^(===+)($|[ \t]*$)(\n?)
    captures:
      1:
        tag: contentSeparator
        name: keyword.control.flow-break.sd
      2:
        tag: content
        name: markup.raw.whitespace.trailing.sd
      3:
        tag: content
        name: markup.raw.whitespace.newline.sd

  Import:
    tag: meta
    name: meta.import.sd
    begin: ^([ \t]*)(import)($|[ \t]+)
    beginCaptures:
      1:
        tag: content
        name: markup.raw.whitespace.indent.sd
      2:
        tag: keyword
        name: keyword.control.import.sd
      3:
        tag: content
        name: markup.raw.whitespace.separator.sd
    patterns:
      - { include: "#ImportDeclaration" }
      - { include: "#IllegalExpression" }
    end: ($)

  ImportDeclaration:
    match: ([_$a-zA-Z][_$a-zA-Z0-9]*(?:\[\]){0,2})($|[ \t]+)($|[_$a-zA-Z][_$a-zA-Z0-9]*)($|[ \t]*)($|.+$)
    captures:
      1:
        tag: typeName
        name: support.type.sd
      2:
        tag: content
        name: markup.raw.whitespace.separator.sd
      3:
        patterns:
          - { include: "#VariableIdentifier" }
      4:
        tag: content
        name: markup.raw.whitespace.separator.sd
      5:
        patterns:
          - { include: "#ImportAssignment" }
          - { include: "#IllegalExpression" }

  ImportAssignment:
    match: ($|from)($|[ \t]+)($|.*$)
    captures:
      1:
        tag: keyword
        name: keyword.control.from.sd
      2:
        tag: content
        name: markup.raw.whitespace.separator.sd
      3:
        patterns:
          - { include: "#String" }
          - { include: "#IllegalExpression" }

  Define:
    tag: meta
    name: meta.definition.object.sd
    begin: ^(define)($|[ \t]+)
    beginCaptures:
      1:
        tag: controlKeyword
        name: keyword.control.definition.object.sd
      2:
        tag: content
        name: markup.raw.whitespace.separator.sd
    patterns:
      - { include: "#CSSDefinition" }
      - { include: "#StructDefinition" }
    end: ($\n)
    endCaptures:
      1:
        tag: content
        name: markup.raw.whitespace.newline.sd

  CSSDefinition:
    tag: meta
    name: meta.definition.object.css.sd
    begin: (css)($|[ \t]+)($|[_$a-zA-Z][_$a-zA-Z0-9]*)($|[ \t]*$)(\n?)
    beginCaptures:
      1:
        tag: typeName
        name: support.type.sd
      2:
        tag: content
        name: markup.raw.whitespace.separator.sd
      3:
        tag: definition(variableName)
        name: variable.other.constant.sd
      4:
        tag: content
        name: markup.raw.whitespace.trailing.sd
      5:
        tag: content
        name: markup.raw.whitespace.newline.sd
    patterns:
      - { include: "#Comment" }
      - { include: "#End" }
      - { include: "#CSS" }
    end: (?=$)

  StructDefinition:
    tag: meta
    name: meta.definition.object.struct.sd
    begin: ($|[_$a-zA-Z][_$a-zA-Z0-9]*(?:\[\]){0,2})($|[ \t]+)($|[_$a-zA-Z][_$a-zA-Z0-9]*)($|[ \t]*$)(\n?)
    beginCaptures:
      1:
        tag: typeName
        name: support.type.sd
      2:
        tag: content
        name: markup.raw.whitespace.separator.sd
      3:
        tag: definition(variableName)
        name: variable.other.constant.sd
      4:
        tag: content
        name: markup.raw.whitespace.trailing.sd
      5:
        tag: content
        name: markup.raw.whitespace.newline.sd
    patterns:
      - { include: "#Comment" }
      - { include: "#End" }
      - { include: "#ArrayItemDeclaration" }
      - { include: "#ScalarPropertyDeclaration" }
      - { include: "#MapPropertyDeclaration" }
      - { include: "#Unknown" }
    end: (?=$)

  ArrayItemDeclaration:
    begin: ^([ \t]*)([-])($|[ \t]+)
    beginCaptures:
      1:
        tag: content
        name: markup.raw.whitespace.indent.sd
      2:
        tag: keyword
        name: keyword.operator.expression.array.sd
      3:
        tag: content
        name: markup.raw.whitespace.separator.sd
    patterns:
      - { include: "#Expression" }
    end: ($\n?)
    endCaptures:
      1:
        tag: content
        name: markup.raw.whitespace.newline.sd

  ScalarPropertyDeclaration:
    begin: ^([ \t]*)(?!end[ \t]*$)([_$a-zA-Z][_$a-zA-Z0-9]*)($|[ \t]*)($|[=])
    beginCaptures:
      1:
        tag: content
        name: markup.raw.whitespace.indent.sd
      2:
        tag: variableName
        name: variable.other.property.sd
      3:
        tag: content
        name: markup.raw.whitespace.separator.sd
      4:
        tag: updateOperator
        name: keyword.operator.assignment.sd
    patterns:
      - { include: "#Expression" }
    end: ($\n?)
    endCaptures:
      1:
        tag: content
        name: markup.raw.whitespace.newline.sd

  MapPropertyDeclaration:
    match: ^([ \t]*)([_$a-zA-Z][_$a-zA-Z0-9]*)([:])(.*?(?=[ \t]*$))($|[ \t]*)(\n?)
    captures:
      1:
        tag: content
        name: markup.raw.whitespace.indent.sd
      2:
        tag: variableName
        name: variable.other.property.sd
      3:
        tag: punctuation
        name: punctuation.separator.colon.sd
      4:
        patterns:
          - { include: "#IllegalExpression" }
      5:
        tag: content
        name: markup.raw.whitespace.trailing.sd
      6:
        tag: content
        name: markup.raw.whitespace.newline.sd

  Do:
    tag: meta
    name: meta.function-call.sd
    begin: ^([ \t]*)(do)($|[ \t]+)($|[_$a-zA-Z][_$a-zA-Z0-9]*)($|[ \t]*)(?=$|[(])
    beginCaptures:
      1:
        tag: content
        name: markup.raw.whitespace.indent.sd
      2:
        tag: keyword
        name: keyword.operator.expression.do.sd
      3:
        tag: content
        name: markup.raw.whitespace.separator.sd
      4:
        tag: function(variableName)
        name: entity.name.function.sd
      5:
        tag: content
        name: markup.raw.whitespace.separator.sd
    patterns:
      - { include: "#Parameters" }
    end: ($\n?)
    endCaptures:
      1:
        tag: content
        name: markup.raw.whitespace.newline.sd

  Parameters:
    brackets: true
    begin: ([(])
    beginCaptures:
      1:
        tag: paren
        name: meta.brace.round.open.sd
    patterns:
      - { include: "#PunctuationComma" }
      - { include: "#Expression" }
    end: ([)])($|[ \t]*)(\n?)
    endCaptures:
      1:
        tag: paren
        name: meta.brace.round.close.sd
      2:
        tag: content
        name: markup.raw.whitespace.trailing.sd
      3:
        tag: content
        name: markup.raw.whitespace.newline.sd

  Set:
    tag: meta
    name: meta.var.expr.sd
    begin: ^([ \t]*)(set)($|[ \t]+)(?:([_$a-zA-Z][_$a-zA-Z0-9]*(?:\[\]){0,2})([ \t]+)(?!$))?($|[_$a-zA-Z][\[\]._$a-zA-Z0-9]*)($|[ \t]*)($|[=])
    beginCaptures:
      1:
        tag: content
        name: markup.raw.whitespace.indent.sd
      2:
        tag: keyword
        name: keyword.operator.expression.set.sd
      3:
        tag: content
        name: markup.raw.whitespace.separator.sd
      4:
        tag: typeName
        name: support.type.sd
      5:
        tag: content
        name: markup.raw.whitespace.separator.sd
      6:
        patterns:
          - { include: "#ArrayLiteral" }
          - { include: "#PropertyAccessor" }
          - { include: "#VariableIdentifier" }
      7:
        tag: content
        name: markup.raw.whitespace.separator.sd
      8:
        tag: updateOperator
        name: keyword.operator.assignment.sd
    patterns:
      - { include: "#Expression" }
    end: ($\n?)
    endCaptures:
      1:
        tag: content
        name: markup.raw.whitespace.newline.sd

  Delete:
    tag: meta
    name: meta.delete.sd
    begin: ^([ \t]*)(delete)($|[ \t]+)($|[_$a-zA-Z][_$a-zA-Z0-9]*)($|[ \t]*)($|\[)
    beginCaptures:
      1:
        tag: content
        name: markup.raw.whitespace.indent.sd
      2:
        tag: keyword
        name: keyword.operator.expression.delete.sd
      3:
        tag: content
        name: markup.raw.whitespace.separator.sd
      4:
        tag: function(variableName)
        name: entity.name.function.sd
      5:
        tag: content
        name: markup.raw.whitespace.separator.sd
      6:
        tag: brace
        name: meta.brace.square.open.sd
    patterns:
      - { include: "#Expression" }
    end: (\])($|[ \t]*$)(\n?)
    endCaptures:
      1:
        tag: brace
        name: meta.brace.square.close.sd
      2:
        tag: content
        name: markup.raw.whitespace.trailing.sd
      3:
        tag: content
        name: markup.raw.whitespace.newline.sd

  Function:
    tag: meta
    name: meta.definition.function.sd
    begin: ^([ \t]*)(function)($|[ \t]+)($|[_$a-zA-Z][_$a-zA-Z0-9]*(?:\[\]){0,2})($|[ \t]+)($|[_$a-zA-Z][_$a-zA-Z0-9]*)($|[ \t]*)(?=$|[(])
    beginCaptures:
      1:
        tag: content
        name: markup.raw.whitespace.indent.sd
      2:
        tag: keyword
        name: keyword.control.definition.function.sd
      3:
        tag: content
        name: markup.raw.whitespace.separator.sd
      4:
        tag: typeName
        name: support.type.sd
      5:
        tag: content
        name: markup.raw.whitespace.separator.sd
      6:
        tag: function(variableName)
        name: variable.other.constant.sd
      7:
        tag: content
        name: markup.raw.whitespace.trailing.sd
    patterns:
      - { include: "#End" }
      - { include: "#Parameters" }
      - { include: "#BlockStatement" }
    end: ($\n)
    endCaptures:
      1:
        tag: content
        name: markup.raw.whitespace.newline.sd

  Conditional:
    tag: meta
    name: meta.conditional.if.sd
    begin: ^([ \t]*)(if)($|[ \t]+)
    beginCaptures:
      1:
        tag: content
        name: markup.raw.whitespace.indent.sd
      2:
        tag: controlKeyword
        name: keyword.control.conditional.if.sd
      3:
        tag: content
        name: markup.raw.whitespace.separator.sd
    patterns:
      - { include: "#End" }
      - { include: "#ElseifConditional" }
      - { include: "#ElseConditional" }
      - { include: "#BlockStatement" }
      - { include: "#Condition" }
    end: ($\n)
    endCaptures:
      1:
        tag: content
        name: markup.raw.whitespace.newline.sd

  ElseifConditional:
    tag: meta
    name: meta.conditional.elseif.sd
    begin: ^([ \t]*)(elseif)($|[ \t]+)
    beginCaptures:
      1:
        tag: content
        name: markup.raw.whitespace.indent.sd
      2:
        tag: controlKeyword
        name: keyword.control.conditional.elseif.sd
      3:
        tag: content
        name: markup.raw.whitespace.separator.sd
    patterns:
      - { include: "#EndAhead" }
      - { include: "#BlockStatement" }
      - { include: "#Condition" }
    end: (?=[ \t]*\b(?:end|elseif|else)\b)

  ElseConditional:
    tag: meta
    name: meta.conditional.else.sd
    begin: ^([ \t]*)(else)($|[ \t]+)
    beginCaptures:
      1:
        tag: content
        name: markup.raw.whitespace.indent.sd
      2:
        tag: controlKeyword
        name: keyword.control.conditional.else.sd
      3:
        tag: content
        name: markup.raw.whitespace.separator.sd
    patterns:
      - { include: "#EndAhead" }
      - { include: "#BlockStatement" }
    end: (?=[ \t]*\b(?:end)\b)

  Repeat:
    tag: meta
    name: meta.repeat.sd
    begin: ^([ \t]*)(repeat)($|[ \t]+)
    beginCaptures:
      1:
        tag: content
        name: markup.raw.whitespace.indent.sd
      2:
        tag: controlKeyword
        name: keyword.control.conditional.sd
      3:
        tag: content
        name: markup.raw.whitespace.separator.sd
    patterns:
      - { include: "#End" }
      - { include: "#WhileLoop" }
      - { include: "#UntilLoop" }
      - { include: "#ForLoop" }
    end: ($\n)
    endCaptures:
      1:
        tag: content
        name: markup.raw.whitespace.newline.sd

  WhileLoop:
    tag: meta
    name: meta.repeat.while.sd
    begin: (while)($|[ \t]+)
    beginCaptures:
      1:
        tag: controlKeyword
        name: keyword.control.conditional.sd
      2:
        tag: content
        name: markup.raw.whitespace.separator.sd
    patterns:
      - { include: "#BlockStatement" }
      - { include: "#Condition" }
    end: (?=[ \t]*\b(?:end|else)\b)

  UntilLoop:
    tag: meta
    name: meta.repeat.until.sd
    begin: (until)($|[ \t]+)
    beginCaptures:
      1:
        tag: controlKeyword
        name: keyword.control.conditional.sd
      2:
        tag: content
        name: markup.raw.whitespace.separator.sd
    patterns:
      - { include: "#BlockStatement" }
      - { include: "#Condition" }
    end: (?=[ \t]*\b(?:end|else)\b)

  ForLoop:
    tag: meta
    name: meta.repeat.for.sd
    begin: (for)($|[ \t]+)
    beginCaptures:
      1:
        tag: controlKeyword
        name: keyword.control.conditional.sd
      2:
        tag: content
        name: markup.raw.whitespace.separator.sd
    patterns:
      - { include: "#BlockStatement" }
      - { include: "#Condition" }
    end: (?=[ \t]*\b(?:end)\b)

  Condition:
    emit: true
    patterns:
      - { include: "#ParentheticalExpression" }
      - { include: "#NonParentheticalExpression" }

  ParentheticalExpression:
    brackets: true
    begin: ([(])
    beginCaptures:
      1:
        tag: paren
        name: meta.brace.round.open.sd
    patterns:
      - { include: "#Expression" }
    end: ([)])($|[ \t]*$)(\n?)
    endCaptures:
      1:
        tag: paren
        name: meta.brace.round.close.sd
      2:
        tag: content
        name: markup.raw.whitespace.trailing.sd
      3:
        tag: content
        name: markup.raw.whitespace.newline.sd

  NonParentheticalExpression:
    match: (.+$)(\n?)
    captures:
      1:
        patterns:
          - { include: "#Expression" }
      2:
        tag: content
        name: markup.raw.whitespace.newline.sd

  BlockStatement:
    emit: true
    patterns:
      - { include: "#Comment" }
      - { include: "#Do" }
      - { include: "#Set" }
      - { include: "#Delete" }
      - { include: "#Conditional" }
      - { include: "#Repeat" }
      - { include: "#Image" }
      - { include: "#Audio" }
      - { include: "#Jump" }

  Jump:
    tag: meta
    name: meta.jump.sd
    match: ^([ \t]*)(?=[-][>])(.+$)(\n?)
    captures:
      1:
        tag: content
        name: markup.raw.whitespace.indent.sd
      2:
        patterns:
          - { include: "#JumpTo" }
      3:
        tag: content
        name: markup.raw.whitespace.newline.sd

  JumpTo:
    match: ([-][>])($|[ \t]+)($|[_$a-zA-Z][_$a-zA-Z0-9]*|[{][^}]*[}]|[<][<][-][-]|[<][<]|[>][>]|[-][-]|[+][+]|\^)($|[ \t]*$)
    captures:
      1:
        tag: function(variableName)
        name: entity.name.function.jump.sd
      2:
        tag: content
        name: markup.raw.whitespace.separator.sd
      3:
        tag: heading
        name: keyword.control.jump.name.sd
      4:
        tag: content
        name: markup.raw.whitespace.trailing.sd

  Choice:
    name: entity.choice.sd
    match: ^([ \t]*)([+])($|[ \t]+)(?:([_$a-zA-Z][_$a-zA-Z0-9]*)([ \t]*)([?][:])($|[ \t]+))?($|.*?)($|[-][>].+$)(\n?)
    captures:
      1:
        tag: content
        name: markup.raw.whitespace.indent.sd
      2:
        tag: list
        name: keyword.operator.expression.list.sd
      3:
        tag: content
        name: markup.raw.whitespace.separator.sd
      4:
        tag: definition(variableName)
        name: variable.other.constant.sd
      5:
        tag: content
        name: markup.raw.whitespace.separator.sd
      6:
        tag: keyword
        name: keyword.operator.expression.prerequisite.sd
      7:
        tag: content
        name: markup.raw.whitespace.separator.sd
      8:
        patterns:
          - { include: "#ChoiceText" }
      9:
        patterns:
          - { include: "#JumpTo" }
      10:
        tag: content
        name: markup.raw.whitespace.newline.sd

  ChoiceText:
    tag: string
    name: string.choice.sd
    match: (.+)
    captures:
      1:
        patterns:
          - { include: "#DisplayText" }

  Transition:
    match: ^([ \t]*)((?:[^ \p{Ll}]+\b[ \t]+){0,2}(?:TO[:]|TO BLACK[:.]|FADE OUT[:.]|FADE IN[:.]))($|[ \t]*$)(\n?)
    captures:
      1:
        tag: content
        name: markup.raw.whitespace.indent.sd
      2:
        tag: labelName
        name: keyword.control.transition.sd
      3:
        tag: content
        name: markup.raw.whitespace.separator.sd
      4:
        tag: content
        name: markup.raw.whitespace.newline.sd

  Scene:
    tag: regexp
    name: string.regexp.scene.sd
    match: ^([ \t]*)(?:([.](?![.]|[ \t]+))|(INT[.]?[\/]EXT[.]|INT[.]|EXT[.])($|[ \t]+))($|.*?)($|[ \t]*$)(\n?)
    captures:
      1:
        tag: content
        name: markup.raw.whitespace.indent.sd
      2:
        tag: punctuation
        name: punctuation.scene.dot.sd
      3:
        tag: regexp
        name: string.regexp.scene.environment.sd
      4:
        tag: content
        name: markup.raw.whitespace.separator.sd
      5:
        tag: regexp
        name: string.regexp.scene.details.sd
      6:
        tag: content
        name: markup.raw.whitespace.trailing.sd
      7:
        tag: content
        name: markup.raw.whitespace.newline.sd

  Dialogue:
    name: entity.dialogue.sd
    begin: ^([ \t]*)([\p{Lu}][^\p{Ll})(^%]+[\p{Lu}?])($|[ \t]*)([(][^)]*(?:$|[)]))?($|[ \t]*)(\^)?($|[ \t]*$)(\n?)
    beginCaptures:
      1:
        tag: content
        name: markup.raw.whitespace.indent.sd
      2:
        tag: typeName
        name: entity.name.type.dialogue.character.name.sd
      3:
        tag: content
        name: markup.raw.whitespace.separator.sd
      4:
        tag: escape
        name: constant.character.escape.dialogue.character.parenthetical.sd
      5:
        tag: content
        name: markup.raw.whitespace.separator.sd
      6:
        tag: escape
        name: constant.character.escape.dialogue.character.simultaneous.sd
      7:
        tag: content
        name: markup.raw.whitespace.separator.sd
      8:
        tag: content
        name: markup.raw.whitespace.newline.sd
    patterns:
      - { include: "#DialogueBox" }
    end: (^$\n)
    endCaptures:
      1:
        tag: content
        name: markup.raw.whitespace.end.sd
      2:
        tag: content
        name: markup.raw.whitespace.newline.sd

  DialogueBox:
    name: entity.dialogue.box.sd
    begin: (?=.+$)
    patterns:
      - { include: "#Comment" }
      - { include: "#Image" }
      - { include: "#Audio" }
      - { include: "#Choice" }
      - { include: "#Parenthetical" }
      - { include: "#DialogueLineContinue" }
      - { include: "#DialogueLineEnd" }
    end: (^$|$\n)
    endCaptures:
      1:
        tag: content
        name: markup.raw.whitespace.newline.sd

  DialogueLineContinue:
    tag: string
    name: string.dialogue.line.continue.sd
    match: ^([ \t]*)(.+[ \t]$)(\n?)
    captures:
      1:
        tag: content
        name: markup.raw.whitespace.indent.sd
      2:
        patterns:
          - { include: "#BoxText" }
      3:
        tag: content
        name: markup.raw.whitespace.newline.sd

  DialogueLineEnd:
    tag: string
    name: string.dialogue.line.end.sd
    match: ^([ \t]*)(.+$) # Don't consume (\n?) so that DialogueBox end can consume it instead
    captures:
      1:
        tag: content
        name: markup.raw.whitespace.indent.sd
      2:
        patterns:
          - { include: "#BoxText" }

  Parenthetical:
    tag: tagName
    name: constant.character.escape.sd
    match: ^([ \t]*)([(])([^)(]*)([)])($|[ \t]*$)(\n?)
    captures:
      1:
        tag: content
        name: markup.raw.whitespace.indent.sd
      2:
        tag: escape
        name: constant.character.escape.sd
      3:
        tag: escape
        name: constant.character.escape.sd
      4:
        tag: escape
        name: constant.character.escape.sd
      5:
        tag: content
        name: markup.raw.whitespace.trailing.sd
      6:
        tag: content
        name: markup.raw.whitespace.newline.sd

  Image:
    tag: macroName
    name: meta.image.sd
    match: ^([ \t]*)(\[\[)([^\]]*)(\]\])($|[ \t]*$)(\n?)
    captures:
      1:
        tag: content
        name: markup.raw.whitespace.indent.sd
      2:
        tag: definition(macroName)
        name: punctuation.definition.template-expression.begin.image.sd
      3:
        tag: macroName
        name: variable.other.constant.image.sd
      4:
        tag: definition(macroName)
        name: punctuation.definition.template-expression.end.image.sd
      5:
        tag: content
        name: markup.raw.whitespace.trailing.sd
      6:
        tag: content
        name: markup.raw.whitespace.newline.sd

  Audio:
    tag: macroName
    name: meta.audio.sd
    match: ^([ \t]*)([(][(])([^)]*)([)][)])($|[ \t]*$)(\n?)
    captures:
      1:
        tag: content
        name: markup.raw.whitespace.indent.sd
      2:
        tag: definition(macroName)
        name: punctuation.definition.template-expression.begin.audio.sd
      3:
        tag: macroName
        name: variable.other.constant.audio.sd
      4:
        tag: definition(macroName)
        name: punctuation.definition.template-expression.end.audio.sd
      5:
        tag: content
        name: markup.raw.whitespace.trailing.sd
      6:
        tag: content
        name: markup.raw.whitespace.newline.sd

  InlineImage:
    tag: macroName
    name: meta.image.sd
    match: (\[\[)([^\]]*)(\]\])
    captures:
      1:
        tag: definition(macroName)
        name: punctuation.definition.template-expression.begin.image.sd
      2:
        tag: macroName
        name: variable.other.constant.image.sd
      3:
        tag: definition(macroName)
        name: punctuation.definition.template-expression.end.image.sd

  InlineAudio:
    tag: macroName
    name: meta.audio.sd
    match: ([(][(])([^)]*)([)][)])
    captures:
      1:
        tag: definition(macroName)
        name: punctuation.definition.template-expression.begin.audio.sd
      2:
        tag: macroName
        name: variable.other.constant.audio.sd
      3:
        tag: definition(macroName)
        name: punctuation.definition.template-expression.end.audio.sd

  Centered:
    tag: monospace
    name: entity.centered.sd
    match: ^([ \t]*)([|])([ \t]*)((?:(?![ \t]+[|]).)*)([ \t]*)([|])($|[ \t]*$)(\n?)
    captures:
      1:
        tag: content
        name: markup.raw.whitespace.indent.sd
      2:
        tag: bracket
        name: markup.other.centered.bar-left.sd
      3:
        tag: bracket
        name: markup.raw.whitespace.prefix.sd
      4:
        tag: special(monospace)
        name: markup.other.centered.content.sd
        patterns:
          - { include: "#Inline" }
      5:
        tag: bracket
        name: markup.raw.whitespace.suffix.sd
      6:
        tag: bracket
        name: markup.other.centered.bar-right.sd
      7:
        tag: content
        name: markup.raw.whitespace.separator.sd
      8:
        tag: content
        name: markup.raw.whitespace.newline.sd

  ExplicitAction:
    tag: content
    name: entity.paragraph.text.action.explicit.sd
    begin: ^([ \t]*)([!])(?=.+$)
    beginCaptures:
      1:
        tag: content
        name: markup.raw.whitespace.indent.sd
      2:
        tag: keyword
        name: keyword.operator.expression.action.explicit.sd
    patterns:
      - { include: "#ActionBox" }
    end: (^$\n)
    endCaptures:
      1:
        tag: content
        name: markup.raw.whitespace.end.sd
      2:
        tag: content
        name: markup.raw.whitespace.newline.sd

  ImplicitAction:
    tag: content
    name: entity.paragraph.text.action.implicit.sd
    begin: ^(?=.+$)
    patterns:
      - { include: "#ActionBox" }
    end: (^$\n)
    endCaptures:
      1:
        tag: content
        name: markup.raw.whitespace.end.sd
      2:
        tag: content
        name: markup.raw.whitespace.newline.sd

  ActionBox:
    name: entity.action.box.sd
    begin: (?=.+$)
    patterns:
      - { include: "#Comment" }
      - { include: "#Image" }
      - { include: "#Audio" }
      - { include: "#Choice" }
      - { include: "#ActionLineContinue" }
      - { include: "#ActionLineEnd" }
    end: (^$|$\n)
    endCaptures:
      1:
        tag: content
        name: markup.raw.whitespace.newline.sd

  ActionLineContinue:
    tag: content
    name: markup.raw.action.line.continue.sd
    match: ([ \t]*)(.+[ \t]$)(\n?)
    captures:
      1:
        tag: content
        name: markup.raw.whitespace.indent.sd
      2:
        patterns:
          - { include: "#BoxText" }
      3:
        tag: content
        name: markup.raw.whitespace.newline.sd

  ActionLineEnd:
    tag: content
    name: markup.raw.action.line.end.sd
    match: ([ \t]*)(.+$) # Don't consume (\n?) so that ActionBox end can consume it instead
    captures:
      1:
        tag: content
        name: markup.raw.whitespace.indent.sd
      2:
        patterns:
          - { include: "#BoxText" }

  BoxText:
    name: entity.box.text.sd
    match: (?:([*])([ \t]+)([_$a-zA-Z][_$a-zA-Z0-9]*)([ \t]*)([?][:])($|[ \t]+))?($|.+$)
    captures:
      1:
        tag: keyword
        name: keyword.operator.expression.action.line.sd
      2:
        tag: content
        name: markup.raw.whitespace.separator.sd
      3:
        tag: definition(variableName)
        name: variable.other.constant.sd
      4:
        tag: content
        name: markup.raw.whitespace.separator.sd
      5:
        tag: keyword
        name: keyword.operator.expression.prerequisite.sd
      6:
        tag: content
        name: markup.raw.whitespace.separator.sd
      7:
        patterns:
          - { include: "#DisplayText" }

  DisplayText:
    name: entity.display.sd
    match: (?:([-])($|[ \t]+))?($|.+$)
    captures:
      1:
        tag: variableName
        name: variable.other.property.ephemeral.sd
      2:
        tag: content
        name: markup.raw.whitespace.separator.sd
      3:
        patterns:
          - { include: "#Inline" }

  # Markdown (inline subset)

  Inline:
    patterns:
      - { include: "#Escape" }
      - { include: "#TemplateSubstitutionElement" }
      - { include: "#InlineImage" }
      - { include: "#InlineAudio" }
      - { include: "#Underline" }
      - { include: "#Bold" }
      - { include: "#Italic" }
      - { include: "#Emphasis" }
      - { include: "#Raw" }
      - { include: "#PlainText"}

  PlainText:
    patterns:
      - { include: "#Pause" }
      - { include: "#Space" }
      - { include: "#Word" }
      - { include: "#Punctuation" }
  
  Word:
    tag: content
    name: markup.raw.text.sd
    match: ([\p{L}']+)
    
  Space:
    tag: content
    name: markup.raw.space.sd
    match: ([ \t])

  Punctuation:
    tag: content
    name: markup.raw.punctuation.sd
    match: (.)

  Pause:
    tag: special(content)
    name: markup.raw.whitespace.pause.sd
    match: (?=[ ][ ])[ ]+|[ ]+$

  Escape:
    tag: escape
    name: constant.character.escape.sd
    match: \\[-`*_#+.!(){}\[\]\\>]

  Bold:
    tag: strong
    name: markup.bold.sd
    match: ([*][*])(.+)(\1)
    captures:
      1:
        tag: bracket
        name: punctuation.definition.bold.sd
      2:
        patterns:
          - { include: "#Escape" }
          - { include: "#Raw" }
          - { include: "#Underline" }
          - { include: "#Italic" }
          - { include: "#Emphasis" }
          - { include: "#PlainText"}
      3:
        tag: bracket
        name: punctuation.definition.bold.sd

  Italic:
    tag: emphasis
    name: markup.italic.sd
    match: ([*])(.+)(\1)
    captures:
      1:
        tag: bracket
        name: punctuation.definition.italic.sd
      2:
        patterns:
          - { include: "#Escape" }
          - { include: "#Raw" }
          - { include: "#Underline" }
          - { include: "#Emphasis" }
          - { include: "#PlainText"}
      3:
        tag: bracket
        name: punctuation.definition.italic.sd

  Underline:
    tag: link
    name: markup.underline.sd
    match: ([_]+)(.+)(\1)
    captures:
      1:
        tag: bracket
        name: punctuation.definition.underline.sd
      2:
        patterns:
          - { include: "#Escape" }
          - { include: "#Raw" }
          - { include: "#Bold" }
          - { include: "#Italic" }
          - { include: "#Emphasis" }
          - { include: "#PlainText"}
      3:
        tag: bracket
        name: punctuation.definition.underline.sd

  Emphasis:
    patterns:
      - { include: "#EmphasisCaret" }
      - { include: "#EmphasisTilde" }
      - { include: "#EmphasisEqual" }
      - { include: "#EmphasisForwardSlash" }
      - { include: "#EmphasisBackSlash" }
      - { include: "#EmphasisPipe" }

  EmphasisCaret:
    tag: emphasis
    name: markup.emphasis.sd
    match: ([\^]+)([^\^]+)(\1)
    captures:
      1:
        tag: bracket
        name: punctuation.definition.emphasis.sd
      2:
        patterns:
          - { include: "#Escape" }
          - { include: "#Raw" }
          - { include: "#Underline" }
          - { include: "#Bold" }
          - { include: "#Italic" }
          - { include: "#Emphasis" }
          - { include: "#PlainText"}
      3:
        tag: bracket
        name: punctuation.definition.emphasis.sd

  EmphasisTilde:
    tag: emphasis
    name: markup.emphasis.sd
    match: ([~][~]+)((?:(?![~][~][ \t]+).)*)(\1)
    captures:
      1:
        tag: bracket
        name: punctuation.definition.emphasis.sd
      2:
        patterns:
          - { include: "#Escape" }
          - { include: "#Raw" }
          - { include: "#Underline" }
          - { include: "#Bold" }
          - { include: "#Italic" }
          - { include: "#Emphasis" }
          - { include: "#PlainText"}
      3:
        tag: bracket
        name: punctuation.definition.emphasis.sd

  EmphasisEqual:
    tag: emphasis
    name: markup.emphasis.sd
    match: ([=][=]+)((?:(?![=][=][ \t]+).)*)(\1)
    captures:
      1:
        tag: bracket
        name: punctuation.definition.emphasis.sd
      2:
        patterns:
          - { include: "#Escape" }
          - { include: "#Raw" }
          - { include: "#Underline" }
          - { include: "#Bold" }
          - { include: "#Italic" }
          - { include: "#Emphasis" }
          - { include: "#PlainText"}
      3:
        tag: bracket
        name: punctuation.definition.emphasis.sd

  EmphasisForwardSlash:
    tag: emphasis
    name: markup.emphasis.sd
    match: ([/][/]+)((?:(?![/][/][ \t]+).)*)(\1)
    captures:
      1:
        tag: bracket
        name: punctuation.definition.emphasis.sd
      2:
        patterns:
          - { include: "#Escape" }
          - { include: "#Raw" }
          - { include: "#Underline" }
          - { include: "#Bold" }
          - { include: "#Italic" }
          - { include: "#Emphasis" }
          - { include: "#PlainText"}
      3:
        tag: bracket
        name: punctuation.definition.emphasis.sd

  EmphasisBackSlash:
    tag: emphasis
    name: markup.emphasis.sd
    match: ([\\][\\]+)((?:(?![\\][\\][ \t]+).)*)(\1)
    captures:
      1:
        tag: bracket
        name: punctuation.definition.emphasis.sd
      2:
        patterns:
          - { include: "#Escape" }
          - { include: "#Raw" }
          - { include: "#Underline" }
          - { include: "#Bold" }
          - { include: "#Italic" }
          - { include: "#Emphasis" }
          - { include: "#PlainText"}
      3:
        tag: bracket
        name: punctuation.definition.emphasis.sd

  EmphasisPipe:
    tag: emphasis
    name: markup.emphasis.sd
    match: ([|][|]+)((?:(?![|][|][ \t]+).)*)(\1)
    captures:
      1:
        tag: bracket
        name: punctuation.definition.emphasis.sd
      2:
        patterns:
          - { include: "#Escape" }
          - { include: "#Raw" }
          - { include: "#Underline" }
          - { include: "#Bold" }
          - { include: "#Italic" }
          - { include: "#Emphasis" }
          - { include: "#PlainText"}
      3:
        tag: bracket
        name: punctuation.definition.emphasis.sd

  Raw:
    tag: monospace
    name: markup.inline.raw.string.sd
    match: ([`])([^`]+)([`])
    captures:
      1:
        tag: punctuation
        name: punctuation.definition.raw.sd
      3:
        tag: punctuation
        name: punctuation.definition.raw.sd

  # TypeScript (expression subset)

  Expression:
    patterns:
      - { include: "#String" }
      - { include: "#ExpressionOperators" }
      - { include: "#NumericLiteral" }
      - { include: "#BooleanLiteral" }
      - { include: "#NullLiteral" }
      - { include: "#UndefinedLiteral" }
      - { include: "#NumericConstantLiteral" }
      - { include: "#Whitespace" }
      - { include: "#ArrayLiteral" }
      - { include: "#ParenExpression" }
      - { include: "#PropertyAccessor" }
      - { include: "#VariableIdentifier" }
      - { include: "#ExpressionPunctuations" }

  Whitespace:
    tag: content
    name: markup.raw.whitespace.sd
    match: ([ \t]+)

  String:
    patterns:
      - { include: "#QStringSingle" }
      - { include: "#QStringDouble" }
      - { include: "#Template" }

  QStringDouble:
    tag: string
    name: string.quoted.double.sd
    begin: (["])
    beginCaptures:
      1:
        tag: string
        name: punctuation.definition.string.begin.sd
    patterns:
      - { include: "#Color" }
    end: (["])|($)
    endCaptures:
      1:
        tag: string
        name: punctuation.definition.string.end.sd
      2:
        tag: invalid
        name: invalid.illegal.newline.sd

  QStringSingle:
    tag: string
    name: string.quoted.single.sd
    begin: (['])
    beginCaptures:
      1:
        tag: string
        name: punctuation.definition.string.begin.sd
    patterns:
      - { include: "#Color" }
    end: (['])|($)
    endCaptures:
      1:
        tag: string
        name: punctuation.definition.string.end.sd
      2:
        tag: invalid
        name: invalid.illegal.newline.sd

  ExpressionOperators:
    patterns:
      - { include: "#AwaitOperator" }
      - { include: "#YieldOperator" }
      - { include: "#YieldIteratorOperator" }
      - { include: "#DeleteOperator" }
      - { include: "#InOperator" }
      - { include: "#OfOperator" }
      - { include: "#InstanceOfOperator" }
      - { include: "#NewOperator" }
      - { include: "#VoidOperator" }
      - { include: "#AsOperator" }
      - { include: "#SpreadOperator" }
      - { include: "#AssignArithmeticOperator" }
      - { include: "#AssignBitwiseOperator" }
      - { include: "#BitwiseShiftOperator" }
      - { include: "#CompareEqualOperator" }
      - { include: "#CompareRelativeOperator" }
      - { include: "#NegateOperator" }
      - { include: "#LogicalOperator" }
      - { include: "#BitwiseOperator" }
      - { include: "#AssignEqualOperator" }
      - { include: "#DecrementOperator" }
      - { include: "#IncrementOperator" }
      - { include: "#ArithmeticOperator" }
      - { include: "#AssignMultiplyOperator" }
      - { include: "#AssignDivideOperator" }

  AwaitOperator:
    tag: controlKeyword
    name: keyword.control.flow.sd
    match: (?<![_$a-zA-Z0-9])(?:(?<=[.][.][.])|(?<![.]))(await)(?![_$a-zA-Z0-9])(?:(?=[.][.][.])|(?![.]))

  YieldOperator:
    begin: (?<![_$a-zA-Z0-9])(?:(?<=[.][.][.])|(?<![.]))(yield)(?![_$a-zA-Z0-9])(?:(?=[.][.][.])|(?![.]))(?=\s*\/[*]([^*]|([*][^\/]))*[*]\/\s*[*])
    beginCaptures:
      1:
        tag: controlKeyword
        name: keyword.control.flow.sd
    end: ([*])
    endCaptures:
      1:
        tag: controlKeyword
        name: keyword.generator.asterisk.sd

  YieldIteratorOperator:
    match: (?<![_$a-zA-Z0-9])(?:(?<=[.][.][.])|(?<![.]))(yield)(?![_$a-zA-Z0-9])(?:(?=[.][.][.])|(?![.]))(?:\s*([*]))?
    captures:
      1:
        tag: controlKeyword
        name: keyword.control.flow.sd
      2:
        tag: controlKeyword
        name: keyword.generator.asterisk.sd

  DeleteOperator:
    tag: operatorKeyword
    name: keyword.operator.expression.delete.sd
    match: (?<![_$a-zA-Z0-9])(?:(?<=[.][.][.])|(?<![.]))delete(?![_$a-zA-Z0-9])(?:(?=[.][.][.])|(?![.]))

  InOperator:
    tag: operatorKeyword
    name: keyword.operator.expression.in.sd
    match: (?<![_$a-zA-Z0-9])(?:(?<=[.][.][.])|(?<![.]))in(?![_$a-zA-Z0-9])(?:(?=[.][.][.])|(?![.]))(?!\()

  OfOperator:
    tag: operatorKeyword
    name: keyword.operator.expression.of.sd
    match: (?<![_$a-zA-Z0-9])(?:(?<=[.][.][.])|(?<![.]))of(?![_$a-zA-Z0-9])(?:(?=[.][.][.])|(?![.]))(?!\()

  InstanceOfOperator:
    tag: operatorKeyword
    name: keyword.operator.expression.instanceof.sd
    match: (?<![_$a-zA-Z0-9])(?:(?<=[.][.][.])|(?<![.]))instanceof(?![_$a-zA-Z0-9])(?:(?=[.][.][.])|(?![.]))

  NewOperator:
    tag: operatorKeyword
    name: keyword.operator.new.sd
    match: (?<![_$a-zA-Z0-9])(?:(?<=[.][.][.])|(?<![.]))new(?![_$a-zA-Z0-9])(?:(?=[.][.][.])|(?![.]))

  VoidOperator:
    tag: operatorKeyword
    name: keyword.operator.expression.void.sd
    match: (?<![_$a-zA-Z0-9])(?:(?<=[.][.][.])|(?<![.]))void(?![_$a-zA-Z0-9])(?:(?=[.][.][.])|(?![.]))

  AsOperator:
    match: (?<![_$a-zA-Z0-9])(?:(?<=[.][.][.])|(?<![.]))(as)\s+(const)(?=\s*($|[;,:})\]]))
    captures:
      1:
        tag: controlKeyword
        name: keyword.control.as.sd
      2:
        tag: controlKeyword
        name: storage.modifier.sd

  SpreadOperator:
    tag: derefOperator
    name: keyword.operator.spread.sd
    match: ([.][.][.])

  AssignArithmeticOperator:
    tag: updateOperator
    name: keyword.operator.assignment.compound.sd
    match: ([*][=]|(?<!\()[/][=]|[%][=]|[+][=]|[-][=])

  AssignBitwiseOperator:
    tag: updateOperator
    name: keyword.operator.assignment.compound.bitwise.sd
    match: ([&][=]|[\^][=]|[<][<][=]|[>][>][=]|[>][>][>][=]|[|][=])

  BitwiseShiftOperator:
    tag: updateOperator
    name: keyword.operator.bitwise.shift.sd
    match: ([<][<]|[>][>][>]|[>][>])

  CompareEqualOperator:
    tag: compareOperator
    name: keyword.operator.comparison.sd
    match: ([=][=][=]|[!][=][=]|[=][=]|[!][=])

  CompareRelativeOperator:
    tag: compareOperator
    name: keyword.operator.relational.sd
    match: ([<][=]|[>][=]|[<][>]|[<]|[>])

  NegateOperator:
    tag: updateOperator
    match: (?<=[_$a-zA-Z0-9])([!])\s*(?:([/][=])|(?:([/])(?![/*])))
    captures:
      1:
        tag: logicOperator
        name: keyword.operator.logical.sd
      2:
        tag: updateOperator
        name: keyword.operator.assignment.compound.sd
      3:
        tag: arithmeticOperator
        name: keyword.operator.arithmetic.sd

  LogicalOperator:
    tag: logicOperator
    name: keyword.operator.logical.sd
    match: ([!]|[&][&]|[|][|]|[?][?])

  BitwiseOperator:
    tag: bitwiseOperator
    name: keyword.operator.bitwise.sd
    match: ([&]|[~]|[\^]|[|])

  AssignEqualOperator:
    tag: updateOperator
    name: keyword.operator.assignment.sd
    match: ([=])

  DecrementOperator:
    tag: updateOperator
    name: keyword.operator.decrement.sd
    match: ([-][-])

  IncrementOperator:
    tag: updateOperator
    name: keyword.operator.increment.sd
    match: ([+][+])

  ArithmeticOperator:
    tag: arithmeticOperator
    name: keyword.operator.arithmetic.sd
    match: ([%]|[*]|[/]|[-]|[+])

  AssignMultiplyOperator:
    begin: (?<=[_$a-zA-Z0-9)\]])\s*(?=(\/[*]([^*]|([*][^\/]))*[*]\/\s*)+(?:(/=)|(?:(/)(?![/*]))))
    end: (?:(/=)|(?:(/)(?![*]([^*]|([*][^\/]))*[*][/])))
    endCaptures:
      1:
        tag: updateOperator
        name: keyword.operator.assignment.compound.sd
      2:
        tag: arithmeticOperator
        name: keyword.operator.arithmetic.sd

  AssignDivideOperator:
    match: (?<=[_$a-zA-Z0-9)\]])([\s]*)([/][=]|([/])(?![/*]))
    captures:
      2:
        tag: arithmeticOperator
        name: keyword.operator.arithmetic.sd

  NumericLiteral:
    patterns:
      - { include: "#HexNumber" }
      - { include: "#BinaryNumber" }
      - { include: "#OctalNumber" }
      - { include: "#DecimalNumber" }

  HexNumber:
    tag: number
    name: constant.numeric.hex.sd
    match: (\b(?<![$])0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(?:n)?\b(?![$]))
    captures:
      1:
        tag: number
        name: storage.type.numeric.bigint.sd

  BinaryNumber:
    tag: number
    name: constant.numeric.binary.sd
    match: (\b(?<![$])0(?:b|B)[01][01_]*(?:n)?\b(?![$]))
    captures:
      1:
        tag: number
        name: storage.type.numeric.bigint.sd

  OctalNumber:
    tag: number
    name: constant.numeric.octal.sd
    match: (\b(?<![$])0(?:o|O)?[0-7][0-7_]*(?:n)?\b(?![$]))
    captures:
      1:
        tag: number
        name: storage.type.numeric.bigint.sd

  DecimalNumber:
    tag: number
    name: constant.numeric.decimal.sd
    # match: 1.1E+3|1.E+3|.1E+3|1E+3|1.1|1.|.1|1
    match: ((?<![$])(?:(?:\b[0-9][0-9_]*[.][0-9][0-9_]*[eE][+-]?[0-9][0-9_]*[n]?\b)|(?:\b[0-9][0-9_]*[.][eE][+-]?[0-9][0-9_]*[n]?\b)|(?:\B[.][0-9][0-9_]*[eE][+-]?[0-9][0-9_]*[n]?\b)|(?:\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*[n]?\b)|(?:\b[0-9][0-9_]*[.][0-9][0-9_]*[n]?\b)|(?:\b[0-9][0-9_]*[.][n]?\B)|(?:\B[.][0-9][0-9_]*[n]?\b)|(?:\b[0-9][0-9_]*[n]?\b(?![.])))(?![$]))

  BooleanLiteral:
    patterns:
      - { include: "#BooleanTrue" }
      - { include: "#BooleanFalse" }

  BooleanTrue:
    tag: bool
    name: constant.language.boolean.true.sd
    match: (?<![_$a-zA-Z0-9])(?:(?<=[.][.][.])|(?<![.]))true(?![_$a-zA-Z0-9])(?:(?=[.][.][.])|(?![.]))

  BooleanFalse:
    tag: bool
    name: constant.language.boolean.false.sd
    match: (?<![_$a-zA-Z0-9])(?:(?<=[.][.][.])|(?<![.]))false(?![_$a-zA-Z0-9])(?:(?=[.][.][.])|(?![.]))

  NullLiteral:
    tag: "null"
    name: constant.language.null.sd
    match: (?<![_$a-zA-Z0-9])(?:(?<=[.][.][.])|(?<![.]))null(?![_$a-zA-Z0-9])(?:(?=[.][.][.])|(?![.]))

  UndefinedLiteral:
    tag: "null"
    name: constant.language.undefined.sd
    match: (?<![_$a-zA-Z0-9])(?:(?<=[.][.][.])|(?<![.]))undefined(?![_$a-zA-Z0-9])(?:(?=[.][.][.])|(?![.]))

  NumericConstantLiteral:
    patterns:
      - { include: "#NaN" }
      - { include: "#Infinity" }

  NaN:
    tag: atom
    name: constant.language.nan.sd
    match: (?<![_$a-zA-Z0-9])(?:(?<=[.][.][.])|(?<![.]))NaN(?![_$a-zA-Z0-9])(?:(?=[.][.][.])|(?![.]))

  Infinity:
    tag: atom
    name: constant.language.infinity.sd
    match: (?<![_$a-zA-Z0-9])(?:(?<=[.][.][.])|(?<![.]))Infinity(?![_$a-zA-Z0-9])(?:(?=[.][.][.])|(?![.]))

  ArrayLiteral:
    name: meta.array.literal.sd
    brackets: true
    begin: (\[)
    beginCaptures:
      1:
        tag: brace
        name: meta.brace.square.open.sd
    patterns:
      - { include: "#Expression" }
      - { include: "#PunctuationComma" }
    end: (\])
    endCaptures:
      1:
        tag: brace
        name: meta.brace.square.close.sd

  PunctuationComma:
    tag: punctuation
    name: punctuation.separator.comma.sd
    match: ","

  ParenExpression:
    brackets: true
    begin: ([(])
    beginCaptures:
      1:
        tag: paren
        name: meta.brace.round.open.sd
    patterns:
      - { include: "#Expression" }
    end: ([)])
    endCaptures:
      1:
        tag: paren
        name: meta.brace.round.close.sd

  PropertyAccessor:
    match: ([.]|\?[.](?!\s*[0-9]))(\s*)([#]?[a-zA-Z][_$0-9a-zA-Z]*)(?![_$a-zA-Z0-9])
    captures:
      1:
        tag: content
        name: punctuation.accessor.sd
      3:
        tag: variableName
        name: variable.other.property.sd

  VariableIdentifier:
    tag: variableName
    name: variable.other.constant.sd
    match: ([_$a-zA-Z][_$a-zA-Z0-9]*)

  ExpressionPunctuations:
    patterns:
      - { include: "#PunctuationComma" }
      - { include: "#PunctuationAccessor" }

  PunctuationAccessor:
    match: (?:([.])|(\?[.](?!\s*[0-9])))
    captures:
      1:
        tag: punctuation
        name: punctuation.accessor.sd
      2:
        tag: punctuation
        name: punctuation.accessor.optional.sd

  Template:
    patterns:
      - { include: "#TemplateSubstitution" }

  TemplateSubstitution:
    name: string.template.ts
    begin: ([_$a-zA-Z][_$a-zA-Z0-9]*)?([`])
    beginCaptures:
      1:
        tag: tagName
        name: entity.name.function.tagged-template.sd
      2:
        tag: string
        name: punctuation.definition.string.template.begin.sd
    patterns:
      - { include: "#Color" }
      - { include: "#TemplateSubstitutionElement" }
      - { include: "#StringCharacterEscape" }
      - { include: "#StringContent" }
    end: ([`])
    endCaptures:
      1:
        tag: string
        name: punctuation.definition.string.template.end.sd

  TemplateSubstitutionElement:
    brackets: true
    name: meta.template.expression.sd
    begin: ([$]?[{])
    beginCaptures:
      1:
        tag: keyword
        name: punctuation.definition.template-expression.begin.sd
    contentName: meta.embedded.line.sd
    patterns:
      - { include: "#Expression" }
    end: ([}])
    endCaptures:
      1:
        tag: keyword
        name: punctuation.definition.template-expression.end.sd

  StringCharacterEscape:
    tag: escape
    name: constant.character.escape.ts
    match: ([\\])(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|u\{[0-9A-Fa-f]+\}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.|$)

  StringContent:
    tag: string
    name: string.template.sd
    match: ((?:(?![$]?[{])[^\n\r`])+)

  Color:
    patterns:
      - { include: "#HEXColor" }
      - { include: "#RGBColor" }
      - { include: "#HSLColor" }

  HEXColor:
    tag: string
    name: string.color.hex.sd
    match: (#)((?:[0-9a-fA-F]{2}){2,4})
    color: true

  RGBColor:
    tag: string
    name: string.color.rgb.sd
    match: (rgb)([(][\d]+[\s]+[\d]+[\s]+[\d]+(?:[\s]*[/][\s]*[\d.]+[%]?)?[)])
    color: true

  HSLColor:
    tag: string
    name: string.color.hsl.sd
    match: (hsl)([(][\d]+[\s]+[\d]+[%]?[\s]+[\d]+[%]?(?:[\s]*[/][\s]*[\d.]+[%]?)?[)])
    color: true

  # TODO: CSS

  CSS:
    tag: string
    name: string.css.sd
    match: (.+$)(\n?)
