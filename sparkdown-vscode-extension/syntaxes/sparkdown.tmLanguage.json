{
  "fileTypes": ["sparkdown"],
  "name": "Sparkdown",
  "scopeName": "text.source.sparkdown",
  "uuid": "E26C862D-2A5E-4F10-B0C3-D6BCB838CB7F",
  "patterns": [
    {
      "include": "#comment"
    },
    {
      "include": "#comment-block-begin"
    },
    {
      "include": "#comment-block-end"
    },
    {
      "include": "#note"
    },
    {
      "include": "#synopsis"
    },
    {
      "include": "#pagebreak"
    },
    {
      "include": "#centered"
    },
    {
      "include": "#condition"
    },
    {
      "include": "#logic"
    },
    {
      "include": "#list"
    },
    {
      "include": "#import"
    },
    {
      "include": "#variable"
    },
    {
      "include": "#asset"
    },
    {
      "include": "#tag"
    },
    {
      "include": "#entity"
    },
    {
      "include": "#jump"
    },
    {
      "include": "#repeat"
    },
    {
      "include": "#return"
    },
    {
      "include": "#title"
    },
    {
      "include": "#scene"
    },
    {
      "include": "#section"
    },
    {
      "include": "#section-mark"
    },
    {
      "include": "#transition"
    },
    {
      "include": "#inline"
    },
    {
      "include": "#lyric"
    },
    {
      "include": "#dialogue"
    },
    {
      "include": "#action"
    }
  ],
  "repository": {
    "expression": {
      "patterns": [
        {
          "include": "#expressionWithoutIdentifiers"
        },
        {
          "include": "#identifiers"
        },
        {
          "include": "#expressionPunctuations"
        }
      ]
    },
    "expressionWithoutIdentifiers": {
      "patterns": [
        {
          "include": "#string"
        },
        {
          "include": "#comment"
        },
        {
          "include": "#expression-operators"
        },
        {
          "include": "#literal"
        },
        {
          "include": "#paren-expression"
        }
      ]
    },
    "expressionPunctuations": {
      "patterns": [
        {
          "include": "#punctuation-comma"
        },
        {
          "include": "#punctuation-accessor"
        }
      ]
    },
    "paren-expression": {
      "begin": "\\(",
      "beginCaptures": {
        "0": {
          "name": "meta.brace.round.ts"
        }
      },
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "meta.brace.round.ts"
        }
      },
      "patterns": [
        {
          "include": "#expression"
        }
      ]
    },
    "expression-operators": {
      "patterns": [
        {
          "name": "keyword.control.flow.ts",
          "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(await)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
        },
        {
          "begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(yield)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))(?=\\s*\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*\\*)",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.flow.ts"
            }
          },
          "end": "\\*",
          "endCaptures": {
            "0": {
              "name": "keyword.generator.asterisk.ts"
            }
          },
          "patterns": [
            {
              "include": "#comment"
            }
          ]
        },
        {
          "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(yield)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))(?:\\s*(\\*))?",
          "captures": {
            "1": {
              "name": "keyword.control.flow.ts"
            },
            "2": {
              "name": "keyword.generator.asterisk.ts"
            }
          }
        },
        {
          "name": "keyword.operator.expression.delete.ts",
          "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))delete(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
        },
        {
          "name": "keyword.operator.expression.in.ts",
          "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))in(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))(?!\\()"
        },
        {
          "name": "keyword.operator.expression.of.ts",
          "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))of(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))(?!\\()"
        },
        {
          "name": "keyword.operator.expression.instanceof.ts",
          "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))instanceof(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
        },
        {
          "name": "keyword.operator.new.ts",
          "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))new(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
        },
        {
          "name": "keyword.operator.expression.void.ts",
          "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))void(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
        },
        {
          "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(as)\\s+(const)(?=\\s*($|[;,:})\\]]))",
          "captures": {
            "1": {
              "name": "keyword.control.as.ts"
            },
            "2": {
              "name": "storage.modifier.ts"
            }
          }
        },
        {
          "name": "keyword.operator.spread.ts",
          "match": "\\.\\.\\."
        },
        {
          "name": "keyword.operator.assignment.compound.ts",
          "match": "\\*=|(?<!\\()/=|%=|\\+=|\\-="
        },
        {
          "name": "keyword.operator.assignment.compound.bitwise.ts",
          "match": "\\&=|\\^=|<<=|>>=|>>>=|\\|="
        },
        {
          "name": "keyword.operator.bitwise.shift.ts",
          "match": "<<|>>>|>>"
        },
        {
          "name": "keyword.operator.comparison.ts",
          "match": "===|!==|==|!="
        },
        {
          "name": "keyword.operator.relational.ts",
          "match": "<=|>=|<>|<|>"
        },
        {
          "match": "(?<=[_$[:alnum:]])(\\!)\\s*(?:(/=)|(?:(/)(?![/*])))",
          "captures": {
            "1": {
              "name": "keyword.operator.logical.ts"
            },
            "2": {
              "name": "keyword.operator.assignment.compound.ts"
            },
            "3": {
              "name": "keyword.operator.arithmetic.ts"
            }
          }
        },
        {
          "name": "keyword.operator.logical.ts",
          "match": "\\!|&&|\\|\\||\\?\\?"
        },
        {
          "name": "keyword.operator.bitwise.ts",
          "match": "\\&|~|\\^|\\|"
        },
        {
          "name": "keyword.operator.assignment.ts",
          "match": "\\="
        },
        {
          "name": "keyword.operator.decrement.ts",
          "match": "--"
        },
        {
          "name": "keyword.operator.increment.ts",
          "match": "\\+\\+"
        },
        {
          "name": "keyword.operator.arithmetic.ts",
          "match": "%|\\*|/|-|\\+"
        },
        {
          "begin": "(?<=[_$[:alnum:])\\]])\\s*(?=(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)+(?:(/=)|(?:(/)(?![/*]))))",
          "end": "(?:(/=)|(?:(/)(?!\\*([^\\*]|(\\*[^\\/]))*\\*\\/)))",
          "endCaptures": {
            "1": {
              "name": "keyword.operator.assignment.compound.ts"
            },
            "2": {
              "name": "keyword.operator.arithmetic.ts"
            }
          },
          "patterns": [
            {
              "include": "#comment"
            }
          ]
        },
        {
          "match": "(?<=[_$[:alnum:])\\]])\\s*(?:(/=)|(?:(/)(?![/*])))",
          "captures": {
            "1": {
              "name": "keyword.operator.assignment.compound.ts"
            },
            "2": {
              "name": "keyword.operator.arithmetic.ts"
            }
          }
        },
        {
          "name": "keyword.operator.type.annotation.ts",
          "match": ":"
        }
      ]
    },
    "literal": {
      "patterns": [
        {
          "include": "#numeric-literal"
        },
        {
          "include": "#boolean-literal"
        },
        {
          "include": "#null-literal"
        },
        {
          "include": "#undefined-literal"
        },
        {
          "include": "#numericConstant-literal"
        },
        {
          "include": "#array-literal"
        }
      ]
    },
    "array-literal": {
      "name": "meta.array.literal.ts",
      "begin": "\\s*(\\[)",
      "beginCaptures": {
        "1": {
          "name": "meta.brace.square.ts"
        }
      },
      "end": "\\]",
      "endCaptures": {
        "0": {
          "name": "meta.brace.square.ts"
        }
      },
      "patterns": [
        {
          "include": "#expression"
        },
        {
          "include": "#punctuation-comma"
        }
      ]
    },
    "numeric-literal": {
      "patterns": [
        {
          "name": "constant.numeric.hex.ts",
          "match": "\\b(?<!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$)",
          "captures": {
            "1": {
              "name": "storage.type.numeric.bigint.ts"
            }
          }
        },
        {
          "name": "constant.numeric.binary.ts",
          "match": "\\b(?<!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$)",
          "captures": {
            "1": {
              "name": "storage.type.numeric.bigint.ts"
            }
          }
        },
        {
          "name": "constant.numeric.octal.ts",
          "match": "\\b(?<!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$)",
          "captures": {
            "1": {
              "name": "storage.type.numeric.bigint.ts"
            }
          }
        },
        {
          "match": "(?x)\n(?<!\\$)(?:\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)| # 1.1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # 1.E+3\n  (?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # .1E+3\n  (?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|                 # 1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|                      # 1.1\n  (?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|                                  # 1.\n  (?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|                                  # .1\n  (?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))                                 # 1\n)(?!\\$)",
          "captures": {
            "0": {
              "name": "constant.numeric.decimal.ts"
            },
            "1": {
              "name": "meta.delimiter.decimal.period.ts"
            },
            "2": {
              "name": "storage.type.numeric.bigint.ts"
            },
            "3": {
              "name": "meta.delimiter.decimal.period.ts"
            },
            "4": {
              "name": "storage.type.numeric.bigint.ts"
            },
            "5": {
              "name": "meta.delimiter.decimal.period.ts"
            },
            "6": {
              "name": "storage.type.numeric.bigint.ts"
            },
            "7": {
              "name": "storage.type.numeric.bigint.ts"
            },
            "8": {
              "name": "meta.delimiter.decimal.period.ts"
            },
            "9": {
              "name": "storage.type.numeric.bigint.ts"
            },
            "10": {
              "name": "meta.delimiter.decimal.period.ts"
            },
            "11": {
              "name": "storage.type.numeric.bigint.ts"
            },
            "12": {
              "name": "meta.delimiter.decimal.period.ts"
            },
            "13": {
              "name": "storage.type.numeric.bigint.ts"
            },
            "14": {
              "name": "storage.type.numeric.bigint.ts"
            }
          }
        }
      ]
    },
    "boolean-literal": {
      "patterns": [
        {
          "name": "constant.language.boolean.true.ts",
          "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))true(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
        },
        {
          "name": "constant.language.boolean.false.ts",
          "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))false(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
        }
      ]
    },
    "null-literal": {
      "name": "constant.language.null.ts",
      "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))null(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
    },
    "undefined-literal": {
      "name": "constant.language.undefined.ts",
      "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))undefined(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
    },
    "numericConstant-literal": {
      "patterns": [
        {
          "name": "constant.language.nan.ts",
          "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))NaN(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
        },
        {
          "name": "constant.language.infinity.ts",
          "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))Infinity(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
        }
      ]
    },
    "identifiers": {
      "patterns": [
        {
          "match": "(?x)(?:(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))\\s*)?([_$[:alpha:]][_$[:alnum:]]*)(?=\\s*=\\s*(\n  ((async\\s+)?(\n    (function\\s*[(<*]) |\n    (function\\s+) |\n    ([_$[:alpha:]][_$[:alnum:]]*\\s*=>)\n  )) |\n  ((async\\s*)?(\n    ((<\\s*$)|((<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?[\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |\n    # sure shot arrow functions even if => is on new line\n(\n  (<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?\n  [(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*\n  (\n    ([)]\\s*:) |                                                                                       # ():\n    ((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)                                                                  # [(]param: | [(]...param:\n  )\n) |\n\n# arrow function possible to detect only with => on same line\n(\n  (<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?                                                                                 # typeparameters\n  \\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\\"\\`]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))*)?\\)   # parameters\n  (\\s*:\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?                                                                        # return type\n  \\s*=>                                                                                               # arrow operator\n)\n  ))\n))",
          "captures": {
            "1": {
              "name": "punctuation.accessor.ts"
            },
            "2": {
              "name": "punctuation.accessor.optional.ts"
            },
            "3": {
              "name": "entity.name.function.ts"
            }
          }
        },
        {
          "match": "(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))\\s*(\\#?[[:upper:]][_$[:digit:][:upper:]]*)(?![_$[:alnum:]])",
          "captures": {
            "1": {
              "name": "punctuation.accessor.ts"
            },
            "2": {
              "name": "punctuation.accessor.optional.ts"
            },
            "3": {
              "name": "variable.other.constant.property.ts"
            }
          }
        },
        {
          "match": "(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))\\s*(\\#?[_$[:alpha:]][_$[:alnum:]]*)",
          "captures": {
            "1": {
              "name": "punctuation.accessor.ts"
            },
            "2": {
              "name": "punctuation.accessor.optional.ts"
            },
            "3": {
              "name": "variable.other.property.ts"
            }
          }
        },
        {
          "name": "variable.other.constant.ts",
          "match": "([[:upper:]][_$[:digit:][:upper:]]*)(?![_$[:alnum:]])"
        },
        {
          "name": "variable.other.readwrite.ts",
          "match": "[_$[:alpha:]][_$[:alnum:]]*"
        }
      ]
    },
    "punctuation-comma": {
      "name": "punctuation.separator.comma.ts",
      "match": ","
    },
    "punctuation-accessor": {
      "match": "(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))",
      "captures": {
        "1": {
          "name": "punctuation.accessor.ts"
        },
        "2": {
          "name": "punctuation.accessor.optional.ts"
        }
      }
    },
    "string": {
      "patterns": [
        {
          "include": "#qstring-single"
        },
        {
          "include": "#qstring-double"
        },
        {
          "include": "#template"
        }
      ]
    },
    "qstring-double": {
      "name": "string.quoted.double.ts",
      "begin": "\"",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.ts"
        }
      },
      "end": "(\")|((?:[^\\\\\\n])$)",
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.string.end.ts"
        },
        "2": {
          "name": "invalid.illegal.newline.ts"
        }
      },
      "patterns": [
        {
          "include": "#string-character-escape"
        }
      ]
    },
    "qstring-single": {
      "name": "string.quoted.single.ts",
      "begin": "'",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.ts"
        }
      },
      "end": "(\\')|((?:[^\\\\\\n])$)",
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.string.end.ts"
        },
        "2": {
          "name": "invalid.illegal.newline.ts"
        }
      },
      "patterns": [
        {
          "include": "#string-character-escape"
        }
      ]
    },
    "string-character-escape": {
      "name": "constant.character.escape.ts",
      "match": "\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|u\\{[0-9A-Fa-f]+\\}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.|$)"
    },
    "template": {
      "patterns": [
        {
          "include": "#template-call"
        },
        {
          "name": "string.template.ts",
          "begin": "([_$[:alpha:]][_$[:alnum:]]*)?(`)",
          "beginCaptures": {
            "1": {
              "name": "entity.name.function.tagged-template.ts"
            },
            "2": {
              "name": "punctuation.definition.string.template.begin.ts"
            }
          },
          "end": "`",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.template.end.ts"
            }
          },
          "patterns": [
            {
              "include": "#template-substitution-element"
            },
            {
              "include": "#string-character-escape"
            }
          ]
        }
      ]
    },
    "template-call": {
      "patterns": [
        {
          "name": "string.template.ts",
          "begin": "(?=(([_$[:alpha:]][_$[:alnum:]]*\\s*\\??\\.\\s*)*|(\\??\\.\\s*)?)([_$[:alpha:]][_$[:alnum:]]*)(<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))(([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>)*(?<!=)\\>))*(?<!=)\\>)*(?<!=)>\\s*)?`)",
          "end": "(?=`)",
          "patterns": [
            {
              "begin": "(?=(([_$[:alpha:]][_$[:alnum:]]*\\s*\\??\\.\\s*)*|(\\??\\.\\s*)?)([_$[:alpha:]][_$[:alnum:]]*))",
              "end": "(?=(<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))(([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>)*(?<!=)\\>))*(?<!=)\\>)*(?<!=)>\\s*)?`)",
              "patterns": [
                {
                  "name": "entity.name.function.tagged-template.ts",
                  "match": "([_$[:alpha:]][_$[:alnum:]]*)"
                }
              ]
            }
          ]
        }
      ]
    },
    "template-substitution-element": {
      "name": "meta.template.expression.ts",
      "begin": "\\$\\{",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.template-expression.begin.ts"
        }
      },
      "end": "\\}",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.template-expression.end.ts"
        }
      },
      "patterns": [
        {
          "include": "#expression"
        }
      ],
      "contentName": "meta.embedded.line.ts"
    },
    "type-string": {
      "patterns": [
        {
          "include": "#qstring-single"
        },
        {
          "include": "#qstring-double"
        },
        {
          "include": "#template-type"
        }
      ]
    },
    "template-type": {
      "patterns": [
        {
          "include": "#template-call"
        },
        {
          "name": "string.template.ts",
          "begin": "([_$[:alpha:]][_$[:alnum:]]*)?(`)",
          "beginCaptures": {
            "1": {
              "name": "entity.name.function.tagged-template.ts"
            },
            "2": {
              "name": "punctuation.definition.string.template.begin.ts"
            }
          },
          "end": "`",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.template.end.ts"
            }
          },
          "patterns": [
            {
              "include": "#string-character-escape"
            }
          ]
        }
      ]
    },
    "brackets": {
      "patterns": [
        {
          "begin": "{",
          "end": "}|(?=\\*/)",
          "patterns": [
            {
              "include": "#brackets"
            }
          ]
        },
        {
          "begin": "\\[",
          "end": "\\]|(?=\\*/)",
          "patterns": [
            {
              "include": "#brackets"
            }
          ]
        }
      ]
    },
    "comment": {
      "patterns": [
        {
          "begin": "(^[ \\t]+)?((//)(?:\\s*((@)internal)(?=\\s|$))?)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.whitespace.comment.leading.ts"
            },
            "2": {
              "name": "comment.line.double-slash.ts"
            },
            "3": {
              "name": "punctuation.definition.comment.ts"
            },
            "4": {
              "name": "storage.type.internaldeclaration.ts"
            },
            "5": {
              "name": "punctuation.decorator.internaldeclaration.ts"
            }
          },
          "end": "(?=$)",
          "contentName": "comment.line.double-slash.ts"
        }
      ]
    },
    "single-line-comment-consuming-line-ending": {
      "begin": "(^[ \\t]+)?((//)(?:\\s*((@)internal)(?=\\s|$))?)",
      "beginCaptures": {
        "1": {
          "name": "punctuation.whitespace.comment.leading.ts"
        },
        "2": {
          "name": "comment.line.double-slash.ts"
        },
        "3": {
          "name": "punctuation.definition.comment.ts"
        },
        "4": {
          "name": "storage.type.internaldeclaration.ts"
        },
        "5": {
          "name": "punctuation.decorator.internaldeclaration.ts"
        }
      },
      "end": "(?=^)",
      "contentName": "comment.line.double-slash.ts"
    },

    "inline": {
      "patterns": [
        {
          "include": "#ampersand"
        },
        {
          "include": "#bracket"
        },
        {
          "include": "#underline"
        },
        {
          "include": "#bold"
        },
        {
          "include": "#italic"
        },
        {
          "include": "#raw"
        },
        {
          "include": "#strikethrough"
        },
        {
          "include": "#escape"
        },
        {
          "include": "#image-inline"
        },
        {
          "include": "#image-ref"
        },
        {
          "include": "#link-email"
        },
        {
          "include": "#link-inet"
        },
        {
          "include": "#link-inline"
        },
        {
          "include": "#link-ref"
        },
        {
          "include": "#link-ref-literal"
        },
        {
          "include": "#link-ref-shortcut"
        }
      ]
    },
    "ampersand": {
      "comment": "Markdown will convert this for us. We match it so that the HTML grammar will not mark it up as invalid.",
      "match": "&(?!([a-zA-Z0-9]+|#[0-9]+|#x[0-9a-fA-F]+);)",
      "name": "meta.other.valid-ampersand.markdown"
    },
    "underline": {
      "captures": {
        "1": {
          "name": "punctuation.definition.underline.markdown"
        },
        "2": {
          "patterns": [
            {
              "applyEndPatternLast": 1,
              "begin": "(?=<[^>]*?>)",
              "end": "(?<=>)",
              "patterns": [
                {
                  "include": "text.html.derivative"
                }
              ]
            },
            {
              "include": "#escape"
            },
            {
              "include": "#ampersand"
            },
            {
              "include": "#bracket"
            },
            {
              "include": "#raw"
            },
            {
              "include": "#bold"
            },
            {
              "include": "#italic"
            },
            {
              "include": "#image-inline"
            },
            {
              "include": "#link-inline"
            },
            {
              "include": "#link-inet"
            },
            {
              "include": "#link-email"
            },
            {
              "include": "#image-ref"
            },
            {
              "include": "#link-ref-literal"
            },
            {
              "include": "#link-ref"
            },
            {
              "include": "#link-ref-shortcut"
            }
          ]
        },
        "3": {
          "name": "punctuation.definition.underline.markdown"
        }
      },
      "match": "(?<!\\\\)(_+)((?:[^_]|(?!(?<![_\\\\])\\1(?!_))_)*+)(\\1)",
      "name": "markup.underline.markdown"
    },
    "bold": {
      "begin": "(?x) (?<open>(\\*\\*(?=\\w)|(?<!\\w)\\*\\*|(?<!\\w)\\b__))(?=\\S) (?=\n  (\n    <[^>]*+>              # HTML tags\n    | (?<raw>`+)([^`]|(?!(?<!`)\\k<raw>(?!`))`)*+\\k<raw>\n                      # Raw\n    | \\\\[\\\\`*_{}\\[\\]()#.!+\\->]?+      # Escapes\n    | \\[\n    (\n        (?<square>          # Named group\n          [^\\[\\]\\\\]        # Match most chars\n          | \\\\.            # Escaped chars\n          | \\[ \\g<square>*+ \\]    # Nested brackets\n        )*+\n      \\]\n      (\n        (              # Reference Link\n          [ ]?          # Optional space\n          \\[[^\\]]*+\\]        # Ref name\n        )\n        | (              # Inline Link\n          \\(            # Opening paren\n            [ \\t]*+        # Optional whitespace\n            <?(.*?)>?      # URL\n            [ \\t]*+        # Optional whitespace\n            (          # Optional Title\n              (?<title>['\"])\n              (.*?)\n              \\k<title>\n            )?\n          \\)\n        )\n      )\n    )\n    | (?!(?<=\\S)\\k<open>).            # Everything besides\n                      # style closer\n  )++\n  (?<=\\S)(?=__\\b|\\*\\*)\\k<open>                # Close\n)\n",
      "captures": {
        "1": {
          "name": "punctuation.definition.bold.markdown"
        }
      },
      "end": "(?<=\\S)(\\1)",
      "name": "markup.bold.markdown",
      "patterns": [
        {
          "applyEndPatternLast": 1,
          "begin": "(?=<[^>]*?>)",
          "end": "(?<=>)",
          "patterns": [
            {
              "include": "text.html.derivative"
            }
          ]
        },
        {
          "include": "#escape"
        },
        {
          "include": "#ampersand"
        },
        {
          "include": "#bracket"
        },
        {
          "include": "#raw"
        },
        {
          "include": "#underline"
        },
        {
          "include": "#italic"
        },
        {
          "include": "#image-inline"
        },
        {
          "include": "#link-inline"
        },
        {
          "include": "#link-inet"
        },
        {
          "include": "#link-email"
        },
        {
          "include": "#image-ref"
        },
        {
          "include": "#link-ref-literal"
        },
        {
          "include": "#link-ref"
        },
        {
          "include": "#link-ref-shortcut"
        },
        {
          "include": "#strikethrough"
        }
      ]
    },
    "bracket": {
      "comment": "Markdown will convert this for us. We match it so that the HTML grammar will not mark it up as invalid.",
      "match": "<(?![a-zA-Z/?\\$!])",
      "name": "meta.other.valid-bracket.markdown"
    },
    "escape": {
      "match": "\\\\[-`*_#+.!(){}\\[\\]\\\\>]",
      "name": "constant.character.escape.markdown"
    },
    "image-inline": {
      "captures": {
        "1": {
          "name": "punctuation.definition.link.description.begin.markdown"
        },
        "2": {
          "name": "string.other.link.description.markdown"
        },
        "4": {
          "name": "punctuation.definition.link.description.end.markdown"
        },
        "5": {
          "name": "punctuation.definition.metadata.markdown"
        },
        "6": {
          "name": "punctuation.definition.link.markdown"
        },
        "7": {
          "name": "markup.underline.link.image.markdown"
        },
        "8": {
          "name": "punctuation.definition.link.markdown"
        },
        "9": {
          "name": "string.other.link.description.title.markdown"
        },
        "10": {
          "name": "punctuation.definition.string.markdown"
        },
        "11": {
          "name": "punctuation.definition.string.markdown"
        },
        "12": {
          "name": "string.other.link.description.title.markdown"
        },
        "13": {
          "name": "punctuation.definition.string.markdown"
        },
        "14": {
          "name": "punctuation.definition.string.markdown"
        },
        "15": {
          "name": "string.other.link.description.title.markdown"
        },
        "16": {
          "name": "punctuation.definition.string.markdown"
        },
        "17": {
          "name": "punctuation.definition.string.markdown"
        },
        "18": {
          "name": "punctuation.definition.metadata.markdown"
        }
      },
      "match": "(?x)\n  (\\!\\[)((?<square>[^\\[\\]\\\\]|\\\\.|\\[\\g<square>*+\\])*+)(\\])\n                # Match the link text.\n  (\\()            # Opening paren for url\n    (<?)(\\S+?)(>?)      # The url\n    [ \\t]*          # Optional whitespace\n    (?:\n        ((\\().+?(\\)))    # Match title in parens…\n      | ((\").+?(\"))    # or in double quotes…\n      | ((').+?('))    # or in single quotes.\n    )?            # Title is optional\n    \\s*            # Optional whitespace\n  (\\))\n",
      "name": "meta.image.inline.markdown"
    },
    "image-ref": {
      "captures": {
        "1": {
          "name": "punctuation.definition.link.description.begin.markdown"
        },
        "2": {
          "name": "string.other.link.description.markdown"
        },
        "4": {
          "name": "punctuation.definition.link.description.end.markdown"
        },
        "5": {
          "name": "punctuation.definition.constant.markdown"
        },
        "6": {
          "name": "constant.other.reference.link.markdown"
        },
        "7": {
          "name": "punctuation.definition.constant.markdown"
        }
      },
      "match": "(\\!\\[)((?<square>[^\\[\\]\\\\]|\\\\.|\\[\\g<square>*+\\])*+)(\\])[ ]?(\\[)(.*?)(\\])",
      "name": "meta.image.reference.markdown"
    },
    "italic": {
      "begin": "(?x) (?<open>(\\*(?=\\w)|(?<!\\w)\\*))(?=\\S)                # Open\n  (?=\n    (\n      <[^>]*+>              # HTML tags\n      | (?<raw>`+)([^`]|(?!(?<!`)\\k<raw>(?!`))`)*+\\k<raw>\n                        # Raw\n      | \\\\[\\\\`*{}\\[\\]()#.!+\\->]?+      # Escapes\n      | \\[\n      (\n          (?<square>          # Named group\n            [^\\[\\]\\\\]        # Match most chars\n            | \\\\.            # Escaped chars\n            | \\[ \\g<square>*+ \\]    # Nested brackets\n          )*+\n        \\]\n        (\n          (              # Reference Link\n            [ ]?          # Optional space\n            \\[[^\\]]*+\\]        # Ref name\n          )\n          | (              # Inline Link\n            \\(            # Opening paren\n              [ \\t]*+        # Optional whtiespace\n              <?(.*?)>?      # URL\n              [ \\t]*+        # Optional whtiespace\n              (          # Optional Title\n                (?<title>['\"])\n                (.*?)\n                \\k<title>\n              )?\n            \\)\n          )\n        )\n      )\n      | \\k<open>\\k<open>                   # Must be bold closer\n      | (?!(?<=\\S)\\k<open>).            # Everything besides\n                        # style closer\n    )++\n    (?<=\\S)(?=\\*)\\k<open>                # Close\n  )\n",
      "captures": {
        "1": {
          "name": "punctuation.definition.italic.markdown"
        }
      },
      "end": "(?<=\\S)(\\1)((?!\\1)|(?=\\1\\1))",
      "name": "markup.italic.markdown",
      "patterns": [
        {
          "applyEndPatternLast": 1,
          "begin": "(?=<[^>]*?>)",
          "end": "(?<=>)",
          "patterns": [
            {
              "include": "text.html.derivative"
            }
          ]
        },
        {
          "include": "#escape"
        },
        {
          "include": "#ampersand"
        },
        {
          "include": "#bracket"
        },
        {
          "include": "#raw"
        },
        {
          "include": "#underline"
        },
        {
          "include": "#bold"
        },
        {
          "include": "#image-inline"
        },
        {
          "include": "#link-inline"
        },
        {
          "include": "#link-inet"
        },
        {
          "include": "#link-email"
        },
        {
          "include": "#image-ref"
        },
        {
          "include": "#link-ref-literal"
        },
        {
          "include": "#link-ref"
        },
        {
          "include": "#link-ref-shortcut"
        },
        {
          "include": "#strikethrough"
        }
      ]
    },
    "link-email": {
      "captures": {
        "1": {
          "name": "punctuation.definition.link.markdown"
        },
        "2": {
          "name": "markup.underline.link.markdown"
        },
        "4": {
          "name": "punctuation.definition.link.markdown"
        }
      },
      "match": "(<)((?:mailto:)?[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*)(>)",
      "name": "meta.link.email.lt-gt.markdown"
    },
    "link-inet": {
      "captures": {
        "1": {
          "name": "punctuation.definition.link.markdown"
        },
        "2": {
          "name": "markup.underline.link.markdown"
        },
        "3": {
          "name": "punctuation.definition.link.markdown"
        }
      },
      "match": "(<)((?:https?|ftp)://.*?)(>)",
      "name": "meta.link.inet.markdown"
    },
    "link-inline": {
      "captures": {
        "1": {
          "name": "punctuation.definition.link.title.begin.markdown"
        },
        "2": {
          "name": "string.other.link.title.markdown",
          "patterns": [
            {
              "include": "#raw"
            },
            {
              "include": "#underline"
            },
            {
              "include": "#bold"
            },
            {
              "include": "#italic"
            },
            {
              "include": "#strikethrough"
            },
            {
              "include": "#image-inline"
            }
          ]
        },
        "4": {
          "name": "punctuation.definition.link.title.end.markdown"
        },
        "5": {
          "name": "punctuation.definition.metadata.markdown"
        },
        "7": {
          "name": "punctuation.definition.link.markdown"
        },
        "8": {
          "name": "markup.underline.link.markdown"
        },
        "9": {
          "name": "punctuation.definition.link.markdown"
        },
        "10": {
          "name": "markup.underline.link.markdown"
        },
        "12": {
          "name": "string.other.link.description.title.markdown"
        },
        "13": {
          "name": "punctuation.definition.string.begin.markdown"
        },
        "14": {
          "name": "punctuation.definition.string.end.markdown"
        },
        "15": {
          "name": "string.other.link.description.title.markdown"
        },
        "16": {
          "name": "punctuation.definition.string.begin.markdown"
        },
        "17": {
          "name": "punctuation.definition.string.end.markdown"
        },
        "18": {
          "name": "string.other.link.description.title.markdown"
        },
        "19": {
          "name": "punctuation.definition.string.begin.markdown"
        },
        "20": {
          "name": "punctuation.definition.string.end.markdown"
        },
        "21": {
          "name": "punctuation.definition.metadata.markdown"
        }
      },
      "match": "(?x)\n  (\\[)((?<square>[^\\[\\]\\\\]|\\\\.|\\[\\g<square>*+\\])*+)(\\])\n                # Match the link text.\n  (\\()            # Opening paren for url\n    # The url\n      [ \\t]*\n      (\n         (<)([^<>\\n]*)(>)\n         | ((?<url>(?>[^\\s()]+)|\\(\\g<url>*\\))*)\n      )\n      [ \\t]*\n    # The title  \n    (?:\n        ((\\()[^()]*(\\)))    # Match title in parens…\n      | ((\")[^\"]*(\"))    # or in double quotes…\n      | ((')[^']*('))    # or in single quotes.\n    )?            # Title is optional\n    \\s*            # Optional whitespace\n  (\\))\n",
      "name": "meta.link.inline.markdown"
    },
    "link-ref": {
      "captures": {
        "1": {
          "name": "punctuation.definition.link.title.begin.markdown"
        },
        "2": {
          "name": "string.other.link.title.markdown",
          "patterns": [
            {
              "include": "#raw"
            },
            {
              "include": "#underline"
            },
            {
              "include": "#bold"
            },
            {
              "include": "#italic"
            },
            {
              "include": "#strikethrough"
            },
            {
              "include": "#image-inline"
            }
          ]
        },
        "4": {
          "name": "punctuation.definition.link.title.end.markdown"
        },
        "5": {
          "name": "punctuation.definition.constant.begin.markdown"
        },
        "6": {
          "name": "constant.other.reference.link.markdown"
        },
        "7": {
          "name": "punctuation.definition.constant.end.markdown"
        }
      },
      "match": "(?<![\\]\\\\])(\\[)((?<square>[^\\[\\]\\\\]|\\\\.|\\[\\g<square>*+\\])*+)(\\])(\\[)([^\\]]*+)(\\])",
      "name": "meta.link.reference.markdown"
    },
    "link-ref-literal": {
      "captures": {
        "1": {
          "name": "punctuation.definition.link.title.begin.markdown"
        },
        "2": {
          "name": "string.other.link.title.markdown"
        },
        "4": {
          "name": "punctuation.definition.link.title.end.markdown"
        },
        "5": {
          "name": "punctuation.definition.constant.begin.markdown"
        },
        "6": {
          "name": "punctuation.definition.constant.end.markdown"
        }
      },
      "match": "(?<![\\]\\\\])(\\[)((?<square>[^\\[\\]\\\\]|\\\\.|\\[\\g<square>*+\\])*+)(\\])[ ]?(\\[)(\\])",
      "name": "meta.link.reference.literal.markdown"
    },
    "link-ref-shortcut": {
      "captures": {
        "1": {
          "name": "punctuation.definition.link.title.begin.markdown"
        },
        "2": {
          "name": "string.other.link.title.markdown"
        },
        "3": {
          "name": "punctuation.definition.link.title.end.markdown"
        }
      },
      "match": "(?<![\\]\\\\])(\\[)(\\S+?)(\\])",
      "name": "meta.link.reference.markdown"
    },
    "raw": {
      "captures": {
        "1": {
          "name": "punctuation.definition.raw.markdown"
        },
        "3": {
          "name": "punctuation.definition.raw.markdown"
        }
      },
      "match": "(`+)((?:[^`]|(?!(?<!`)\\1(?!`))`)*+)(\\1)",
      "name": "markup.inline.raw.string.markdown"
    },
    "strikethrough": {
      "captures": {
        "1": {
          "name": "punctuation.definition.strikethrough.markdown"
        },
        "2": {
          "patterns": [
            {
              "applyEndPatternLast": 1,
              "begin": "(?=<[^>]*?>)",
              "end": "(?<=>)",
              "patterns": [
                {
                  "include": "text.html.derivative"
                }
              ]
            },
            {
              "include": "#escape"
            },
            {
              "include": "#ampersand"
            },
            {
              "include": "#bracket"
            },
            {
              "include": "#raw"
            },
            {
              "include": "#underline"
            },
            {
              "include": "#bold"
            },
            {
              "include": "#italic"
            },
            {
              "include": "#image-inline"
            },
            {
              "include": "#link-inline"
            },
            {
              "include": "#link-inet"
            },
            {
              "include": "#link-email"
            },
            {
              "include": "#image-ref"
            },
            {
              "include": "#link-ref-literal"
            },
            {
              "include": "#link-ref"
            },
            {
              "include": "#link-ref-shortcut"
            }
          ]
        },
        "3": {
          "name": "punctuation.definition.strikethrough.markdown"
        }
      },
      "match": "(?<!\\\\)(~{2,})((?:[^~]|(?!(?<![~\\\\])\\1(?!~))~)*+)(\\1)",
      "name": "markup.strikethrough.markdown"
    },

    "comment-block-begin": {
      "name": "comment.block",
      "match": "^([ \t]*)(/[*])"
    },
    "comment-block-end": {
      "name": "comment.block",
      "match": "([*]/)([ \t]*)$"
    },
    "note": {
      "name": "comment.block",
      "match": "(?:\\[{2}(?!\\[+))([\\s\\S]*?)(?:\\]{2}(?!\\[+))",
      "patterns": [
        {
          "include": "#comment"
        }
      ]
    },
    "synopsis": {
      "name": "comment.block.sd.synopsis",
      "match": "^([ \t]*)(?![=]{3,})([=])([ ]*)(.*)([ ]*)",
      "patterns": [
        {
          "include": "#comment"
        }
      ]
    },
    "pagebreak": {
      "name": "punctuation.definition.tag.sd",
      "match": "===(=+)?",
      "patterns": [
        {
          "include": "#comment"
        }
      ]
    },
    "centered": {
      "name": "keyword.other.class.sd",
      "match": "^([ \t]*)(>)([^<>\\n]+)(<)",
      "captures": {
        "2": {
          "name": "keyword.other.centered.sd"
        },
        "3": {
          "patterns": [
            {
              "include": "#comment"
            },
            {
              "include": "#note"
            },
            {
              "include": "#inline"
            }
          ]
        },
        "4": {
          "name": "keyword.other.centered.sd"
        }
      },
      "patterns": [
        {
          "include": "#comment"
        }
      ]
    },
    "condition": {
      "match": "^([ \t]*)([*])($|[ ]+)($|if|elif|else)(?:($|[ ]+)($|(?:[ ]+|`[^\n\r`]*`|\"[^\n\r\"]*\"|'[^\n\r']*'|[^\n\r:])+))?([ ]*)([:])([ ]*)",
      "captures": {
        "2": {
          "name": "keyword.other.condition.sd"
        },
        "4": {
          "name": "keyword.other.condition.sd"
        },
        "6": {
          "patterns": [
            {
              "include": "#expression"
            }
          ]
        },
        "8": {
          "name": "keyword.operator.type.annotation.sd"
        }
      },
      "patterns": [
        {
          "include": "#comment"
        }
      ]
    },
    "logic": {
      "match": "^([ \t]*)([*])($|[ ]+)([^\n\r]*)?([ ]*)",
      "captures": {
        "2": {
          "name": "keyword.other.logic.sd"
        },
        "4": {
          "patterns": [
            {
              "include": "#expression"
            }
          ]
        }
      },
      "patterns": [
        {
          "include": "#comment"
        }
      ]
    },
    "list": {
      "match": "^([ \t]*)([*+-])($|[ ]+)",
      "captures": {
        "2": {
          "name": "keyword.other.list.sd"
        }
      },
      "patterns": [
        {
          "include": "#comment"
        }
      ]
    },
    "import": {
      "match": "^([ \t]*)(import)($|[ ]+)($|[^\n\r]+)([ ]*)",
      "captures": {
        "2": {
          "name": "keyword.other.import.sd"
        },
        "4": {
          "patterns": [
            {
              "include": "#expression"
            }
          ]
        }
      },
      "patterns": [
        {
          "include": "#comment"
        }
      ]
    },
    "variable": {
      "name": "string.other.variable.sd",
      "match": "^([ \t]*)(var|temp)($|[ ]+)($|[^\n\r]+)",
      "captures": {
        "2": {
          "name": "keyword.other.variable.sd"
        },
        "4": {
          "patterns": [
            {
              "include": "#expression"
            }
          ]
        }
      }
    },
    "asset": {
      "name": "string.other.asset.sd",
      "match": "^([ \t]*)(image|audio|video|text)($|[ ]+)($|[^\n\r]+)",
      "captures": {
        "2": {
          "name": "keyword.other.asset.sd"
        },
        "4": {
          "patterns": [
            {
              "include": "#expression"
            }
          ]
        }
      }
    },
    "tag": {
      "name": "string.other.tag.sd",
      "match": "^([ \t]*)(tag)($|[ ]+)($|[^\n\r]+)",
      "captures": {
        "2": {
          "name": "keyword.other.tag.sd"
        },
        "4": {
          "patterns": [
            {
              "include": "#expression"
            }
          ]
        }
      }
    },
    "entity": {
      "name": "string.other.entity.sd",
      "begin": "^([ \t]*)(list|map|ui|style|config)($|[ ]+)($|[a-zA-Z]+[a-zA-Z0-9_]*)([ ]*)(?:([(])([ ]*)($|[a-zA-Z]+[a-zA-Z0-9_]*)([ ]*)($|[)]))?([ ]*)([:]?)",
      "end": "^(?=(list|map|ui|style|config)|$)",
      "captures": {
        "2": {
          "name": "keyword.other.entity.sd"
        },
        "4": {
          "name": "entity.name.type.interface.sd"
        },
        "6": {
          "name": "punctuation.definition.tag.sd"
        },
        "8": {
          "name": "entity.name.type.interface.sd"
        },
        "10": {
          "name": "punctuation.definition.tag.sd"
        },
        "12": {
          "name": "keyword.operator.type.annotation.sd"
        }
      },
      "patterns": [
        {
          "include": "#expression"
        }
      ]
    },
    "jump": {
      "match": "^([ \t]*)([>])([ ]*)([^\n\r<]+)?([ ]*)(?!<[ ]*)",
      "captures": {
        "2": {
          "name": "keyword.other.jump.sd"
        },
        "4": {
          "name": "keyword.control.export.sd",
          "patterns": [
            {
              "include": "#comment"
            }
          ]
        }
      },
      "patterns": [
        {
          "include": "#comment"
        }
      ]
    },
    "repeat": {
      "match": "^([ \t]*)([\\^])([ ]*)",
      "captures": {
        "2": {
          "name": "keyword.other.repeat.sd"
        }
      },
      "patterns": [
        {
          "include": "#comment"
        }
      ]
    },
    "return": {
      "match": "^([ \t]*)([<])([ ]*)([^\n\r]*)([ ]*)",
      "captures": {
        "2": {
          "name": "keyword.other.return.sd"
        },
        "4": {
          "patterns": [
            {
              "include": "#expression"
            }
          ]
        }
      },
      "patterns": [
        {
          "include": "#comment"
        }
      ]
    },
    "scene": {
      "match": "^([ \t]*)([.](?![. ])|INT[.][ ]+|EXT[.][ ]+|INT[.]?/EXT[.][ ]+)($|(?:[^\n\r-]|[^ \t\n\r][-])*[^ \t\n\r])($|[ ]+)($|[-])($|[ ]+)($|[^\n\r#]*[^ \t\n\r])($|[ ]+)($|[#])($|[^\n\r#]+)($|[#])?([ ]*)",
      "captures": {
        "2": {
          "name": "keyword.other.class.sd"
        },
        "3": {
          "name": "keyword.other.class.sd",
          "patterns": [
            {
              "include": "#comment"
            }
          ]
        },
        "5": {
          "name": "keyword.other.class.sd"
        },
        "7": {
          "name": "keyword.other.class.sd",
          "patterns": [
            {
              "include": "#comment"
            }
          ]
        },
        "9": {
          "name": "constant.numeric.scene.sd"
        },
        "10": {
          "name": "constant.numeric.scene.sd",
          "patterns": [
            {
              "include": "#comment"
            }
          ]
        },
        "11": {
          "name": "constant.numeric.scene.sd"
        }
      },
      "patterns": [
        {
          "include": "#scene_number"
        },
        {
          "include": "#comment"
        }
      ]
    },
    "scene_number": {
      "name": "constant.numeric.scene.sd",
      "match": "(#[^\n\r]#)"
    },
    "section": {
      "match": "^([ \t]*)(#+)($|[ ]+)($|[a-zA-Z]+[a-zA-Z0-9_]*)([ ]*)($|[^\n\r:]+)?([:])?([ ]*)($|[a-zA-Z]+[a-zA-Z0-9_]*)?([ ]*)",
      "captures": {
        "2": {
          "name": "keyword.control.export.sd"
        },
        "4": {
          "name": "keyword.control.export.sd",
          "patterns": [
            {
              "include": "#comment"
            }
          ]
        },
        "6": {
          "patterns": [
            {
              "include": "#expression"
            }
          ]
        },
        "7": {
          "name": "keyword.operator.type.annotation.sd"
        },
        "9": {
          "name": "entity.name.type.interface.sd"
        }
      },
      "patterns": [
        {
          "include": "#comment"
        }
      ]
    },
    "section-mark": {
      "name": "keyword.control.export.sd",
      "match": "^([ \t]*)(#+)",
      "patterns": [
        {
          "include": "#comment"
        }
      ]
    },
    "transition": {
      "name": "constant.numeric",
      "match": "([ \t]*)((?:^|.*[ ]+)(?:TO:|TO BLACK:|FADE OUT:|FADE IN:))",
      "patterns": [
        {
          "include": "#comment"
        }
      ]
    },
    "lyric": {
      "name": "markup.italic string",
      "match": "^([ \t]*)(~)(.*)",
      "patterns": [
        {
          "include": "#comment"
        }
      ]
    },
    "dialogue": {
      "contentName": "string",
      "begin": "^([ \t]*)(?![#!]|(\\[\\[)|(SUPERIMPOSE:))(((?!@)[^\\p{Ll}\\r\\n]*?\\p{Lu}[^\\p{Ll}\\r\\n]*?)|((@)[^\\r\\n]*?))(\\(.*\\))?(\\s*\\^)?$",
      "end": "^$",
      "beginCaptures": {
        "4": {
          "name": "entity.name.type.sd"
        },
        "7": {
          "name": "constant.character.escape.sd"
        },
        "8": {
          "name": "variable.other.sd"
        },
        "9": {
          "name": "constant.character.escape.sd"
        }
      },
      "applyEndPatternLast": 1,
      "patterns": [
        {
          "name": "comment.block.sd",
          "begin": "/\\*",
          "end": "\\*/"
        },
        {
          "name": "constant.character.escape",
          "match": "^[ \\t]*\\(.*\\)$",
          "patterns": [
            {
              "include": "#nested_parens"
            }
          ]
        },
        {
          "include": "#comment"
        },
        {
          "include": "#note"
        },
        {
          "include": "#inline"
        },
        {
          "include": "#lyric"
        }
      ]
    },
    "nested_parens": {
      "begin": "(",
      "end": ")",
      "patterns": [
        {
          "include": "#nested_parens"
        }
      ]
    },
    "action": {
      "contentName": "meta.paragraph.text",
      "begin": "^([ \t]*)(?=\\S)",
      "end": "^(?!\\1(?=\\S))",
      "patterns": [
        {
          "name": "markup.underline.link.text",
          "match": "(?x)\r\n                  ( (https?|s?ftp|ftps|file|smb|afp|nfs|(x-)?man|gopher|txmt)://|mailto:)\r\n                  [-:@a-zA-Z0-9_.,~%+/?=&#]+(?<![.,?:])\r\n               "
        },
        {
          "include": "#comment"
        },
        {
          "include": "#note"
        },
        {
          "include": "#inline"
        },
        {
          "include": "#lyric"
        }
      ]
    },
    "title": {
      "name": "string.other.title.sd",
      "begin": "^(?i)(title|credit|authors?|source|draft date|date|watermark|header|footer|contact|contact info|copyright|notes|font|revision|tl|tc|tr|cc|br|bl)(:)(.*(?:\\n   .*|\\n[^:\\n]+$)*)",
      "end": "^(?=(?i)(title|credit|authors?|source|draft date|date|watermark|header|footer|contact|contact info|copyright|notes|font|revision|tl|tc|tr|cc|br|bl)|$)",
      "captures": {
        "1": {
          "name": "keyword.other.title.sd"
        },
        "2": {
          "name": "punctuation.definition.tag.sd"
        },
        "3": {
          "patterns": [
            {
              "include": "#comment"
            },
            {
              "include": "#note"
            },
            {
              "include": "#inline"
            },
            {
              "include": "#link-inline"
            }
          ]
        }
      },
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#note"
        },
        {
          "include": "#inline"
        },
        {
          "include": "#link-inline"
        }
      ]
    }
  }
}
